&НаКлиенте
Перем Компонента;
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
НомерТСД=Строка(Константы.НомерТСД.Получить());
АТС=Константы.АСТ.Получить();
КонецПроцедуры
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Попытка
		ПодключитьВнешнююКомпоненту("ОбщийМакет.AddIn", "LibData", ТипВнешнейКомпоненты.Native);
		Компонента = Новый("AddIn.LibData.AddInNativeBEN");
		//Компонента.StartMyGetScan("app.dsic.barcodetray.BARCODE_BR_DECODING_DATA","EXTRA_BARCODE_DECODED_DATA");
		//Компонента.StartGetScan();
		Компонента.StartGetKeyEvent();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("драйвер сканирования не смог создать подключения-- сканирование на текущем устройстве работать не будет");
	КонецПопытки;
	
	//28.04.2020  устаревший метод заменен на работу Native  компоненты
	//ПодключитьОбработчикОжидания("УстановкаДрайверов",0.1,Истина);
	//
	УстановкаПервоначальныхДанныхОТСД();
	//////////////новый механизм отлавливания шк работает после определения модели 03072020
	Модель=СлужебныеФункцииИПроцедурыКлиентСервер.ПолучитьМодельТСД();
    Если Найти(Модель,"MC33") Тогда 
		Компонента.StartMyGetScan("com.symbol.datawedge.DWDEMO","com.symbol.datawedge.data_string");
	Иначе 
		Компонента.StartGetScan();
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура УстановкаПервоначальныхДанныхОТСД()
	Если СлужебныеФункцииИПроцедурыКлиентСервер.КомпанентаСканированияУстановлена() Тогда 
		Возврат 
	КонецЕсли;
	СлужебныеФункцииИПроцедурыКлиентСервер.ЗаписьСервесныхДанныхВКонстанты(СокрЛП(Компонента.GetDataTSD()));
	КонецПроцедуры

&НаКлиенте
Процедура Гвоздь(Команда)
	Оповестить("ОбработчикШтрихКода","2000000001395","ОбработчикШтрихКода");
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	если не ЗавершениеРаботы  тогда
		Если не ШтрихКодВведенВерно тогда
			Отказ=Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АвторизацияНаСервере(Команда="") Экспорт 
	Отказ=ложь;
	//ПроверкаПодключения(Отказ);
	//Если Отказ тогда
	//	Возврат
	//КонецЕсли;
	Если Найти(ВРЕГ(ШтрихКодАвторизации),"UWS#") Тогда
		
		Если униОбщийМодуль.ПолучитьДоступКUWS(ШтрихКодАвторизации) Тогда
			
			униОбщийМодуль.УстановитьПараметрыСеанса(ШтрихКодАвторизации);
			ШтрихКодВведенВерно=Истина;
			ЭтаФорма.Закрыть();
			Возврат;
		иначе
			ШтрихКодАвторизации = "00000000000-00000-000";
		КонецЕсли; 
		
	иначе
		Если НомерТСД="0" Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Укажите ваш номер ТСД");
			Возврат
		КонецЕсли;
		Если АТС = "" Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заполните свой номер по АТС");
			Возврат
		КонецЕсли;
	КонецЕсли;
	ЗапросНаАвторизацию(Отказ);
    Если Отказ тогда
		Возврат
	КонецЕсли;	
	ШтрихКодВведенВерно=Истина;
	ЭтаФорма.Закрыть();
КонецПроцедуры
&НаКлиенте
Процедура ЗавершитьРаботу(Команда)
	ЗавершитьРаботуСистемы();
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПодключения(Команда)
	ОткрытьФорму("ОбщаяФорма.ФормаКонстант");
КонецПроцедуры

&НаСервере
Процедура ПроверкаПодключения(Отказ)
	СлужебныеФункцииИПроцедурыКлиентСервер.ПроверкаПодключения(Отказ);
КонецПроцедуры

&НаСервере
Процедура ЗапросНаАвторизацию(Отказ)
Если Найти(ВРЕГ(ШтрихКодАвторизации),"UWS#")  Тогда

	Возврат;

КонецЕсли; 
СистемнаяИнформация=новый СистемнаяИнформация;
СтруктураДанныхАвторизации=новый Структура;
СтруктураДанныхАвторизации.Вставить("Статус",200);
СтруктураДанныхАвторизации.Вставить("ТСДИД",ПараметрыСеанса.ТСДИД);
СтруктураДанныхАвторизации.Вставить("ВерсияОС",Константы.ВерсияОС.Получить());
СтруктураДанныхАвторизации.Вставить("НомерТСД",НомерТСД);
СтруктураДанныхАвторизации.Вставить("АТС",АТС);
СтруктураДанныхАвторизации.Вставить("Модель",Константы.МодельТСД.Получить());
СтруктураДанныхАвторизации.Вставить("ТекущийПользователь");
СтруктураДанныхАвторизации.Вставить("Роль");
СтруктураДанныхАвторизации.Вставить("ШтрихКодПользователя",ШтрихКодАвторизации);
СтруктураДанныхАвторизации.Вставить("ОписаниеОшибки");
СтруктураДанныхАвторизации.Вставить("Территория");
СтруктураДанныхАвторизации.Вставить("Принтер","");
СтруктураДанныхАвторизации.Вставить("ВерсияКонфигурацииТСДWMS",Метаданные.Версия);
СтруктураДанныхАвторизации=ОбработчикиЗапросаСервера.ЗапроситьДанные(СтруктураДанныхАвторизации,"Registration");

Если СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(СтруктураДанныхАвторизации) тогда
	Отказ=Истина;
	Возврат
КонецЕсли;

ПараметрыСеанса.ТекущийПользователь=СтруктураДанныхАвторизации.ТекущийПользователь;
ПараметрыСеанса.Роль= СтруктураДанныхАвторизации.Роль;
ПараметрыСеанса.Территория=СтруктураДанныхАвторизации.Территория;
ПараметрыСеанса.Принтер=СтруктураДанныхАвторизации.Принтер;
КонецПроцедуры


&НаКлиенте
Процедура ШтрихКодАвторизацииОткрытие(Элемент, СтандартнаяОбработка)
  СтандартнаяОбработка=Ложь;
	#Если МобильноеПриложениеКлиент  тогда
		МодульМобильныхДивайсовКлиент.СканированиеКамерой(ЭтаФорма,"ШтрихКодАвторизации","АвторизацияНаСервере");
    #КонецЕсли	
КонецПроцедуры



&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если  ИмяСобытия="ОбработчикШтрихКода" и Источник="ОбработчикШтрихКода" тогда
		ШтрихКодАвторизации=Параметр;
		АвторизацияНаСервере();
	КонецЕсли;
	Если ИмяСобытия="ОбработчикШтрихКода" и Источник="ОшибкаЧтения" тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ошибка чтения штрих-кода");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура Uniwebsrv(Команда)
	ОткрытьФорму("ОбщаяФорма.униФормаНастройкиПодключения");
КонецПроцедуры

&НаКлиенте
Процедура ВсеГуд(Команда)
	ШтрихКодАвторизации = "UWS#Балблабла";
	АвторизацияНаСервере();
КонецПроцедуры




&НаСервере
Процедура НомерТСДПриИзмененииНаСервере()
Константы.НомерТСД.Установить(Число(НомерТСД));
КонецПроцедуры


&НаКлиенте
Процедура НомерТСДПриИзменении(Элемент)
	НомерТСДПриИзмененииНаСервере();
КонецПроцедуры


&НаСервере
Процедура АСТПриИзмененииНаСервере()
Константы.АСТ.Установить(АТС);
КонецПроцедуры


&НаКлиенте
Процедура АСТПриИзменении(Элемент)
АСТПриИзмененииНаСервере();
КонецПроцедуры

#Область УстаревшийФункционал
&НаКлиенте
Процедура РегистрацияДрайверов(Команда)
//Ответ=0;
Ответ=МодульМобильныхДивайсовКлиент.ПолучениеДанныхСистемнойИнформации();
//Если Ответ=0 Тогда 
//	ВызватьИсключение "Вы не установили драйвер системной информации,пожалуйста установите apk файл из сообщения ранее";
//    Возврат
//КонецЕсли;	
//Ответ=0;
Ответ=МодульМобильныхДивайсовКлиент.РегистрацияБазыВСканереHoneyWell();
//Если Ответ=0 Тогда 
//	ВызватьИсключение "Вы не установили драйвер штрих кода, пожалуйста установите apk файл из сообщения ранее";
//    Возврат
//КонецЕсли;	
СлужебныеФункцииИПроцедурыКлиентСервер.ПодтвердитьУстановкуКомпаненты();
ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Регистрация прошла успешно");
КонецПроцедуры
&НаКлиенте
Процедура УстановкаДрайверов() Экспорт
	#Если МобильноеПриложениеКлиент  тогда
		Если не ПопытатьсяСоеденитьсяСДрайверами() Тогда 
		МодульМобильныхДивайсовКлиент.УстановкаДрайверов();
		КонецЕсли;
	#КонецЕсли
	КонецПроцедуры
&НаКлиенте
Функция  ПопытатьсяСоеденитьсяСДрайверами()
	Если СлужебныеФункцииИПроцедурыКлиентСервер.КомпанентаСканированияУстановлена() Тогда 
		Возврат Истина;
	КонецЕсли;	
	Ответ=0;
	Ответ=МодульМобильныхДивайсовКлиент.ПолучениеДанныхСистемнойИнформации();
	Если Ответ=0 Тогда
		Возврат Ложь;
	КонецЕсли;
	Ответ=0;
	Ответ=МодульМобильныхДивайсовКлиент.РегистрацияБазыВСканереHoneyWell();
	Если Ответ=0 Тогда 
		Возврат Ложь;
	КонецЕсли;
	СлужебныеФункцииИПроцедурыКлиентСервер.ПодтвердитьУстановкуКомпаненты();
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Регистрация прошла успешно");
	Возврат Истина;
КонецФункции


#КонецОбласти
