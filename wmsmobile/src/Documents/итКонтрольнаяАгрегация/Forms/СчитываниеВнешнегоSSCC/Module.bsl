
#Область ОбработчикиСобытий
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.ОбъектДанных.Пустая() тогда
		Отказ=Истина;
		Сообщить("Не верный формат данных");
	КонецЕсли;
	ОбъектДанных=Параметры.ОбъектДанных;
	ТипЗадачи=ОбъектДанных.ТипЗадачи;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбщийМодульКлиентскойЧасти.ПереопределенияТригераПолучениеШтрихКодаПриОткрытии(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если не НеВозвращатьКонтрольНадТригером тогда
		ОбщийМодульКлиентскойЧасти.ПереопределенияТригераПолучениеШтрихКодаПриЗакрытии(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия="ОбработчикШтрихКода"  и ТригерПриемаСканераШтрихКода тогда
		Если Параметр=404 и Источник="ОшибкаЧтения" тогда
			ОбщийМодульКлиентскойЧасти.СообщитьЧерезФорму("Штрих код некорректен");
			Возврат
		КонецЕсли;	
		СчитанныйSSCC=Параметр;
		ПрименитьКДокументу();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд
&НаКлиенте
Процедура Назад(Команда)
	ЭтаФорма.Закрыть();
КонецПроцедуры
&НаКлиенте
Процедура ПрименитьКДокументу()
	Если ЗначениеЗаполнено(СчитанныйSSCC) тогда
		Отказ=Ложь;
		ОбщийМодульКлиентскойЧасти.ПроверитьSSCCНаЛеквидность(СчитанныйSSCC,Отказ);
		Если Отказ тогда
			Сообщить("текущий штрих код не соответствует нормам SSCC");
			Возврат
		КонецЕсли;	
		ПрисвоитьВнешнийSSCCНаСервере(СчитанныйSSCC,Отказ);
		Если Отказ тогда
			Возврат
		КонецЕсли;
		ВладелецФормы.Элементы.ЗадачиТСД.Обновить();
		ОбработкаПолученияДанныхШтрихКода(СчитанныйSSCC);	
		//ОповеститьОВыборе(СчитанныйSSCC);
	иначе
		ОбщийМодульКлиентскойЧасти.СообщитьЧерезФорму("Вы не считали ни какого штрих-кода");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере	
Процедура ПрисвоитьВнешнийSSCCНаСервере(SSCC,Отказ)
	
	
	СтруктураДанных=новый Структура;
	СлужебныеФункцииИПроцедурыКлиентСервер.СформироватьСтруктуруДанныхОПользователе(СтруктураДанных);
	СтруктураДанных.Вставить("ТипОбработкиДанных","ВнешнийSSCCКонтрольнаяАгрегация");
	СтруктураДанных.Вставить("КлючИнициализацииДанных",ОбъектДанных.ГУИД);
	СтруктураДанных.Вставить("ТипЗадачи",ОбъектДанных.ТипЗадачи);
	СтруктураДанных.Вставить("ВнешнийSSCC",SSCC);
	СтруктураДанных=ОбработчикиЗапросаСервера.ЗапроситьДанные(СтруктураДанных,"ControlAggregation");
	Если СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(СтруктураДанных) тогда
		Отказ=Истина;
		Возврат
	КонецЕсли;	
	МодульРаспределенияДанных.ОбработчикВходящихДанных(СтруктураДанных);
КонецПроцедуры
&НаКлиенте
Процедура ОбработкаПолученияДанныхШтрихКода(ШтрихКод)
	СтруктураОтвета=СлужебныеФункцииИПроцедурыКлиентСервер.ПолучитьДанныеИзИтЗадачиТСД(ШтрихКод,ОбъектДанных);
	ПредставлениеТипаЗадачи=СлужебныеФункцииИПроцедурыКлиентСервер.ПредставлениеТипаЗадачиТСД(ТипЗадачи);
	Если СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(СтруктураОтвета,ПредставлениеТипаЗадачи) тогда
		Возврат
	КонецЕсли;
	//СтруктураОтвета[ПредставлениеТипаЗадачи].Вставить("ЭтоВнешнееСчитывание",Истина);	
	Если ИнициализацияЗадачиНаСервере(СтруктураОтвета[ПредставлениеТипаЗадачи]) тогда
		ОткрытьФорму("Документ.итКонтрольнаяАгрегация.Форма.ФормаЗадачиДокумента",СтруктураОтвета[ПредставлениеТипаЗадачи],ЭтаФорма.ВладелецФормы);
		ТригерПриемаСканераШтрихКода=Ложь;
		НеВозвращатьКонтрольНадТригером=Истина;
		ЭтаФорма.Закрыть();
	иначе
		ОбщийМодульКлиентскойЧасти.СообщитьЧерезФорму("Отказ инициализации Задач");
	КонецЕсли;
КонецПроцедуры
&НаСервере
Функция  ИнициализацияЗадачиНаСервере(СтруктураОтвета)
	Если ИнфорацияОСтатусеДокумента() тогда
		Возврат ОбработчикДанныхОбщиеФункцииИПроцедуры.ИнициализацияЗадачиНаСервере(СтруктураОтвета,"Задача",Перечисления.итWMSСостоянияЗадачТСД.Выполняется);	
	иначе
		Возврат ОбработчикДанныхОбщиеФункцииИПроцедуры.ИнициализацияЗадачиНаСервере(СтруктураОтвета,"Документ",Перечисления.итWMSСостоянияЗадачТСД.Выполняется);		
	КонецЕсли;
КонецФункции

&НаСервере
Функция ИнфорацияОСтатусеДокумента()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ИтЗадачиНаТСД.Состояние = ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.Выполнена)
	|					ИЛИ ИтЗадачиНаТСД.Состояние = ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.Выполняется)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Статус
	|ИЗ
	|	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
	|ГДЕ
	|	ИтЗадачиНаТСД.ДокументОснование = &ДокументОснование
	|	И ИтЗадачиНаТСД.ТипЗадачи = &ТипЗадачи";
	
	Запрос.УстановитьПараметр("ДокументОснование", ОбъектДанных.Ссылка);
	Запрос.УстановитьПараметр("ТипЗадачи", ОбъектДанных.ТипЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		Если  ВыборкаДетальныеЗаписи.Статус=1 тогда
			Возврат Истина;
		иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции

#КонецОбласти