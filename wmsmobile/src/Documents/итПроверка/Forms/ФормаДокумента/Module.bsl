#Область ОбработчикиСобытий
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
ЗадачиТСД.Параметры.УстановитьЗначениеПараметра("ДокументОснование",Объект.Ссылка);
ЗадачиТСД.Параметры.УстановитьЗначениеПараметра("ТипЗадачи",Объект.ТипЗадачи);
УстановитьТекстНадписей();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
Если ИмяСобытия = "ОбработчикШтрихКода" и ТригерПриемаСканераШтрихКода тогда
	Если Параметр = 404 и Источник = "ОшибкаЧтения" тогда
		ОбщийМодульКлиентскойЧасти.СообщитьЧерезФорму("Штрих код некорректен");
		Возврат
	КонецЕсли;
	ОбработчкаПолученияДанныхШтрихКода(Параметр);
КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ПриОткрытии(Отказ)
ОбщийМодульКлиентскойЧасти.ПереопределенияТригераПолучениеШтрихКодаПриОткрытии(ЭтаФорма);
ВидимостьДоступностьЭлементов();
КонецПроцедуры
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
ОбщийМодульКлиентскойЧасти.ПереопределенияТригераПолучениеШтрихКодаПриЗакрытии(ЭтаФорма);
КонецПроцедуры
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если  ИсточникВыбора.ИмяФормы="Документ.итПроверка.Форма.ФормаЗадачиДокумента" Тогда
	УстановитьТекстНадписей();	
	Если Элементы.ОсталосьПроверитьДанные.Заголовок="0"  Тогда 
		ЗавершитьПроверку("");
	КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиТСДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ИдентификаторУпаковки) тогда
	Оповещение = новый ОписаниеОповещения("ПечатьИдентификатораУпаковкиОповещение",ЭтаФорма,Элемент.ТекущиеДанные.ИдентификаторУпаковки);
    ПоказатьВопрос(Оповещение,"Хотите распечатать текущий идентификатор?",РежимДиалогаВопрос.ДаНет);
КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьИдентификатораУпаковкиОповещение(Результат,Параметры) Экспорт
	Если Результат=КодВозвратаДиалога.Нет тогда
		Возврат
	КонецЕсли;	
ОткрытьФорму("ОбщаяФорма.ВыборПринтераДляПечати",Новый Структура("ИдентификаторУпаковки",Параметры),ЭтаФорма);
ТригерПриемаСканераШтрихКода=Ложь;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКоманд
&НаКлиенте
Процедура ОтказатьсяОтЗадачи(Команда)
	Оповещение = новый ОписаниеОповещения("ОтказатьсяОтЗадачиОповещение", ЭтаФорма);
	ПоказатьВопрос(Оповещение, "Вы точно хотите отказаться от Задачи", РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьсяОтЗадачиОповещение(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет тогда
		Возврат
	КонецЕсли;
	Если ОтказатьсяОтЗадачиНаСервере() тогда
		ОбщийМодульКлиентскойЧасти.ОповещениеДинамическихСписковОткрытыхФорм();
		ЭтаФорма.Закрыть();
	иначе
		ОбщийМодульКлиентскойЧасти.СообщитьЧерезФорму("не удачная попытка отказа от задачи, попробуйте еще раз, или подойтиде к оператору");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ОтказатьсяОтЗадачиНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИтЗадачиНаТСД.ИдЗадачи КАК ИдЗадачи,
	               |	ИтЗадачиНаТСД.ТипЗадачи КАК ТипЗадачи,
	               |	ИтЗадачиНаТСД.Состояние КАК Состояние
	               |ИЗ
	               |	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
	               |ГДЕ
	               |	ИтЗадачиНаТСД.ДокументОснование = &ДокументОснование
	               |	И ИтЗадачиНаТСД.ТипЗадачи = &ТипЗадачи";
	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТипЗадачи", Объект.ТипЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выполнено=Истина;
	МассивИдЗадач=новый Массив;
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивИдЗадач.Добавить(ВыборкаДетальныеЗаписи.ИдЗадачи);
	КонецЦикла;
	СтруктураДанных=новый Структура;
    СлужебныеФункцииИПроцедурыКлиентСервер.СформироватьСтруктуруДанныхОПользователе(СтруктураДанных);
	СтруктураДанных.Вставить("КлючИнициализацииДанных",Неопределено);
	СтруктураДанных.Вставить("ТипОбработкиДанных","ОтказОтЗадачТСД");
	СтруктураДанных.Вставить("МассивИдЗадач",МассивИдЗадач);
	СтруктураДанных=ОбработчикиЗапросаСервера.ЗапроситьДанные(СтруктураДанных,"CheckingShipment");
	Если СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(СтруктураДанных,"Инициализация") Тогда 
		Возврат Ложь;
	КонецЕсли;
	МодульРаспределенияДанных.ОбработчикВходящихДанных(СтруктураДанных);
	Возврат Истина;
КонецФункции


&НаСервере
Функция ОтказатьсяОтЗадачиНаСервереСтараяВерсия()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИтЗадачиНаТСД.ИдЗадачи КАК ИдЗадачи,
	|	ИтЗадачиНаТСД.ТипЗадачи КАК ТипЗадачи,
	|	ИтЗадачиНаТСД.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
	|ГДЕ
	|	ИтЗадачиНаТСД.ДокументОснование = &ДокументОснование
	|	И ИтЗадачиНаТСД.ТипЗадачи = &ТипЗадачи";
	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТипЗадачи", Объект.ТипЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	СтруктураОтказаЗадачи = новый Структура;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		для Каждого Колонка из РезультатЗапроса.Колонки цикл
			СтруктураОтказаЗадачи.Вставить(Колонка.Имя, ВыборкаДетальныеЗаписи[Колонка.Имя]);
		КонецЦикла;
	КонецЦикла;
	Возврат ОбработчикДанныхОбщиеФункцииИПроцедуры.ИнициализацияЗадачиНаСервере(СтруктураОтказаЗадачи, "ДокументОтказ", Перечисления.итWMSСостоянияЗадачТСД.КВыполнению);
	
КонецФункции
&НаКлиенте
Процедура Назад(Команда)
	ЭтаФорма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПроверку(Команда)
	Если  ЗавершитьПроверкуСервере() Тогда 
		ОбщийМодульКлиентскойЧасти.ОповещениеДинамическихСписковОткрытыхФорм();
		ЭтаФорма.Закрыть();
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура КраткаяИнформация(Команда)
	ОткрытьФорму("Документ.итПроверка.Форма.ФормаКраткогоСодержания",новый Структура("Ссылка",Объект.Ссылка),ЭтаФорма);
	ТригерПриемаСканераШтрихКода=Ложь;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции
&НаКлиенте
Процедура ВидимостьДоступностьЭлементов()
	ВидимостьДоступностьЭлементовСервер();
КонецПроцедуры
&НаСервере
Процедура ВидимостьДоступностьЭлементовСервер()
	Если Элементы.ОсталосьПроверитьДанные.Заголовок="0" Тогда 
		Элементы.ЗавершитьПроверку.Видимость=Истина;
	КонецЕсли;	
КонецПроцедуры



&НаСервере
Процедура УстановитьТекстНадписей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИтЗадачиНаТСД.Состояние КАК Состояние,
		|	ИтЗадачиНаТСД.ИдЗадачи КАК ИдЗадачи,
		|	ИтЗадачиНаТСД.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ ВтЗадачиДокумента
		|ИЗ
		|	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
		|ГДЕ
		|	ИтЗадачиНаТСД.ДокументОснование = &ДокументОснование
		|	И ИтЗадачиНаТСД.ТипЗадачи = &ТипЗадачи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВтЗадачиДокумента.ИдЗадачи) КАК КоличествоЗадач,
		|	ВтЗадачиДокумента.ДокументОснование КАК ДокументОснование
		|ИЗ
		|	ВтЗадачиДокумента КАК ВтЗадачиДокумента
		|ГДЕ
		|	(ВтЗадачиДокумента.Состояние = ЗНАЧЕНИЕ(Перечисление.итwmsСостоянияЗадачТсд.Выполнена)
		|			ИЛИ ВтЗадачиДокумента.Состояние = ЗНАЧЕНИЕ(Перечисление.итwmsСостоянияЗадачТсд.Отменена))
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтЗадачиДокумента.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВтЗадачиДокумента.ИдЗадачи) КАК КоличествоЗадач,
		|	ВтЗадачиДокумента.ДокументОснование КАК ДокументОснование
		|ИЗ
		|	ВтЗадачиДокумента КАК ВтЗадачиДокумента
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтЗадачиДокумента.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтЗадачиДокумента.ДокументОснование КАК ДокументОснование,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВтЗадачиДокумента.ИдЗадачи) КАК КоличествоЗадач
		|ИЗ
		|	ВтЗадачиДокумента КАК ВтЗадачиДокумента
		|ГДЕ
		|	НЕ ВтЗадачиДокумента.Состояние В (ЗНАЧЕНИЕ(Перечисление.итwmsСостоянияЗадачТсд.Выполнена), ЗНАЧЕНИЕ(Перечисление.итwmsСостоянияЗадачТсд.Отменена))
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтЗадачиДокумента.ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТипЗадачи", Объект.ТипЗадачи);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаВыполненныхЗадач=МассивРезультатов[1].Выбрать();
	ВыборкаВсегоЗадач=МассивРезультатов[2].Выбрать();
    ВыборкаНеВыполненныхЗадач=МассивРезультатов[3].Выбрать();
	
	Если   ВыборкаВыполненныхЗадач.Следующий() Тогда 
		Элементы.ПровереноДанные.Заголовок=Строка(ВыборкаВыполненныхЗадач.КоличествоЗадач);
	иначе
		Элементы.ПровереноДанные.Заголовок="0";
	КонецЕсли;
	Пока  ВыборкаВсегоЗадач.Следующий() цикл
		Элементы.НеобходимоПроверитьДанные.Заголовок=Строка(ВыборкаВсегоЗадач.КоличествоЗадач);
	КонецЦикла;
	Если   ВыборкаНеВыполненныхЗадач.Следующий() Тогда 
		Элементы.ОсталосьПроверитьДанные.Заголовок=Строка(ВыборкаНеВыполненныхЗадач.КоличествоЗадач);
	иначе
		Элементы.ОсталосьПроверитьДанные.Заголовок="0"
	КонецЕсли;
		
	КонецПроцедуры
&НаКлиенте
Процедура ОбработчкаПолученияДанныхШтрихКода(ШтрихКод)
Отказ=Ложь;
СлужебныеФункцииИПроцедурыКлиентСервер.ПроверитьSSCCНаЛеквидность(ШтрихКод,Отказ);
Если  Отказ Тогда 
	Сообщить("Сканирован не верный формат SSCC");
	Возврат
КонецЕсли;
СтруктураОтвета=СлужебныеФункцииИПроцедурыКлиентСервер.ПолучитьДанныеИзИтЗадачиТСД(ШтрихКод);
ПредставлениеТипаЗадачи=СлужебныеФункцииИПроцедурыКлиентСервер.ПредставлениеТипаЗадачиТСД(Объект.ТипЗадачи);

ИдЗадачи=СтруктураОтвета[ПредставлениеТипаЗадачи].ИдЗадачи;
Если ПеревстиЗадачуВСостояниеВыполняется(СтруктураОтвета[ПредставлениеТипаЗадачи])  Тогда 
УстановитьТекстНадписей();
ОткрытьФорму("Документ.итПроверка.Форма.ФормаЗадачиДокумента",новый Структура("ИдЗадачи",ИдЗадачи),ЭтаФорма);
ТригерПриемаСканераШтрихКода=Ложь; 
КонецЕсли;
КонецПроцедуры
&НаСервере
Функция ПолучитьДанныеЗадачиПоШтрихКоду(ШтрихКод)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИтЗадачиНаТСД.ИдЗадачи КАК ИдЗадачи
	|ИЗ
	|	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
	|ГДЕ
	|	ИтЗадачиНаТСД.ДокументОснование = &ДокументОснование
	|	И ИтЗадачиНаТСД.ТипЗадачи = &ТипЗадачи
	|	И ИтЗадачиНаТСД.ИдентификаторУпаковки = &ИдентификаторУпаковки";
	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	Запрос.УстановитьПараметр("ИдентификаторУпаковки", ШтрихКод);
	Запрос.УстановитьПараметр("ТипЗадачи", Объект.ТипЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат ВыборкаДетальныеЗаписи.ИдЗадачи;	
	КонецЦикла;
	
    Возврат Неопределено;
	
	КонецФункции
&НаСервере	
Функция ПеревстиЗадачуВСостояниеВыполняется(Структура)
	Если Структура.Состояние<>Перечисления.итWMSСостоянияЗадачТСД.Выполняется Тогда 
		Возврат ОбработчикДанныхОбщиеФункцииИПроцедуры.ИнициализацияЗадачиНаСервере(Структура,"Задача",Перечисления.итWMSСостоянияЗадачТСД.Выполняется);	
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаСервере
Функция  ЗавершитьПроверкуСервере()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИтЗадачиНаТСД.ИдЗадачи КАК ИдЗадачи,
	               |	ИтЗадачиНаТСД.ТипЗадачи КАК ТипЗадачи,
	               |	ИтЗадачиНаТСД.Состояние КАК Состояние
	               |ИЗ
	               |	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
	               |ГДЕ
	               |	ИтЗадачиНаТСД.ДокументОснование = &ДокументОснование
	               |	И ИтЗадачиНаТСД.ТипЗадачи = &ТипЗадачи";
	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТипЗадачи", Объект.ТипЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выполнено=Истина;
	МассивИдЗадач=новый Массив;
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивИдЗадач.Добавить(ВыборкаДетальныеЗаписи.ИдЗадачи);
	КонецЦикла;
	СтруктураДанных=новый Структура;
    СлужебныеФункцииИПроцедурыКлиентСервер.СформироватьСтруктуруДанныхОПользователе(СтруктураДанных);
	СтруктураДанных.Вставить("КлючИнициализацииДанных",Неопределено);
	СтруктураДанных.Вставить("ТипОбработкиДанных","ФиксацияЗадачПроверки");
	СтруктураДанных.Вставить("МассивИдЗадач",МассивИдЗадач);
	СтруктураДанных=ОбработчикиЗапросаСервера.ЗапроситьДанные(СтруктураДанных,"CheckingShipment");
	Если СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(СтруктураДанных,"Инициализация") Тогда 
		Возврат Ложь;
	КонецЕсли;
	МодульРаспределенияДанных.ОбработчикВходящихДанных(СтруктураДанных);
	Возврат Истина;
КонецФункции

&НаСервере
Функция  ЗавершитьПроверкуСервереСтарая()
	СтруктураДанных =новый Структура;
	СлужебныеФункцииИПроцедурыКлиентСервер.СформироватьСтруктуруДанныхОПользователе(СтруктураДанных);
    ЗадачаДокумента= ПолучитьЗадачуДокумента();
    Если ЗадачаДокумента=Неопределено тогда
		Сообщить("По документу не обнаруженно данных");
		Возврат Ложь;
	КонецЕсли;	
    СтруктураДанных.Вставить("КлючИнициализацииДанных",ЗадачаДокумента);
	СтруктураДанных.Вставить("ТипЗадачи",Объект.ТипЗадачи);
	СтруктураДанных.Вставить("ТипИнициализации","Документ");
	СтруктураДанных.Вставить("СостояниеИнициализации",Перечисления.итWMSСостоянияЗадачТСД.Выполнена);
	СтруктураДанных.Вставить("Инициализация",Ложь);
    СтруктураДанных.Вставить("ФиксацияЗадачи",Истина);
	СтруктураДанных=ОбработчикиЗапросаСервера.ЗапроситьДанные(СтруктураДанных,"Initialization");
	СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(СтруктураДанных,"Инициализация");
	МодульРаспределенияДанных.ОбработчикВходящихДанных(СтруктураДанных);
    Возврат СтруктураДанных.Инициализация; 
КонецФункции
&НаСервере
Функция ПолучитьЗадачуДокумента()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИтЗадачиНаТСД.ИдЗадачи КАК ИдЗадачи
		|ИЗ
		|	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
		|ГДЕ
		|	ИтЗадачиНаТСД.ДокументОснование = &ДокументОснование
		|	И ИтЗадачиНаТСД.ТипЗадачи = &ТипЗадачи";
	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТипЗадачи", Объект.ТипЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		Возврат ВыборкаДетальныеЗаписи.ИдЗадачи;
		КонецЕсли;
	Возврат Неопределено;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	КонецФункции



#КонецОбласти