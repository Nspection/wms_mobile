

#Область ОбработчикиСобытий
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("Объект") тогда
		Объект=Параметры.Объект;
		ЗаполнитьСпискиВыбора();
		Если Объект.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.ПриемкаКакЕсть тогда
			Элементы.ДатаРозлива.КнопкаВыпадающегоСписка=Истина;
			Элементы.ДатаРозлива.ТолькоПросмотр=Ложь;
			Элементы.НоменклатураПредставление.РежимВыбораИзСписка=Истина;
			Элементы.НоменклатураПредставление.ТолькоПросмотр=Ложь;
			Элементы.КоличествоПлан.Видимость=Ложь;
		иначе
			Элементы.ВсегоТовара.Видимость=Ложь;
			Элементы.ОстатокДоступногоТовара.Видимость=Ложь;
			//Элементы.ДатаРозлива.СписокВыбора=СписокДатРозлива;
			//Элементы.НоменклатураПредставление.СписокВыбора=СписокНоменклатуры;
		КонецЕсли;	
	КонецЕсли;
	Если Параметры.Свойство("ИдЗадачи") и Параметры.Свойство("ИдСтроки") тогда
		ЗаполнитьЗначениеФормы();
		ИдЗадачи=Параметры.ИдЗадачи;
		ИдСтроки=Параметры.ИдСтроки;
	КонецЕсли;
    ПомарочныйУчет=Объект.ПомарочныйУчет;	
КонецПроцедуры
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбщийМодульКлиентскойЧасти.ПереопределенияТригераПолучениеШтрихКодаПриОткрытии(ЭтаФорма);
	ПриОткрытииНаСервере();

КонецПроцедуры
&НаСервере
Процедура ПриОткрытииНаСервере()
	Если Объект.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.ПриемкаКакЕсть и НоменклатураПредставление<>"" тогда
		ПроверкаПоКоличестуТовара(НоменклатураПредставление);
		КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	ОбщийМодульКлиентскойЧасти.ПереопределенияТригераПолучениеШтрихКодаПриЗакрытии(ЭтаФорма);	
КонецПроцедуры
&НаКлиенте
Процедура НоменклатураПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение<>"" тогда
	ПроверкаПоКоличестуТовара(ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаРозливаПриИзменении(Элемент)
НоменклатураПредставлениеПриИзменении("");
КонецПроцедуры

&НаКлиенте
Процедура КоличествоФактПриИзменении(Элемент)
НоменклатураПредставлениеПриИзменении("");
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПредставлениеПриИзменении(Элемент)
	Если НоменклатураПредставление="" тогда
		ВсегоТовара=0;
		ОстатокДоступногоТовара=0;
	иначе
		ПроверкаПоКоличестуТовара(НоменклатураПредставление);
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд
&НаКлиенте
Процедура Проверено(Команда)
	Если УтвердитьПроверкуНаСервереФормы() тогда
		ОповеститьОВыборе(СформироватьСтруктуруОповещения());
		//ЭтаФорма.Закрыть();
	КонецЕсли;	
КонецПроцедуры
&НаКлиенте
Процедура Назад(Команда)
	ЭтаФорма.Закрыть();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура ЗаполнитьЗначениеФормы()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИтСтрокиЗадачНаТСД.ИдЗадачи КАК ИдЗадачи,
		|	ИтСтрокиЗадачНаТСД.ИдСтроки КАК ИдСтроки,
		|	ИтСтрокиЗадачНаТСД.Номенклатура КАК Номенклатура,
		|	ИтСтрокиЗадачНаТСД.НоменклатураПредставление КАК НоменклатураПредставление,
		|	ИтСтрокиЗадачНаТСД.ДатаРозлива КАК ДатаРозлива,
		|	ИтСтрокиЗадачНаТСД.СерияНоменклатуры КАК СерияНоменклатуры,
		|	ИтСтрокиЗадачНаТСД.СерияНоменклатурыПредставление КАК СерияНоменклатурыПредставление,
		|	ИтСтрокиЗадачНаТСД.Количество КАК КоличествоПлан,
		|	ИтСтрокиЗадачНаТСД.ДанныеДокументаТСД КАК ДанныеДокументаТСД
		|ИЗ
		|	РегистрСведений.ИтСтрокиЗадачНаТСД КАК ИтСтрокиЗадачНаТСД
		|ГДЕ
		|	ИтСтрокиЗадачНаТСД.ИдЗадачи = &ИдЗадачи
		|	И ИтСтрокиЗадачНаТСД.ИдСтроки = &ИдСтроки";
	
	Запрос.УстановитьПараметр("ИдЗадачи", Параметры.ИдЗадачи);
	Запрос.УстановитьПараметр("ИдСтроки", Параметры.ИдСтроки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма,ВыборкаДетальныеЗаписи);
		Если Объект.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.ПриемкаКакЕсть и ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НоменклатураПредставление) тогда
			НоменклатураПредставление=Строка(ВыборкаДетальныеЗаписи.Номенклатура);
			КонецЕсли;
		ЗначениеХранилища=ВыборкаДетальныеЗаписи.ДанныеДокументаТСД.Получить();
		Если ЗначениеХранилища<>Неопределено тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма,ЗначениеХранилища);
		КонецЕсли;
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры
&НаСервере
Процедура ЗаполнитьСпискиВыбора()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итПриемкаДанныеФизическогоНосителя.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(итПриемкаДанныеФизическогоНосителя.НоменклатураПредставление) КАК НоменклатураПредставление
		|ИЗ
		|	Документ.итПриемка.ДанныеФизическогоНосителя КАК итПриемкаДанныеФизическогоНосителя
		|ГДЕ
		|	итПриемкаДанныеФизическогоНосителя.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	итПриемкаДанныеФизическогоНосителя.Номенклатура";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Элементы.НоменклатураПредставление.СписокВыбора.Добавить(Строка(ВыборкаДетальныеЗаписи.Номенклатура),ВыборкаДетальныеЗаписи.НоменклатураПредставление);
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итПриемкаДанныеФизическогоНосителя.ДатаРозлива КАК ДатаРозлива
		|ИЗ
		|	Документ.итПриемка.ДанныеФизическогоНосителя КАК итПриемкаДанныеФизическогоНосителя
		|ГДЕ
		|	итПриемкаДанныеФизическогоНосителя.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	итПриемкаДанныеФизическогоНосителя.ДатаРозлива";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Элементы.ДатаРозлива.СписокВыбора.Добавить(ВыборкаДетальныеЗаписи.ДатаРозлива);
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	КонецПроцедуры

&НаСервере
Функция СформироватьСтруктуруОповещения()
	Если Объект.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.Приемка тогда
	Возврат Новый Структура("КоличествоФакт,ИдСтроки",КоличествоФакт,ИдСтроки) ;
иначе
	Возврат Новый Структура("КоличествоФакт,КоличествоПлан,ИдСтроки,ДатаРозлива,Номенклатура,НоменклатураПредставление",КоличествоФакт,КоличествоФакт,ИдСтроки,ДатаРозлива,новый УникальныйИдентификатор(НоменклатураПредставление),
	Элементы.НоменклатураПредставление.СписокВыбора.НайтиПоЗначению(НоменклатураПредставление).Представление);
	КонецЕсли;
	КонецФункции
&НаСервере
Функция УтвердитьПроверкуНаСервереФормы()
НаборЗаписей=РегистрыСведений.ИтСтрокиЗадачНаТСД.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.ИдЗадачи.Установить(ИдЗадачи);
НаборЗаписей.Отбор.ИдСтроки.Установить(ИдСтроки);
НаборЗаписей.Прочитать();
Если НаборЗаписей.Количество()=0 тогда
	Сообщить("Строка была изменена или удалена на сервере,обновите данные");
	Возврат Ложь;
КонецЕсли;
Если НаборЗаписей.Количество()>1 тогда
	Сообщить("2 записи строки.... необъяснимая ошибка,обратитесь к администратору");
	Возврат Ложь;
КонецЕсли;

для Каждого Запись из НаборЗаписей цикл
	Если Объект.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.ПриемкаКакЕсть тогда
		Запись.Номенклатура=новый УникальныйИдентификатор(НоменклатураПредставление);
		Запись.НоменклатураПредставление=Элементы.НоменклатураПредставление.СписокВыбора.НайтиПоЗначению(НоменклатураПредставление).Представление;
		Запись.Количество=КоличествоФакт;
		Запись.ДатаРозлива=ДатаРозлива;
	КонецЕсли;
	ХранилищеЗначений=новый ХранилищеЗначения(Новый Структура("КоличествоФакт",КоличествоФакт));
	
	Запись.ДанныеДокументаТСД=ХранилищеЗначений;
КонецЦикла;
НаборЗаписей.Записать();
 Возврат Истина;
КонецФункции

&НаСервере
Процедура ПроверкаПоКоличестуТовара(УИД)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	Если Объект.ТипЗадачи<> Перечисления.итWMSТипыЗадачТСД.ПриемкаКакЕсть тогда
		Возврат
	КонецЕсли;	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ЕСТЬNULL(итПриемкаДанныеФизическогоНосителя.Количество, 0)) КАК КоличествоВсего,
		|	итПриемкаДанныеФизическогоНосителя.Номенклатура КАК Номенклатура,
		|	итПриемкаДанныеФизическогоНосителя.ДатаРозлива КАК ДатаРозлива
		|ПОМЕСТИТЬ ТаблицаГруппировкиДанных
		|ИЗ
		|	Документ.итПриемка.ДанныеФизическогоНосителя КАК итПриемкаДанныеФизическогоНосителя
		|ГДЕ
		|	итПриемкаДанныеФизическогоНосителя.Ссылка = &Ссылка
		|	И итПриемкаДанныеФизическогоНосителя.Номенклатура = &Номенклатура
		|	И итПриемкаДанныеФизическогоНосителя.ДатаРозлива = &ДатаРозлива
		|
		|СГРУППИРОВАТЬ ПО
		|	итПриемкаДанныеФизическогоНосителя.Номенклатура,
		|	итПриемкаДанныеФизическогоНосителя.ДатаРозлива
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ЕСТЬNULL(ТаблицаГруппировкиДанных.КоличествоВсего, 0)) КАК КоличествоВсего,
		|	ЕСТЬNULL(ТаблицаГруппировкиДанных.Номенклатура, ВложенныйЗапрос.Номенклатура) КАК Номенклатура,
		|	ЕСТЬNULL(ТаблицаГруппировкиДанных.ДатаРозлива, ВложенныйЗапрос.ДатаРозлива) КАК ДатаРозлива,
		|	СУММА(ЕСТЬNULL(ВложенныйЗапрос.Количество, 0)) КАК КоличествоВДокументе
		|ИЗ
		|	ТаблицаГруппировкиДанных КАК ТаблицаГруппировкиДанных
		|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ИтСтрокиЗадачНаТСД.Номенклатура КАК Номенклатура,
		|			СУММА(ВЫБОР
		|					КОГДА ИтСтрокиЗадачНаТСД.ИдСтроки = &ИдСтроки
		|						ТОГДА 0
		|					ИНАЧЕ ЕСТЬNULL(ИтСтрокиЗадачНаТСД.Количество, 0)
		|				КОНЕЦ) КАК Количество,
		|			ИтСтрокиЗадачНаТСД.ДатаРозлива КАК ДатаРозлива
		|		ИЗ
		|			РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИтСтрокиЗадачНаТСД КАК ИтСтрокиЗадачНаТСД
		|				ПО ИтЗадачиНаТСД.ИдЗадачи = ИтСтрокиЗадачНаТСД.ИдЗадачи
		|		ГДЕ
		|			ИтЗадачиНаТСД.ДокументОснование = &ДокументОснование
		|			И ИтЗадачиНаТСД.ТипЗадачи = &ТипЗадачи
		|			И ИтСтрокиЗадачНаТСД.ДатаРозлива = &ДатаРозлива
		|			И ИтСтрокиЗадачНаТСД.Номенклатура = &Номенклатура
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ИтСтрокиЗадачНаТСД.ДатаРозлива,
		|			ИтСтрокиЗадачНаТСД.Номенклатура) КАК ВложенныйЗапрос
		|		ПО ТаблицаГруппировкиДанных.Номенклатура = ВложенныйЗапрос.Номенклатура
		|			И ТаблицаГруппировкиДанных.ДатаРозлива = ВложенныйЗапрос.ДатаРозлива
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(ТаблицаГруппировкиДанных.ДатаРозлива, ВложенныйЗапрос.ДатаРозлива),
		|	ЕСТЬNULL(ТаблицаГруппировкиДанных.Номенклатура, ВложенныйЗапрос.Номенклатура)";
		
	ИдНомеклатуры=новый УникальныйИдентификатор(УИД);	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТипЗадачи", Объект.ТипЗадачи);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Номенклатура",ИдНомеклатуры);
	Запрос.УстановитьПараметр("ИдСтроки",ИдСтроки);
	Запрос.УстановитьПараметр("ДатаРозлива",ДатаРозлива);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда
	ВсегоТовара=ВыборкаДетальныеЗаписи.КоличествоВсего;
    ОстатокДоступногоТовара=ВыборкаДетальныеЗаписи.КоличествоВсего-ВыборкаДетальныеЗаписи.КоличествоВДокументе-КоличествоФакт;	
иначе
	ВсегоТовара=0;
	ОстатокДоступногоТовара=-КоличествоФакт;
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры

#КонецОбласти






