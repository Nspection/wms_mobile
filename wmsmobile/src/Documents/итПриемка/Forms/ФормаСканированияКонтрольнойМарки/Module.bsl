&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("ПомарочныйУчет") тогда
		ПомарочныйУчет = Параметры.ПомарочныйУчет;
		Если не Параметры.Свойство("Объект") Тогда
			Отказ = Истина;
		КонецЕсли;
		Если не Параметры.Свойство("ИдентификаторУпаковки") Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Объект = Параметры.Объект;
		ИдентификаторУпаковки = Параметры.ИдентификаторУпаковки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбщийМодульКлиентскойЧасти.ПереопределенияТригераПолучениеШтрихКодаПриОткрытии(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	ОбщийМодульКлиентскойЧасти.ПереопределенияТригераПолучениеШтрихКодаПриЗакрытии(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбработчикШтрихКода" и ТригерПриемаСканераШтрихКода тогда
		Если Параметр = 404 и Источник = "ОшибкаЧтения" тогда
			ОбщийМодульКлиентскойЧасти.СообщитьЧерезФорму("Штрих код некорректен");
			Возврат
		КонецЕсли;
		Если (СтрДлина(Параметр) = 68 или СтрДлина(Параметр) = 150)
			и КонтрольнаяМарка = "" тогда
			КонтрольнаяМарка = Параметр;
			Если ПомарочныйУчет Тогда
				Если не ПроверкаМаркиНаНаличиеВДанныхПомарочногоУчета() тогда
					КонтрольнаяМарка = "";
					ОбщийМодульКлиентскойЧасти.СообщитьЧерезФорму("Марка не числится в данных помарочного учета");
					Возврат
				КонецЕсли;
			КонецЕсли;
			Элементы.СканируйтеКонтрольнуюМарку_Интервал.Заголовок = "Сканируйте интервал";
			Если СтрДлина(Параметр) = 150 Тогда
				Интервал = Сред(Параметр, 4, 3) + "_" + Сред(Параметр, 7, 8);
			КонецЕсли;
		ИначеЕсли Сред(Параметр, 4, 1) = "-" и Интервал = "" тогда
			КоличествоСимволовОтклонения = 33 - СтрДлина(Параметр);
			СтрокаКОтправке = Сред(Параметр, 5, 11 - КоличествоСимволовОтклонения);
			Серия = Лев(СтрокаКОтправке, 3);
			Номер = Прав(СтрокаКОтправке, СтрДлина(СтрокаКОтправке) - 3);
			Интервал = Серия + "_" + Номер;
			Элементы.СканируйтеКонтрольнуюМарку_Интервал.Заголовок = "Сканируйте марку";
			//ОповеститьОВыборе(СтрокаКОтправке);
		иначе
			/////// Исправление от 050419 ---------- Из за косяка заводов
			Если ПомарочныйУчет и Элементы.СканируйтеКонтрольнуюМарку_Интервал.Заголовок = "Сканируйте GTIN(Короб)" Тогда
				Отказ=ложь;
				СлужебныеФункцииИПроцедурыКлиентСервер.ПроверитьGTINНаЛеквидность(Параметр,Отказ);
				Если Отказ тогда
					Возврат
				КонецЕсли;
				Если ПроверкаКоробаНаНаличиеВДанныхПомарочногоУчета(Параметр) Тогда
					ОповеститьОВыборе(новый Структура("КонтрольнаяМарка,Интервал", КонтрольнаяМарка, Интервал));
					Возврат
				КонецЕсли; 
			иначе
				Сообщить("не верный формат штрих кода");
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(КонтрольнаяМарка) и ЗначениеЗаполнено(Интервал)
			и Элементы.СканируйтеКонтрольнуюМарку_Интервал.Заголовок <> "Сканируйте GTIN(Короб)" тогда
			Если ПомарочныйУчет Тогда
				Элементы.СканируйтеКонтрольнуюМарку_Интервал.Заголовок = "Сканируйте GTIN(Короб)";
				Возврат;
			иначе
				ОповеститьОВыборе(новый Структура("КонтрольнаяМарка,Интервал", КонтрольнаяМарка, Интервал));
				Возврат
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПроверкаМаркиНаНаличиеВДанныхПомарочногоУчета()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	итДанныеПомарочногоУчета.Марка КАК Марка,
	|	ВЫБОР
	|		КОГДА итДанныеПомарочногоУчета.SSCC = &SSCC
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НеТотSSCC,
	|	итДанныеПомарочногоУчета.SSCC КАК SSCC
	|ИЗ
	|	РегистрСведений.итДанныеПомарочногоУчета КАК итДанныеПомарочногоУчета
	|ГДЕ
	|	итДанныеПомарочногоУчета.Марка = &Марка
	|	И итДанныеПомарочногоУчета.Ключ = &Ключ";
	
	Запрос.УстановитьПараметр("Марка", КонтрольнаяМарка);
	Запрос.УстановитьПараметр("Ключ", Объект);
	Запрос.УстановитьПараметр("SSCC", ИдентификаторУпаковки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() тогда
		Возврат Ложь;
	иначе
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() тогда
			Если Выборка.НеТотSSCC тогда
				Сообщить("Марка в данных есть, но принадлежит паллету № " + Выборка.SSCC);
				Возврат Ложь
			иначе
				Возврат Истина;
			КонецЕсли;
		иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
КонецФункции

Функция ПроверкаКоробаНаНаличиеВДанныхПомарочногоУчета(GTIN)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	итДанныеПомарочногоУчета.SSCC,
	|	ВЫБОР
	|		КОГДА итДанныеПомарочногоУчета.SSCC = &SSCC
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НеТотSSCC
	|ИЗ
	|	РегистрСведений.итДанныеПомарочногоУчета КАК итДанныеПомарочногоУчета
	|ГДЕ
	|	итДанныеПомарочногоУчета.Ключ = &Ключ
	|	И итДанныеПомарочногоУчета.GTIN = &GTIN
	|СГРУППИРОВАТЬ ПО
	|	итДанныеПомарочногоУчета.SSCC,
	|	ВЫБОР
	|		КОГДА итДанныеПомарочногоУчета.SSCC = &SSCC
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ";
	
	Запрос.УстановитьПараметр("GTIN", GTIN);
	Запрос.УстановитьПараметр("SSCC", ИдентификаторУпаковки);
	Запрос.УстановитьПараметр("Ключ", Объект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Ошибка = Ложь;
	НайденGTIN = Ложь;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НайденGTIN = Истина;
		Если ВыборкаДетальныеЗаписи.НеТотSSCC Тогда
			Ошибка = Истина;
			Сообщить("Короб в данных есть, но принадлежит паллету № "
			+ ВыборкаДетальныеЗаписи.SSCC);
		КонецЕсли;
	КонецЦикла;
	
	Если НайденGTIN и не Ошибка Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
КонецФункции
