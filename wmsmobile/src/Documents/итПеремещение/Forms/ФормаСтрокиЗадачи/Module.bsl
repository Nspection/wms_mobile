#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если не (Параметры.Свойство("ИдЗадачи") и Параметры.Свойство("ИдСтроки")) тогда
		Отказ=Истина;
		Возврат
	КонецЕсли;
	Если не Параметры.Свойство("ПомарочныйУчет") Тогда 
		Отказ=Истина;
		Возврат
	КонецЕсли;	
	ИдЗадачи=Параметры.ИдЗадачи;
	ИдСтроки=Параметры.ИдСтроки;
	ПомарочныйУчет=Параметры.ПомарочныйУчет;
	ЗаполнитьДанныеСтрокиЗадачи();
	ВидимостьДоступностьЭлементовСервер();
КонецПроцедуры
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбщийМодульКлиентскойЧасти.ПереопределенияТригераПолучениеШтрихКодаПриОткрытии(ЭтаФорма);
КонецПроцедуры
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	ОбщийМодульКлиентскойЧасти.ПереопределенияТригераПолучениеШтрихКодаПриЗакрытии(ЭтаФорма);
КонецПроцедуры
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия="ОбработчикШтрихКода"  и ТригерПриемаСканераШтрихКода тогда
		Если Параметр=404 и Источник="ОшибкаЧтения" тогда
			ОбщийМодульКлиентскойЧасти.СообщитьЧерезФорму("Штрих код некорректен");
			Возврат
		КонецЕсли;	
		ОбработчикПолученияДанныхШтрихКода(Параметр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы="Документ.итПеремещение.Форма.ФормаАгрегацииМарки" тогда
		ДобавитьМаркуНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	Если ПомарочныйУчет Тогда 
		Оповестить("ОбновлениеДанныхПеремещенияПомарочногоУчета",,ЭтаФорма);	
	КонецЕсли;	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКоманд
&НаКлиенте
Процедура Готово(Команда)
	Если ПомарочныйУчет Тогда
		ОповеститьОВыборе(ИдСтроки);
	иначе
		ОповеститьОВыборе(КоличествоФакт);
	КонецЕсли;
КонецПроцедуры
&НаСервере
Процедура ОчиститьНаСервере()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итДанныеПомарочногоУчета.Марка КАК Марка
	|ИЗ
	|	РегистрСведений.итДанныеПомарочногоУчета КАК итДанныеПомарочногоУчета
	|ГДЕ
	|	итДанныеПомарочногоУчета.Ключ = &Ключ
	|	И итДанныеПомарочногоУчета.Номенклатура = &Номенклатура
	|	И итДанныеПомарочногоУчета.СерияНоменклатуры = &СерияНоменклатуры
	|	И итДанныеПомарочногоУчета.ПризнакОбработки = ИСТИНА";
	
	Запрос.УстановитьПараметр("Ключ", ИдЗадачи);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("СерияНоменклатуры", СерияНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей=РегистрыСведений.итДанныеПомарочногоУчета.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Марка.Установить(ВыборкаДетальныеЗаписи.Марка);
		НаборЗаписей.Отбор.Ключ.Установить(ИдЗадачи);
		НаборЗаписей.Прочитать();
		Для Каждого  ЭлементЗаписи из НаборЗаписей цикл
			ЭлементЗаписи.ПризнакОбработки=Ложь;
			КоличествоФакт=КоличествоФакт-1;
		КонецЦикла;
		НаборЗаписей.Записать();
		
	КонецЦикла;
	ВосстановитьДанныеРазагрегированныхМарок();
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	НаборЗаписей=РегистрыСведений.ИтСтрокиЗадачНаТСД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдЗадачи.Установить(ИдЗадачи);
	НаборЗаписей.Отбор.ИдСтроки.Установить(ИдСтроки);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество()=0 тогда
		Сообщить("Ошибка данных");
		Возврат
	КонецЕсли;
	для Каждого стр из НаборЗаписей цикл
		ДанныеДокументаТСД= стр.ДанныеДокументаТСД.Получить();
		Если ТипЗнч(ДанныеДокументаТСД) <>тип("Структура") Тогда
			ДанныеДокументаТСД = новый Структура;
		КонецЕсли;
		ДанныеДокументаТСД.Вставить("КоличествоФакт",КоличествоФакт);
		стр.ДанныеДокументаТСД = новый ХранилищеЗначения(ДанныеДокументаТСД);
	КонецЦикла;
	НаборЗаписей.Записать();
    	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	ОчиститьНаСервере();
	Если ПомарочныйУчет Тогда 
		Оповестить("ОбновлениеДанныхПеремещенияПомарочногоУчета",,ЭтаФорма);	
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Процедура ЗаполнитьДанныеСтрокиЗадачи(Отказ=ложь)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИтСтрокиЗадачНаТСД.Номенклатура КАК Номенклатура,
	|	ИтСтрокиЗадачНаТСД.НоменклатураПредставление КАК НоменклатураПредставление,
	|	ИтСтрокиЗадачНаТСД.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ИтСтрокиЗадачНаТСД.СерияНоменклатурыПредставление КАК СерияНоменклатурыПредставление,
	|	ИтСтрокиЗадачНаТСД.Количество КАК Количество,
	|	ИтСтрокиЗадачНаТСД.ДанныеДокументаТСД КАК ДанныеДокументаТСД,
	|	ИтСтрокиЗадачНаТСД.ДополнительныеДанные КАК ДополнительныеДанные
	|ИЗ
	|	РегистрСведений.ИтСтрокиЗадачНаТСД КАК ИтСтрокиЗадачНаТСД
	|ГДЕ
	|	ИтСтрокиЗадачНаТСД.ИдЗадачи = &ИдЗадачи
	|	И ИтСтрокиЗадачНаТСД.ИдСтроки = &ИдСтроки";
	
	Запрос.УстановитьПараметр("ИдЗадачи", ИдЗадачи);
	Запрос.УстановитьПараметр("ИдСтроки", ИдСтроки);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() тогда
		Отказ=Истина;
		Возврат;
	КонецЕсли;	
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ЭтаФорма,ВыборкаДетальныеЗаписи);
		ДанныеДокументаТСД=ВыборкаДетальныеЗаписи.ДанныеДокументаТСД.Получить();
		Если ТипЗнч(ДанныеДокументаТСД)=тип("Структура") тогда
			ЗаполнитьЗначенияСвойств(ЭтаФорма,ДанныеДокументаТСД);
		КонецЕсли;
		Если ПомарочныйУчет Тогда 
			КоличествоФакт=ПолучитьКоличествоОтсканированныхМарокТекущейПродукции();
		КонецЕсли;
	КонецЦикла;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
КонецПроцедуры
&НаСервере
Процедура ВидимостьДоступностьЭлементовСервер()
	Элементы.КоличествоФакт.ТолькоПросмотр=ПомарочныйУчет;
	Элементы.ДекорацияИнформационнаяНадпись.Видимость=ПомарочныйУчет;
	Элементы.Очистить.Видимость=ПомарочныйУчет;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПолученияДанныхШтрихКода(Параметр)
	Если ПомарочныйУчет Тогда 
		ШтрихКодОбработан=Ложь;
		Если СтрДлина(Параметр)=26 тогда
			ОбработчикШтрхкода26Символов(Параметр,ШтрихКодОбработан);
		КонецЕсли;
		Если СтрДлина(Параметр)=20 или СтрДлина(Параметр)=18 тогда
			ОбработчикSSCC(Параметр,ШтрихКодОбработан);
		КонецЕсли;
		Если не ШтрихКодОбработан Тогда
			ОткрытьФорму("Документ.итПеремещение.Форма.ФормаАгрегацииМарки",новый Структура("ДанныеМарки",новый Структура("Марка",Параметр)),ЭтаФорма);
			ТригерПриемаСканераШтрихКода=Ложь;
		КонецЕсли;
		Оповестить("ОбновлениеДанныхПеремещенияПомарочногоУчета",,ЭтаФорма);	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработчикШтрхкода26Символов(ШтрихКод,ШтрихКодОбработан)
	ТипЛогистическойЕденицы=Сред(ШтрихКод,13,1);
	Попытка
		ТипЛогистическойЕденицы=Число(ТипЛогистическойЕденицы);
	Исключение
		Сообщить("Не возможно определить тип логистической еденицы");
	КонецПопытки;
	
	Если ТипЛогистическойЕденицы=2 или ТипЛогистическойЕденицы=4  тогда	
		Сообщить("Вы отсканировани паллету, а необходимо короб или бутылку");
		ШтрихКодОбработан=Истина;
	КонецЕсли;
	Если ТипЛогистическойЕденицы=1 или ТипЛогистическойЕденицы=3 тогда
		Ошибка=Ложь;
		ОбработатьМаркиКороба(ШтрихКод,Ошибка);
		ШтрихКодОбработан=Истина;		
	КонецЕсли;	
КонецПроцедуры
&НаСервере
Процедура ОбработчикSSCC(ШтрихКод,ШтрихКодОбработан)
	SSCCБезКонтрольнойЦифры=Лев(ШтрихКод,СтрДлина(ШтрихКод)-1);
	КонтрольнаяЦифраВSSCC=Прав(ШтрихКод,1);
	ДанныеРасчетаКонтрольнойЦифры=ПолучитьКонтрольнуюЦифруШтрихКода(SSCCБезКонтрольнойЦифры);
	
	Если  СокрЛП(НРег(КонтрольнаяЦифраВSSCC))=СокрЛП(НРег(ДанныеРасчетаКонтрольнойЦифры)) тогда
		Сообщить("Вы отсканировани паллету, а необходимо короб или бутылку");
		ШтрихКодОбработан=Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере	
Функция ПолучитьКонтрольнуюЦифруШтрихКода(ШтрихКод)Экспорт
	ДлинаШтрихКода=СтрДлина(ШтрихКод);
	СуммаНеЧетных=ПолучитьСуммуЦифрНаНечетныхМестах(ДлинаШтрихКода,ШтрихКод);
	СуммаЧетных=ПосчитатьСуммуЦифрНаЧетныхМестах(ДлинаШтрихКода,ШтрихКод);
	СтрокаИтого=Строка(СуммаНеЧетных+СуммаЧетных);
	ЕденицаСуммы=Прав(СтрокаИтого,1);
	Если Число(ЕденицаСуммы) = 0 тогда
		Возврат "0" 
	иначе
		Возврат Строка(10-Число(ЕденицаСуммы));
	КонецЕсли;	
КонецФункции
&НаСервере
Функция ПосчитатьСуммуЦифрНаЧетныхМестах(ДлинаШтрихКода,ШтрихКод)
	Если ДлинаШтрихКода<2 тогда
		Возврат 0
	КонецЕсли;
	Сумма=0;
	ТочкаОтсчета=ДлинаШтрихКода;
	Если  Окр(ДлинаШтрихКода/2,0,РежимОкругления.Окр15как20) <> ДлинаШтрихКода/2 тогда
		ЧетноеКоличествоСимволов=Ложь;
	иначе
		ЧетноеКоличествоСимволов=Истина;
	КонецЕсли;	
	
	для n=1 по ДлинаШтрихКода цикл
		Если ТочкаОтсчета-n=0 и не ЧетноеКоличествоСимволов Тогда 
			Прервать;
		КонецЕсли;	
		Сумма=Сумма+Число(Сред(ШтрихКод,ТочкаОтсчета-n,1));
		Если (n+1)>ДлинаШтрихКода тогда
			Прервать;
		КонецЕсли;		
		n=n+1;
	КонецЦикла;
	
	Возврат Сумма;
	
КонецФункции
&НаСервере	
Функция ПолучитьСуммуЦифрНаНечетныхМестах(ДлинаШтрихКода,ШтрихКод)
	Сумма=0;
	ТочкаОтсчета=ДлинаШтрихКода+1;
	Если  Окр(ДлинаШтрихКода/2,0,РежимОкругления.Окр15как20) <> ДлинаШтрихКода/2 тогда
		ЧетноеКоличествоСимволов=Ложь;
	иначе
		ЧетноеКоличествоСимволов=Истина;
	КонецЕсли;	
	
	для n=1 по ДлинаШтрихКода цикл
		Если ТочкаОтсчета-n=0 и  ЧетноеКоличествоСимволов Тогда 
			Прервать;
		КонецЕсли;
		Сумма=Сумма+Число(Сред(ШтрихКод,ТочкаОтсчета-n,1));
		Если (n+1)>ДлинаШтрихКода тогда
			Прервать;
		КонецЕсли;	
		n=n+1;
	КонецЦикла;
	Сумма=Сумма*3;
	Возврат Сумма;
КонецФункции
&НаСервере	
Процедура ОбработатьМаркиКороба(ШтрихКод,Ошибка)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итДанныеПомарочногоУчета.Марка КАК Марка,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА итДанныеПомарочногоУчета.Номенклатура = &ПустойГуид
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОшибкаНоменклатурыКороба,
	|	итДанныеПомарочногоУчета.Ключ КАК Ключ,
	|	ВЫБОР
	|		КОГДА итДанныеПомарочногоУчета.Номенклатура <> &Номенклатура
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НоменклатураНеСоответствуетОтбору,
	|	ВЫБОР
	|		КОГДА итДанныеПомарочногоУчета.СерияНоменклатуры <> &СерияНоменклатуры
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СерияНеСоответствуетОтбору,
	|	МАКСИМУМ(итДанныеПомарочногоУчета.ПризнакОбработки) КАК ПризнакОбработки
	|ПОМЕСТИТЬ МаркиШтрихКода
	|ИЗ
	|	РегистрСведений.итДанныеПомарочногоУчета КАК итДанныеПомарочногоУчета
	|ГДЕ
	|	итДанныеПомарочногоУчета.Ключ = &Ключ
	|	И итДанныеПомарочногоУчета.GTIN = &GTIN
	|
	|СГРУППИРОВАТЬ ПО
	|	итДанныеПомарочногоУчета.Марка,
	|	итДанныеПомарочногоУчета.Ключ,
	|	ВЫБОР
	|		КОГДА итДанныеПомарочногоУчета.Номенклатура <> &Номенклатура
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА итДанныеПомарочногоУчета.СерияНоменклатуры <> &СерияНоменклатуры
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаркиШтрихКода.Ключ КАК Ключ,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ МаркиШтрихКода.Марка) КАК Марка,
	|	МАКСИМУМ(МаркиШтрихКода.ОшибкаНоменклатурыКороба) КАК ОшибкаНоменклатурыКороба,
	|	МАКСИМУМ(МаркиШтрихКода.НоменклатураНеСоответствуетОтбору) КАК НоменклатураНеСоответствуетОтбору,
	|	МАКСИМУМ(МаркиШтрихКода.СерияНеСоответствуетОтбору) КАК СерияНеСоответствуетОтбору,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НЕ МаркиШтрихКода.ПризнакОбработки
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПризнакНеПолностьюОбработанныхМарок
	|ИЗ
	|	МаркиШтрихКода КАК МаркиШтрихКода
	|
	|СГРУППИРОВАТЬ ПО
	|	МаркиШтрихКода.Ключ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаркиШтрихКода.Марка КАК Марка,
	|	МаркиШтрихКода.Ключ КАК Ключ
	|ИЗ
	|	МаркиШтрихКода КАК МаркиШтрихКода
	|ГДЕ
	|	МаркиШтрихКода.ПризнакОбработки = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	МаркиШтрихКода.Марка,
	|	МаркиШтрихКода.Ключ";
	
	Запрос.УстановитьПараметр("GTIN", ШтрихКод);
	Запрос.УстановитьПараметр("Ключ", ИдЗадачи);
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура );
	Запрос.УстановитьПараметр("ПустойГуид", новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Запрос.УстановитьПараметр("СерияНоменклатуры", СерияНоменклатуры);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаНаОшибку=МассивРезультатов[1].Выбрать();
	
	Пока ВыборкаНаОшибку.Следующий() Цикл
		Если ВыборкаНаОшибку.ОшибкаНоменклатурыКороба Тогда 
			Сообщить("В коробе числится номенклатура не из текущего перемещения, попробуйте 
			|сканировать кажду марку или возьмите другой короб");
			Ошибка=Истина;
		ИначеЕсли  ВыборкаНаОшибку.НоменклатураНеСоответствуетОтбору Тогда 
			Сообщить("В коробе числится не текущая номенклатура или короб не однороден, попробуйте 
			|сканировать кажду марку или возьмите другой короб");
			Ошибка=Истина;
		ИначеЕсли  ВыборкаНаОшибку.СерияНеСоответствуетОтбору Тогда 
			Сообщить("В коробе числится верная номенклатура,но
			|серия не соответствует отбору или короб не однороден, попробуйте 
			|сканировать кажду марку или возьмите другой короб");
			Ошибка=Истина; 
		КонецЕсли;
		Если КоличествоФакт+ВыборкаНаОшибку.Марка > Количество Тогда 
			Сообщить("вместе с текущем коробом вы набираете марок больше чем по плану("+Строка(Количество)+"-"+Строка(КоличествоФакт+ВыборкаНаОшибку.Марка)+") , короб не засчитан");
			Ошибка=Истина;
		КонецЕсли;
		Если не ВыборкаНаОшибку.ПризнакНеПолностьюОбработанныхМарок тогда
			Сообщить("Текущие марки уже числятся в обработанных");
			Ошибка=Истина;
		КонецЕсли;
	КонецЦикла;
	Если МассивРезультатов[2].Пустой() Тогда 
		Ошибка=Истина;
		Сообщить("Нет данных марок");
	КонецЕсли;	
	
	Если Ошибка Тогда 
		Возврат
	КонецЕсли;
	ВыборкаДетальныеЗаписи = МассивРезультатов[2].Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей=РегистрыСведений.итДанныеПомарочногоУчета.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Марка.Установить(ВыборкаДетальныеЗаписи.Марка);
		НаборЗаписей.Отбор.Ключ.Установить(ВыборкаДетальныеЗаписи.Ключ);
		НаборЗаписей.Прочитать();
		Для Каждого  ЭлементЗаписи из НаборЗаписей цикл
			ЭлементЗаписи.ПризнакОбработки=Истина;
			КоличествоФакт=КоличествоФакт+1;
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры
&НаСервере		
Функция ПолучитьКоличествоОтсканированныхМарокТекущейПродукции()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ итДанныеПомарочногоУчета.Марка) КАК Марка,
	|	итДанныеПомарочногоУчета.Ключ КАК Ключ
	|ИЗ
	|	РегистрСведений.итДанныеПомарочногоУчета КАК итДанныеПомарочногоУчета
	|ГДЕ
	|	итДанныеПомарочногоУчета.Ключ = &Ключ
	|	И итДанныеПомарочногоУчета.Номенклатура = &Номенклатура
	|	И итДанныеПомарочногоУчета.СерияНоменклатуры = &СерияНоменклатуры
	|	И итДанныеПомарочногоУчета.ПризнакОбработки = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	итДанныеПомарочногоУчета.Ключ";
	
	Запрос.УстановитьПараметр("Ключ", ИдЗадачи);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("СерияНоменклатуры", СерияНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Возврат   ВыборкаДетальныеЗаписи.Марка;
	КонецЕсли;
	Возврат 0;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции

&НаСервере	
Процедура ДобавитьМаркуНаСервере(ДанныеМарки)
	Если СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(ДанныеМарки,"Марка") Тогда 
		Возврат
	КонецЕсли;
	Если СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(ДанныеМарки,"GTINАгрегации") Тогда 
		Возврат
	КонецЕсли;
	
	НаборЗаписей=РегистрыСведений.итДанныеПомарочногоУчета.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Ключ.Установить(ИдЗадачи);
	НаборЗаписей.Отбор.Марка.Установить(ДанныеМарки.Марка);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество()=0 Тогда 
		Сообщить("Марка не числится в текущем перемещнии");
		Возврат
	КонецЕсли;
	для Каждого стр из НаборЗаписей цикл
		Если не стр.ПризнакОбработки Тогда 
			стр.ПризнакОбработки=Истина;
			КоличествоФакт=КоличествоФакт+1;
			ЗаписатьИсториюИзмененияАгрегацииМарки(ДанныеМарки.Марка);
		иначе
			Сообщить("Марка уже в зачислена");
		КонецЕсли;
		стр.GTIN=ДанныеМарки.GTINАгрегации;
	КонецЦикла;
	НаборЗаписей.Записать();
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИсториюИзмененияАгрегацииМарки(Марка)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	GTINПоУмолчанию="";
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итДанныеПомарочногоУчета.GTIN КАК GTIN
	|ИЗ
	|	РегистрСведений.итДанныеПомарочногоУчета КАК итДанныеПомарочногоУчета
	|ГДЕ
	|	итДанныеПомарочногоУчета.Марка = &Марка
	|	И итДанныеПомарочногоУчета.Ключ = &Ключ";
	
	Запрос.УстановитьПараметр("Ключ", ИдЗадачи);
	Запрос.УстановитьПараметр("Марка", Марка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда 
		GTINПоУмолчанию=ВыборкаДетальныеЗаписи.GTIN;	
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
	НаборЗаписей=РегистрыСведений.ИтСтрокиЗадачНаТСД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдЗадачи.Установить(ИдЗадачи);
	НаборЗаписей.Отбор.ИдСтроки.Установить(ИдСтроки);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество()=0 тогда
		Сообщить("Ошибка данных");
		Возврат
	КонецЕсли;
	для Каждого стр из НаборЗаписей цикл
		ДанныеДокументаТСД= стр.ДанныеДокументаТСД.Получить();
		Если ТипЗнч(ДанныеДокументаТСД)<>тип("Структура") Тогда
			ДанныеДокументаТСД = новый Структура;
		КонецЕсли;
		Если  ДанныеДокументаТСД.Свойство("ТаблицаПереагрегированныйМарок") тогда
			ТаблицаПереагрегированныйМарок=ДанныеДокументаТСД.ТаблицаПереагрегированныйМарок;
		иначе
			ТаблицаПереагрегированныйМарок =новый ТаблицаЗначений;
			ТаблицаПереагрегированныйМарок.Колонки.Добавить("Марка");
			ТаблицаПереагрегированныйМарок.Колонки.Добавить("GTINПоУмолчанию");
		КонецЕсли;	
		НоваяСтрока=ТаблицаПереагрегированныйМарок.Добавить();
		НоваяСтрока.Марка=Марка;
		НоваяСтрока.GTINПоУмолчанию=GTINПоУмолчанию;
		ДанныеДокументаТСД.Вставить("ТаблицаПереагрегированныйМарок",ТаблицаПереагрегированныйМарок);
		стр.ДанныеДокументаТСД = новый ХранилищеЗначения(ДанныеДокументаТСД);
	КонецЦикла;
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьДанныеРазагрегированныхМарок()
	
	НаборЗаписей=РегистрыСведений.ИтСтрокиЗадачНаТСД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдЗадачи.Установить(ИдЗадачи);
	НаборЗаписей.Отбор.ИдСтроки.Установить(ИдСтроки);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество()=0 тогда
		Сообщить("Ошибка данных");
		Возврат
	КонецЕсли;
	для Каждого стр из НаборЗаписей цикл
		
		ДанныеДокументаТСД= стр.ДанныеДокументаТСД.Получить();
		
		Если ТипЗнч(ДанныеДокументаТСД)<>тип("Структура") Тогда
			ДанныеДокументаТСД = новый Структура;
		КонецЕсли;
		
		Если  ДанныеДокументаТСД.Свойство("ТаблицаПереагрегированныйМарок") тогда
			ТаблицаПереагрегированныйМарок=ДанныеДокументаТСД.ТаблицаПереагрегированныйМарок;
			
			
			для Каждого СтрокаДанныхИсторииАгрегации из ТаблицаПереагрегированныйМарок цикл
				НаборЗаписей=РегистрыСведений.итДанныеПомарочногоУчета.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Ключ.Установить(ИдЗадачи);
				НаборЗаписей.Отбор.Марка.Установить(СтрокаДанныхИсторииАгрегации.Марка);
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Количество()=0 Тогда 
					Сообщить("Потеря данных-откажитесь от задачи и возьмите заного");
					Возврат
				КонецЕсли;
				для Каждого СтрокаДанныхМарки из НаборЗаписей цикл
				СтрокаДанныхМарки.GTIN=СтрокаДанныхИсторииАгрегации.GTINПоУмолчанию;
				КонецЦикла;
				НаборЗаписей.Записать();
				
			КонецЦикла;
			ДанныеДокументаТСД.Вставить("ТаблицаПереагрегированныйМарок",ТаблицаПереагрегированныйМарок);
			стр.ДанныеДокументаТСД = новый ХранилищеЗначения(ДанныеДокументаТСД);
			
		КонецЕсли;	
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры
#КонецОбласти




