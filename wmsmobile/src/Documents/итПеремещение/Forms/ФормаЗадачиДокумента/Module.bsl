#Область ОбработчикиСобытий
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если не Параметры.Свойство("ИдЗадачи") тогда
		Отказ=Истина;
		Возврат
	КонецЕсли;
	ИдЗадачи=Параметры.ИдЗадачи;
	ЗаполнитьДанныеЗадачи(Отказ);
	ВидимостьДоступностьЭлементовСервер();
	УстановитьНачальноеСостояниеЗадачи();
	СписокВыбораПричнОтмены();
КонецПроцедуры
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбщийМодульКлиентскойЧасти.ПереопределенияТригераПолучениеШтрихКодаПриОткрытии(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия="ОбработчикШтрихКода"  и ТригерПриемаСканераШтрихКода тогда
		Если Параметр=404 и Источник="ОшибкаЧтения" тогда
			ОбщийМодульКлиентскойЧасти.СообщитьЧерезФорму("Штрих код некорректен");
			Возврат
		КонецЕсли;	
		ОбработчикПолученияДанныхШтрихКода(Параметр);
	КонецЕсли;
	Если ИмяСобытия="ОбновлениеДанныхПеремещенияПомарочногоУчета" тогда
		ОбновитьДанныеСтрокЗадачи();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	ОбщийМодульКлиентскойЧасти.ПереопределенияТригераПолучениеШтрихКодаПриЗакрытии(ЭтаФорма);
КонецПроцедуры
&НаСервере
Процедура СтрокиЗадачиКоличествоФактПриИзмененииНаСервере(ИдСтроки,КоличествоФакт)
	НаборЗаписей=РегистрыСведений.ИтСтрокиЗадачНаТСД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдЗадачи.Установить(ИдЗадачи);
	НаборЗаписей.Отбор.ИдСтроки.Установить(ИдСтроки);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество()=0 тогда
		Сообщить("Ошибка данных");
		Возврат
	КонецЕсли;
	для Каждого стр из НаборЗаписей цикл
		ДанныеДокументаТСД= стр.ДанныеДокументаТСД.Получить();
		Если ТипЗнч(ДанныеДокументаТСД) <> Тип("Структура") Тогда
			ДанныеДокументаТСД = новый Структура;
		КонецЕсли;
		ДанныеДокументаТСД.Вставить("КоличествоФакт",КоличествоФакт);
		стр.ДанныеДокументаТСД = новый ХранилищеЗначения(ДанныеДокументаТСД);
	КонецЦикла;
	НаборЗаписей.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы="Документ.итПеремещение.Форма.СчитываниеВнешнегоSSCC" тогда
		ЗафиксироватьИдентификаторПолучательЗадачи(ВыбранноеЗначение);
		ИдентификаторУпаковкиПолучатель=ВыбранноеЗначение;
		//ЗафиксироватьИдентификаторПолучательЗадачи(ИдентификаторУпаковкиПолучатель);
	КонецЕсли;
	Если ИсточникВыбора.ИмяФормы="Документ.итПеремещение.Форма.ФормаСтрокиЗадачи" тогда
		Если  ПомарочныйУчет Тогда 
			МассивСтрок=СтрокиЗадачи.НайтиСтроки(новый Структура("ИдСтроки",ВыбранноеЗначение));
			Если МассивСтрок.Количество()=0  или МассивСтрок.Количество()>1 Тогда 
				Сообщить("Ошибка подтверждения данных");
				Возврат
			КонецЕсли;
			ИдентификаторЭлементаКоллеции=МассивСтрок[0].ПолучитьИдентификатор();
			ТекущийЭлемент=Элементы.СтрокиЗадачи2;
			Элементы.СтрокиЗадачи2.ТекущаяСтрока=ИдентификаторЭлементаКоллеции;
			СтрокиЗадачиКоличествоФактПриИзменении();
			иначе
			Элементы.СтрокиЗадачи2.ТекущиеДанные.КоличествоФакт = ВыбранноеЗначение;
			СтрокиЗадачиКоличествоФактПриИзменении();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура СтрокиЗадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	
	Если Элементы.надписьЭтапа2.Заголовок="Подтвердите количество товара" и ТипПеремещения=2 тогда
		ОткрытьФорму("Документ.итПеремещение.Форма.ФормаСтрокиЗадачи",новый Структура("ИдЗадачи,ИдСтроки,ПомарочныйУчет",ИдЗадачи,Элемент.ТекущиеДанные.ИдСтроки,ПомарочныйУчет),ЭтаФорма);
		ТригерПриемаСканераШтрихКода=Ложь;
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ИдентификаторУпаковкиПолучатель1Открытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ИдентификаторУпаковкиОткрытиеПечать();	
КонецПроцедуры
&НаКлиенте
Процедура ИдентификаторУпаковкиПолучатель2Открытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ИдентификаторУпаковкиОткрытиеПечать();	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд
&НаКлиенте
Процедура Назад(Команда)
	ЭтаФорма.Закрыть();
КонецПроцедуры
&НаКлиенте
Процедура ОтказатьсяОтЗадачи(Команда)
	Оповещение=новый ОписаниеОповещения("ОтказатьсяОтЗадачиОповещение",ЭтаФорма);
	ПоказатьВопрос(Оповещение,"Вы точно хотите отказаться от Задачи",РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры
&НаКлиенте
Процедура ОтказатьсяОтЗадачиОповещение(Результат,Параметры) Экспорт 
	Если Результат=КодВозвратаДиалога.Нет тогда
		Возврат
	КонецЕсли;	
	Если ОтказатьсяОтЗадачиНаСервере() тогда
		ОбщийМодульКлиентскойЧасти.ОповещениеДинамическихСписковОткрытыхФорм();
		ЭтаФорма.Закрыть();
	иначе
		ОбщийМодульКлиентскойЧасти.СообщитьЧерезФорму("не удачная попытка отказа от задачи, попробуйте еще раз, или подойтиде к оператору");
	КонецЕсли;	
КонецПроцедуры
&НаСервере
Функция ОтказатьсяОтЗадачиНаСервере()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	СтруктураОтказаЗадачи= ПолучитьДанныеДляИнициализации();
	Возврат ОбработчикДанныхОбщиеФункцииИПроцедуры.ИнициализацияЗадачиНаСервере(СтруктураОтказаЗадачи,"ЗадачаОтказ",Перечисления.итWMSСостоянияЗадачТСД.КВыполнению);
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции
&НаСервере
Процедура ПерейтиКСледующемуПунктуНаСервере()
	Элементы.надписьЭтапа2.Заголовок="Сканируйте ячейку получатель";
	Элементы.СтрокиЗадачиПерейтиКСледующемуПункту.Видимость=Ложь;
КонецПроцедуры
&НаКлиенте
Процедура ПерейтиКСледующемуПунктуОпопвещение(Результат,Параметры)Экспорт
	Если Результат=КодВозвратаДиалога.Нет тогда
		Возврат
	КонецЕсли;	
	ПерейтиКСледующемуПунктуНаСервере();
	
КонецПроцедуры
&НаКлиенте
Процедура ПерейтиКСледующемуПункту(Команда)
	ПроцессПолностьюЗавершен=Истина;
	ПроверитьНаЗавершениеПроцессаРедактированияСтрок(ПроцессПолностьюЗавершен);
	Если ПроцессПолностьюЗавершен тогда
		ПерейтиКСледующемуПунктуОпопвещение(КодВозвратаДиалога.Да,"");
		Возврат
	КонецЕсли;
	Оповещние=новый ОписаниеОповещения("ПерейтиКСледующемуПунктуОпопвещение",ЭтаФорма);
	ПоказатьВопрос(Оповещние,"но во всех строках , количество план = количество факт, Продолжить?",РежимДиалогаВопрос.ДаНет);	
КонецПроцедуры
&НаКлиенте
Процедура ПрисвоитьSSCCПолучатель(Команда)
	ОткрытьФорму("Документ.итПеремещение.Форма.СчитываниеВнешнегоSSCC",новый Структура("СсылкаНаОбъект",Объект.Ссылка),ЭтаФорма);
	ТригерПриемаСканераШтрихКода=Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗапроситьНовыйSSCCНаСервере()
	СтруктураИнициализации=новый Структура;
	//СтруктураИнициализации.Вставить("ТипОбработкиДанных","НовыйSSCC");
	СтруктураИнициализации.Вставить("ТипОбработкиДанных","РегистрацияНовогоSSCC");
	СтруктураИнициализации.Вставить("КлючИнициализацииДанных",ИдЗадачи);
	СлужебныеФункцииИПроцедурыКлиентСервер.СформироватьСтруктуруДанныхОПользователе(СтруктураИнициализации);
	СтруктураИнициализации=ОбработчикиЗапросаСервера.ЗапроситьДанные(СтруктураИнициализации,"Move");
	Если СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(СтруктураИнициализации,"НовыйИдентификатор") тогда
		Возврат ;
	КонецЕсли;
	ЗафиксироватьИдентификаторПолучательЗадачи(СтруктураИнициализации.НовыйИдентификатор);
	ИдентификаторУпаковкиПолучатель= СтруктураИнициализации.НовыйИдентификатор;
	
	//МодульРаспределенияДанных.ОбработчикВходящихДанных(СтруктураИнициализации);
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьНовыйSSCC(Команда)
	//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"+#ПеремещениеФормаЗадачи  ЗапроситьНовыйSSCC");
	ЗапроситьНовыйSSCCНаСервере();
	//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"-#ПеремещениеФормаЗадачи  ЗапроситьНовыйSSCC");
КонецПроцедуры
&НаКлиенте
Процедура ЗадачаНеМожетБытьВыполнена(Команда)
Если ПричинаОтменыЗадачи.Пустая() Тогда 
		Сообщить("Заполните причину отмены задачи");
		Возврат
КонецЕсли;	
Если ЗавершитьЗадачуОтменой() Тогда 
		ЭтаФорма.Закрыть();
КонецЕсли;	
КонецПроцедуры
&НаСервере
Функция  ЗавершитьЗадачуОтменой()
	СтруктураДанных= ПолучитьДанныеДляИнициализации();
	СтруктураДанных.Вставить("ФиксацияЗадачи",Истина);
	СтруктураИнициализации=СлужебныеФункцииИПроцедурыКлиентСервер.СформироватьСтруктуруИнициализацииДанных(СтруктураДанных,"Задача",Перечисления.итWMSСостоянияЗадачТСД.Отменена);
	//СтруктураИнициализации.Вставить("ТипОбработкиДанных","ВнесениеИзмененийВДокумент");
	СтруктураИнициализации.Вставить("ТипОбработкиДанных","ЗаписьДанныхТСД");
	СтруктураИнициализации.Вставить("СтрокиЗадачи",СтрокиЗадачи.Выгрузить());
	СтруктураИнициализации.Вставить("ПричинаОтменыЗадачи",ПричинаОтменыЗадачи);
	//Если ПомарочныйУчет Тогда 
	//		СтруктураИнициализации.Вставить("ДанныеАгрегации",ПолучитьДанныеАгрегацииПомарочногоУчета());
	//КонецЕсли;
	СтруктураИнициализации.Вставить("ИдентификаторУпаковкиПолучатель","00000000000000000000000000");
	СтруктураИнициализации=ОбработчикиЗапросаСервера.ЗапроситьДанные(СтруктураИнициализации,"Move");
	Если СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(СтруктураИнициализации,"Инициализация") тогда
		Возврат Ложь;
	КонецЕсли;	
	МодульРаспределенияДанных.ОбработчикВходящихДанных(СтруктураИнициализации);
	Возврат СтруктураИнициализации.Инициализация;
КонецФункции
&НаКлиенте
Процедура Просмотр(Команда)
	Если ТекущийЭлемент.Имя="СтрокиЗадачи" или
		ТекущийЭлемент.Имя="СтрокиЗадачи1" или
		ТекущийЭлемент.Имя="СтрокиЗадачи2" Тогда 
		ОткрытьФорму("Документ.итПеремещение.Форма.ФормаПросмотраСтрокиНМ",новый Структура("НоменклатураПредставление,"
		+"КоличествоФакт,ИдентификаторУпаковки,СерияНоменклатурыПредставление",ТекущийЭлемент.ТекущиеДанные.НоменклатураПредставление,
		ТекущийЭлемент.ТекущиеДанные.КоличествоПлан,ИдентификаторУпаковкиОтправитель,ТекущийЭлемент.ТекущиеДанные.СерияНоменклатурыПредставление),ЭтаФорма);
		ТригерПриемаСканераШтрихКода=Ложь;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура СписокВыбораПричнОтмены()
	МассивСпискаВыбора=ПолучитьСписокВыбораПричнОтмены();
	для Каждого стр из МассивСпискаВыбора цикл
		Элементы.ПричинаОтменыЗадачи.СписокВыбора.Добавить(стр);
	КонецЦикла;
КонецПроцедуры
&НаСервере
Процедура ЗаполнитьДанныеЗадачи(Отказ)
	МассивРезультатов=ЧтениеДанныхЗадачи();
	ВыборкаЗадача = МассивРезультатов[0].Выбрать();
	ВыборкаСтрокЗадачи = МассивРезультатов[2].Выбрать();
	ЗаполнитьШапкуЗадачи(ВыборкаЗадача,Отказ);
	ЗаполнитьСтрокиЗадачи(ВыборкаСтрокЗадачи,Отказ);
КонецПроцедуры
&НаСервере
Процедура ЗаполнитьСтрокиЗадачи(ВыборкаСтрокЗадачи,Отказ=Ложь)
	СтрокиЗадачи.Очистить();
	пока ВыборкаСтрокЗадачи.Следующий() цикл
		НоваяСтрока=СтрокиЗадачи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаСтрокЗадачи);
		НоваяСтрока.ИдСтрокиПредставление=Строка(ВыборкаСтрокЗадачи.ИдСтроки);
		НоваяСтрока.КоличествоПлан=ВыборкаСтрокЗадачи.Количество;
		ДанныеДокументаТСД=ВыборкаСтрокЗадачи.ДанныеДокументаТСД.Получить();
		Если ТипЗнч(ДанныеДокументаТСД) = тип("Структура") тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ДанныеДокументаТСД); 
		КонецЕсли;
		Если ТипПеремещения=0 или ТипПеремещения=1 тогда
			НоваяСтрока.КоличествоФакт=ВыборкаСтрокЗадачи.Количество;
		КонецЕсли;	
		Если ПомарочныйУчет тогда
			НоваяСтрока.КоличествоФакт=ВыборкаСтрокЗадачи.КоличествоМарок;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры
&НаСервере
Процедура ЗаполнитьШапкуЗадачи(ВыборкаЗадача,Отказ=Ложь)
	Если  ВыборкаЗадача.Следующий() тогда
		ДанныеХранилищаЗадачи= ВыборкаЗадача.ДополнительныеДанные.Получить();
		Если ТипЗнч(ДанныеХранилищаЗадачи)<> тип("Структура") тогда
			Отказ=Истина;
			Сообщить("Неверный формат данных");
			Возврат
		КонецЕсли;
		
		Если ДанныеХранилищаЗадачи.Свойство("ДвижениеНеЦелойПаллеты") и ДанныеХранилищаЗадачи.Свойство("ВЯчейкеПолучательМожетБытьSSCCПолучатель")  тогда
			ДвижениеНеЦелойПаллеты=ДанныеХранилищаЗадачи.ДвижениеНеЦелойПаллеты;
			ВЯчейкеПолучательМожетБытьSSCCПолучатель=ДанныеХранилищаЗадачи.ВЯчейкеПолучательМожетБытьSSCCПолучатель;
			
			Если ДвижениеНеЦелойПаллеты>0  тогда
				ТипПеремещения =2;
			ИначеЕсли ДвижениеНеЦелойПаллеты = 0 и ВЯчейкеПолучательМожетБытьSSCCПолучатель>0 тогда
				ТипПеремещения =1;
				ИдентификаторУпаковкиПолучатель=ВыборкаЗадача.ИдентификаторУпаковки;
			ИначеЕсли  ДвижениеНеЦелойПаллеты=0 и  ВЯчейкеПолучательМожетБытьSSCCПолучатель=0 тогда
				ТипПеремещения =0;
				ИдентификаторУпаковкиПолучатель=ВыборкаЗадача.ИдентификаторУпаковки;
			КонецЕсли;	
		иначе
			Отказ=Истина;
			Сообщить("Не хватает ключевых свойств");
		КонецЕсли;
		ЯчейкаОтправитель=ВыборкаЗадача.ЯчейкаОтправитель;
		ЯчейкаОтправительПредставление = ВыборкаЗадача.ЯчейкаОтправительПредставление;
		ЯчейкаПолучатель = ВыборкаЗадача.ЯчейкаПолучатель;
		ЯчейкаПолучательПредставление = ВыборкаЗадача.ЯчейкаПолучательПредставление;
		ИдентификаторУпаковкиОтправитель=ВыборкаЗадача.ИдентификаторУпаковки;
		Состояние=ВыборкаЗадача.Состояние;
		ШтрихКодЯчейкиПолучатель=ВыборкаЗадача.ШтрихКодЯчейкиПолучатель;
		ДанныеДокументаТСД = ВыборкаЗадача.ДанныеДокументаТСД.Получить();
		Если ТипЗнч(ДанныеДокументаТСД) = тип("Структура") тогда
			ЗаполнитьЗначенияСвойств(ЭтаФорма,ДанныеДокументаТСД); 
		КонецЕсли;
		Если ТипПеремещения=2 Тогда 
			ПомарочныйУчет=ЗадачаПомарочногоУчета();
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры
&НаСервере
Функция ЗадачаПомарочногоУчета()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	итДанныеПомарочногоУчета.Марка КАК Марка
	|ИЗ
	|	РегистрСведений.итДанныеПомарочногоУчета КАК итДанныеПомарочногоУчета
	|ГДЕ
	|	итДанныеПомарочногоУчета.Ключ = &Ключ
	|
	|СГРУППИРОВАТЬ ПО
	|	итДанныеПомарочногоУчета.Марка";
	
	Запрос.УстановитьПараметр("Ключ", ИдЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции
&НаСервере
Процедура ВидимостьДоступностьЭлементовСервер()
	Если ТипПеремещения = 0 тогда
		Элементы.ТиповоеПеремещение.Видимость=Истина;
		Элементы.ТиповоеПеремещениеВНеПустуюЯчейку.Видимость=Ложь;
		Элементы.ПеремещениеНеПолныхПаллет.Видимость=Ложь;
	ИначеЕсли ТипПеремещения=1 тогда
		Элементы.ТиповоеПеремещение.Видимость=Ложь;
		Элементы.ТиповоеПеремещениеВНеПустуюЯчейку.Видимость=Истина;
		Элементы.ПеремещениеНеПолныхПаллет.Видимость=Ложь;
	ИначеЕсли ТипПеремещения=2 тогда
		Элементы.ТиповоеПеремещение.Видимость=Ложь;
		Элементы.ТиповоеПеремещениеВНеПустуюЯчейку.Видимость=Ложь;
		Элементы.ПеремещениеНеПолныхПаллет.Видимость=Истина;
		
	КонецЕсли;	
КонецПроцедуры
&НаСервере
Процедура УстановитьНачальноеСостояниеЗадачи()
	Если Состояние=Перечисления.итWMSСостоянияЗадачТСД.Выполняется тогда
		Если ТипПеремещения=0  тогда
			Элементы.надписьЭтапа.Заголовок="Сканируйте ячейку получатель";
		ИначеЕсли ТипПеремещения=1 тогда
			Элементы.надписьЭтапа1.Заголовок="Сканируйте ячейку получатель";
		ИначеЕсли ТипПеремещения=2 тогда
			Элементы.надписьЭтапа2.Заголовок= "Подтвердите количество товара";	
			Элементы.СтрокиЗадачиПерейтиКСледующемуПункту.Видимость=Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
&НаСервере
Функция  ЧтениеДанныхЗадачи()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИтЗадачиНаТСД.ДокументОснование КАК ДокументОснование,
	|	ИтЗадачиНаТСД.ТипЗадачи КАК ТипЗадачи,
	|	ИтЗадачиНаТСД.ИдЗадачи КАК ИдЗадачи,
	|	ИтЗадачиНаТСД.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ИтЗадачиНаТСД.ЯчейкаОтправитель КАК ЯчейкаОтправитель,
	|	ИтЗадачиНаТСД.ЯчейкаОтправительПредставление КАК ЯчейкаОтправительПредставление,
	|	ИтЗадачиНаТСД.ЯчейкаПолучатель КАК ЯчейкаПолучатель,
	|	ИтЗадачиНаТСД.ЯчейкаПолучательПредставление КАК ЯчейкаПолучательПредставление,
	|	ИтЗадачиНаТСД.ДополнительныеДанные КАК ДополнительныеДанные,
	|	ИтЗадачиНаТСД.Состояние КАК Состояние,
	|	ИтЗадачиНаТСД.ДанныеДокументаТСД КАК ДанныеДокументаТСД,
	|	итПеремещениеШтрихКодыЯчеекДокумента.ШтрихКод КАК ШтрихКодЯчейкиПолучатель
	|ИЗ
	|	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.итПеремещение.ШтрихКодыЯчеекДокумента КАК итПеремещениеШтрихКодыЯчеекДокумента
	|		ПО ИтЗадачиНаТСД.ДокументОснование = итПеремещениеШтрихКодыЯчеекДокумента.Ссылка
	|			И ИтЗадачиНаТСД.ЯчейкаПолучатель = итПеремещениеШтрихКодыЯчеекДокумента.Ячейка
	|ГДЕ
	|	ИтЗадачиНаТСД.ИдЗадачи = &ИдЗадачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтСтрокиЗадачНаТСД.ИдЗадачи КАК ИдЗадачи,
	|	ИтСтрокиЗадачНаТСД.ИдСтроки КАК ИдСтроки,
	|	ИтСтрокиЗадачНаТСД.Номенклатура КАК Номенклатура,
	|	ИтСтрокиЗадачНаТСД.НоменклатураПредставление КАК НоменклатураПредставление,
	|	ИтСтрокиЗадачНаТСД.ДатаРозлива КАК ДатаРозлива,
	|	ИтСтрокиЗадачНаТСД.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ИтСтрокиЗадачНаТСД.СерияНоменклатурыПредставление КАК СерияНоменклатурыПредставление,
	|	ИтСтрокиЗадачНаТСД.Количество КАК Количество,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ итДанныеПомарочногоУчета.Марка) КАК КоличествоМарок,
	|	МАКСИМУМ(ЕСТЬNULL(итДанныеПомарочногоУчета.Марка, 0)) КАК МаксимальнаяМарка
	|ПОМЕСТИТЬ ДанныеСтрокиИПомарочныйУчет
	|ИЗ
	|	РегистрСведений.ИтСтрокиЗадачНаТСД КАК ИтСтрокиЗадачНаТСД
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.итДанныеПомарочногоУчета КАК итДанныеПомарочногоУчета
	|		ПО ИтСтрокиЗадачНаТСД.ИдЗадачи = итДанныеПомарочногоУчета.Ключ
	|			И ИтСтрокиЗадачНаТСД.Номенклатура = итДанныеПомарочногоУчета.Номенклатура
	|			И ИтСтрокиЗадачНаТСД.СерияНоменклатуры = итДанныеПомарочногоУчета.СерияНоменклатуры
	|			И (итДанныеПомарочногоУчета.ПризнакОбработки = ИСТИНА)
	|ГДЕ
	|	ИтСтрокиЗадачНаТСД.ИдЗадачи = &ИдЗадачи
	|
	|СГРУППИРОВАТЬ ПО
	|	ИтСтрокиЗадачНаТСД.ИдЗадачи,
	|	ИтСтрокиЗадачНаТСД.ИдСтроки,
	|	ИтСтрокиЗадачНаТСД.Номенклатура,
	|	ИтСтрокиЗадачНаТСД.НоменклатураПредставление,
	|	ИтСтрокиЗадачНаТСД.ДатаРозлива,
	|	ИтСтрокиЗадачНаТСД.СерияНоменклатуры,
	|	ИтСтрокиЗадачНаТСД.СерияНоменклатурыПредставление,
	|	ИтСтрокиЗадачНаТСД.Количество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСтрокиИПомарочныйУчет.ИдЗадачи КАК ИдЗадачи,
	|	ДанныеСтрокиИПомарочныйУчет.ИдСтроки КАК ИдСтроки,
	|	ДанныеСтрокиИПомарочныйУчет.Номенклатура КАК Номенклатура,
	|	ДанныеСтрокиИПомарочныйУчет.НоменклатураПредставление КАК НоменклатураПредставление,
	|	ДанныеСтрокиИПомарочныйУчет.ДатаРозлива КАК ДатаРозлива,
	|	ДанныеСтрокиИПомарочныйУчет.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ДанныеСтрокиИПомарочныйУчет.СерияНоменклатурыПредставление КАК СерияНоменклатурыПредставление,
	|	ДанныеСтрокиИПомарочныйУчет.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА ДанныеСтрокиИПомарочныйУчет.МаксимальнаяМарка = 0
	|			ТОГДА 0
	|		ИНАЧЕ ДанныеСтрокиИПомарочныйУчет.КоличествоМарок
	|	КОНЕЦ КАК КоличествоМарок,
	|	ДанныеСтрокиИПомарочныйУчет.МаксимальнаяМарка КАК МаксимальнаяМарка,
	|	ИтСтрокиЗадачНаТСД.ДополнительныеДанные КАК ДополнительныеДанные,
	|	ИтСтрокиЗадачНаТСД.ДанныеДокументаТСД КАК ДанныеДокументаТСД
	|ИЗ
	|	ДанныеСтрокиИПомарочныйУчет КАК ДанныеСтрокиИПомарочныйУчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИтСтрокиЗадачНаТСД КАК ИтСтрокиЗадачНаТСД
	|		ПО ДанныеСтрокиИПомарочныйУчет.ИдЗадачи = ИтСтрокиЗадачНаТСД.ИдЗадачи
	|			И ДанныеСтрокиИПомарочныйУчет.ИдСтроки = ИтСтрокиЗадачНаТСД.ИдСтроки";
	
	Запрос.УстановитьПараметр("ИдЗадачи", ИдЗадачи);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Возврат МассивРезультатов;
КонецФункции
&НаСервере
Функция ПолучитьДанныеДляИнициализации()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИтЗадачиНаТСД.ИдЗадачи КАК ИдЗадачи,
	|	ИтЗадачиНаТСД.ТипЗадачи КАК ТипЗадачи,
	|	ИтЗадачиНаТСД.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
	|ГДЕ
	|	ИтЗадачиНаТСД.ИдЗадачи = &ИдЗадачи";
	
	Запрос.УстановитьПараметр("ИдЗадачи",ИдЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	СтруктураДанных=новый Структура;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		для Каждого Колонка из РезультатЗапроса.Колонки цикл
			СтруктураДанных.Вставить(Колонка.Имя,ВыборкаДетальныеЗаписи[Колонка.Имя]);
		КонецЦикла;
	КонецЦикла;
	Возврат СтруктураДанных;
КонецФункции

&НаКлиенте
Процедура ОбработчикПолученияДанныхШтрихКода(Параметр)
	//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"#ПеремещениеФормаЗадачи  Сканирование");
	Если ТипПеремещения=0 тогда
		//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"#ПеремещениеФормаЗадачи  Сканирование тип перемещния 0");
		ОбработкаТипопвогоПеремещения(Параметр)
	КонецЕсли;
	Если ТипПеремещения=1 тогда
		//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"#ПеремещениеФормаЗадачи  Сканирование тип перемещения 1");
		ОбработкаТипопвогоПеремещенияВНеПустуюЯчейку(Параметр);
	КонецЕсли; 
	Если ТипПеремещения=2 тогда
		//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"#ПеремещениеФормаЗадачи  Сканирование тип перемещения 2");
		ОбработкаПеремещенияНеПолныхПаллет(Параметр);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ОбработкаТипопвогоПеремещения(Параметр)
	Если Элементы.надписьЭтапа.Заголовок="Сканируйте SSCC" тогда
		Если СокрЛП(НРег(Параметр))=СокрЛП(НРег(ИдентификаторУпаковкиОтправитель)) Тогда
			//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"+#ПеремещениеФормаЗадачи  Сканирование тип перемещния 0 ИнициализацияЗадачиНаСервере Сканируйте SSCC");
			Если ИнициализацияЗадачиНаСервере()  тогда
				Элементы.надписьЭтапа.Заголовок = "Сканируйте ячейку получатель";
				Возврат;
					//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"-#ПеремещениеФормаЗадачи  Сканирование тип перемещния 0 ИнициализацияЗадачиНаСервере Сканируйте SSCC");
			КонецЕсли;
			//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"-#ПеремещениеФормаЗадачи  Сканирование тип перемещния 0 ИнициализацияЗадачиНаСервере Сканируйте SSCC");
		иначе
			Сообщить("SSCC "+ Параметр+ " не соответствует текущему");
		КонецЕсли;
	КонецЕсли;
	Если Элементы.надписьЭтапа.Заголовок="Сканируйте ячейку получатель" тогда
		Если СокрЛП(НРег(Параметр))=СокрЛП(НРег(ШтрихКодЯчейкиПолучатель)) Тогда
			//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"+#ПеремещениеФормаЗадачи  Сканирование тип перемещния 0 ИнициализацияЗадачиНаСервере Сканируйте ячейку получатель");
			Если ИнициализацияЗадачиНаСервере()  тогда
				ЭтаФорма.Закрыть();
				ОбщийМодульКлиентскойЧасти.ОповещениеДинамическихСписковОткрытыхФорм();
			КонецЕсли;
			//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"-#ПеремещениеФормаЗадачи  Сканирование тип перемещния 0 ИнициализацияЗадачиНаСервере Сканируйте ячейку получатель");

		ИначеЕсли ШтрихКодНакопленВерно(Параметр) тогда
			//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"+#ПеремещениеФормаЗадачи  Сканирование тип перемещния 0 ИнициализацияЗадачиНаСервере Сканируйте ячейку получатель");
			Если ИнициализацияЗадачиНаСервере()  тогда
				ЭтаФорма.Закрыть();
				ОбщийМодульКлиентскойЧасти.ОповещениеДинамическихСписковОткрытыхФорм();
			КонецЕсли;
     		//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"-#ПеремещениеФормаЗадачи  Сканирование тип перемещния 0 ИнициализацияЗадачиНаСервере Сканируйте ячейку получатель");

		ИначеЕсли  ЭтапСканированияЯчейки<1 тогда 
			ЭтапСканированияЯчейки=ЭтапСканированияЯчейки+1;
			НакопительСканированияЯчейки=Параметр;
		иначе
			НакопительСканированияЯчейки="";
			ЭтапСканированияЯчейки=0;
			Сообщить("Не верное сканирование ячейки получатель");
		КонецЕсли;
	КонецЕсли;
	
	
	
КонецПроцедуры
&НаКлиенте
Процедура ОбработкаТипопвогоПеремещенияВНеПустуюЯчейку(Параметр)
	Если Элементы.надписьЭтапа1.Заголовок="Сканируйте SSCC" тогда
		Если СокрЛП(НРег(Параметр))=СокрЛП(НРег(ИдентификаторУпаковкиОтправитель)) Тогда
			//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"+#ПеремещениеФормаЗадачи  Сканирование тип перемещния 1 ИнициализацияЗадачиНаСервере Сканируйте SSCC");
			Если ИнициализацияЗадачиНаСервере()  тогда
				Элементы.надписьЭтапа1.Заголовок = "Сканируйте ячейку получатель";
				//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"-#ПеремещениеФормаЗадачи  Сканирование тип перемещния 1 ИнициализацияЗадачиНаСервере Сканируйте SSCC");
				Возврат;
			КонецЕсли;
			//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"-#ПеремещениеФормаЗадачи  Сканирование тип перемещния 1 ИнициализацияЗадачиНаСервере Сканируйте SSCC");
		иначе
			Сообщить("SSCC "+ Параметр+ " не соответствует текущему");
		КонецЕсли;
	КонецЕсли;
	Если Элементы.надписьЭтапа1.Заголовок="Сканируйте ячейку получатель" тогда
		Если СокрЛП(НРег(Параметр))=СокрЛП(НРег(ШтрихКодЯчейкиПолучатель)) Тогда
			Элементы.надписьЭтапа1.Заголовок = "Сканируйте SSCC получатель";
			Элементы.ИдентификаторУпаковкиПолучатель1.Видимость=Истина;
			//Элементы.ПрисвоитьSSCCПолучатель.Видимость=Истина;
			Возврат;
		ИначеЕсли ШтрихКодНакопленВерно(Параметр) тогда
			Элементы.надписьЭтапа1.Заголовок = "Сканируйте SSCC получатель";
			Элементы.ИдентификаторУпаковкиПолучатель1.Видимость=Истина;
			//Элементы.ПрисвоитьSSCCПолучатель.Видимость=Истина;
			//Элементы.СтрокиЗадачи.Видимость=Ложь;
			Возврат;
		ИначеЕсли  ЭтапСканированияЯчейки<1 тогда 
			ЭтапСканированияЯчейки=ЭтапСканированияЯчейки+1;
			НакопительСканированияЯчейки=Параметр;
		иначе
			НакопительСканированияЯчейки="";
			ЭтапСканированияЯчейки=0;
			Сообщить("Не верное сканирование ячейки получатель");
		КонецЕсли;
	КонецЕсли;
	Если Элементы.надписьЭтапа1.Заголовок="Сканируйте SSCC получатель" тогда
		//Если  СокрЛП(НРег(ИдентификаторУпаковкиПолучатель))=СокрЛП(НРег(Параметр)) тогда
		Отказ=Ложь;
		ОбщийМодульКлиентскойЧасти.ПроверитьSSCCНаЛеквидность(Параметр,Отказ);
		Если Отказ тогда
			Возврат
		КонецЕсли;
		ИдентификаторУпаковкиПолучатель=Параметр;
		//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"+#ПеремещениеФормаЗадачи  Сканирование тип перемещния 1 ИнициализацияЗадачиНаСервере Сканируйте SSCC получатель");
		Если ИнициализацияЗадачиНаСервере()  тогда
			ЭтаФорма.Закрыть();
			ОбщийМодульКлиентскойЧасти.ОповещениеДинамическихСписковОткрытыхФорм();
		КонецЕсли;
		//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"-#ПеремещениеФормаЗадачи  Сканирование тип перемещния 1 ИнициализацияЗадачиНаСервере Сканируйте SSCC получатель");

		//иначе
		//	Сообщить("не верный штрих код");
		//КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ОбработкаПеремещенияНеПолныхПаллет(Параметр)
	Если Элементы.надписьЭтапа2.Заголовок="Сканируйте SSCC" тогда
		Если СокрЛП(НРег(Параметр))=СокрЛП(НРег(ИдентификаторУпаковкиОтправитель)) Тогда
			//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"+#ПеремещениеФормаЗадачи  Сканирование тип перемещния 2 ИнициализацияЗадачиНаСервере Сканируйте SSCC");
			Если ИнициализацияЗадачиНаСервере()  тогда
				Элементы.надписьЭтапа2.Заголовок = "Подтвердите количество товара";
				Элементы.СтрокиЗадачиПерейтиКСледующемуПункту.Видимость=Истина;
				//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"-#ПеремещениеФормаЗадачи  Сканирование тип перемещния 2 ИнициализацияЗадачиНаСервере Сканируйте SSCC");
				//Элементы.СтрокиЗадачи.ТолькоПросмотр=Ложь;
				Возврат;
			КонецЕсли;
			//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"-#ПеремещениеФормаЗадачи  Сканирование тип перемещния 2 ИнициализацияЗадачиНаСервере Сканируйте SSCC");
		иначе
			Сообщить("SSCC "+ Параметр+ " не соответствует текущему");
		КонецЕсли;
	КонецЕсли;
	Если Элементы.надписьЭтапа2.Заголовок="Сканируйте ячейку получатель" тогда
		Если СокрЛП(НРег(Параметр))=СокрЛП(НРег(ШтрихКодЯчейкиПолучатель)) Тогда
			Элементы.надписьЭтапа2.Заголовок = "Сканируйте SSCC получатель";
			Элементы.ИдентификаторУпаковкиПолучатель2.Видимость=Истина;
			//Элементы.ПрисвоитьSSCCПолучатель.Видимость=Истина;
			Элементы.ЗапроситьНовыйSSCC.Видимость=Истина;
			Элементы.СтрокиЗадачи2.Видимость=Ложь;
			Возврат;
		ИначеЕсли ШтрихКодНакопленВерно(Параметр) тогда
			Элементы.надписьЭтапа2.Заголовок = "Сканируйте SSCC получатель";
			Элементы.ИдентификаторУпаковкиПолучатель2.Видимость=Истина;
			//Элементы.ПрисвоитьSSCCПолучатель.Видимость=Истина;
			Элементы.ЗапроситьНовыйSSCC.Видимость=Истина;
			Элементы.СтрокиЗадачи2.Видимость=Ложь;
			Возврат;
		ИначеЕсли  ЭтапСканированияЯчейки<1 тогда 
			ЭтапСканированияЯчейки=ЭтапСканированияЯчейки+1;
			НакопительСканированияЯчейки=Параметр;
		иначе
			НакопительСканированияЯчейки="";
			ЭтапСканированияЯчейки=0;
			Сообщить("Не верное сканирование ячейки получатель");
		КонецЕсли;
	КонецЕсли;
	Если Элементы.надписьЭтапа2.Заголовок="Сканируйте SSCC получатель" тогда
		Если СокрЛП(Параметр) = СокрЛП(ИдентификаторУпаковкиОтправитель) Тогда 
			Сообщить("Сканируйте SSCC в ячейке или присвойте новый.
			| не возможно сохранить текущее SSCC для этой ячейки");
			Возврат
		КонецЕсли;	
		//Если  СокрЛП(НРег(ИдентификаторУпаковкиПолучатель))=СокрЛП(НРег(Параметр)) тогда
		Отказ=Ложь;
		ОбщийМодульКлиентскойЧасти.ПроверитьSSCCНаЛеквидность(Параметр,Отказ);
		Если Отказ тогда
			Возврат
		КонецЕсли;
		
		ИдентификаторУпаковкиПолучатель=Параметр;
		//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"+#ПеремещениеФормаЗадачи  Сканирование тип перемещния 2 ИнициализацияЗадачиНаСервере Сканируйте SSCC получатель");
		Если ИнициализацияЗадачиНаСервере()  тогда
			ЭтаФорма.Закрыть();
			ОбщийМодульКлиентскойЧасти.ОповещениеДинамическихСписковОткрытыхФорм();
		КонецЕсли;
		//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"-#ПеремещениеФормаЗадачи  Сканирование тип перемещния 2 ИнициализацияЗадачиНаСервере Сканируйте SSCC получатель");

		//иначе
		//	Сообщить("не верный штрих код");
		//	
		//КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ШтрихКодНакопленВерно(Параметр)
	Если НРег(СокрЛП(НакопительСканированияЯчейки)+СокрЛП(Параметр))=НРег(СокрЛП(ШтрихКодЯчейкиПолучатель)) тогда
		Возврат Истина;
	ИначеЕсли  НРег(СокрЛП(НакопительСканированияЯчейки)+"-"+СокрЛП(Параметр))=НРег(СокрЛП(ШтрихКодЯчейкиПолучатель)) тогда
		Возврат Истина;
	ИначеЕсли НРег(СокрЛП(Параметр)+"-"+СокрЛП(НакопительСканированияЯчейки))=НРег(СокрЛП(ШтрихКодЯчейкиПолучатель)) тогда
		Возврат Истина;
	ИначеЕсли НРег(СокрЛП(Параметр)+СокрЛП(НакопительСканированияЯчейки))=НРег(СокрЛП(ШтрихКодЯчейкиПолучатель)) тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаСервере
Функция ИнициализацияЗадачиНаСервере()
	СтруктураДанных= ПолучитьДанныеДляИнициализации();
	Если ТипПеремещения=0 и Элементы.надписьЭтапа.Заголовок="Сканируйте SSCC"  тогда
		Возврат ОбработчикДанныхОбщиеФункцииИПроцедуры.ИнициализацияЗадачиНаСервере(СтруктураДанных,"Задача",Перечисления.итWMSСостоянияЗадачТСД.Выполняется);
	КонецЕсли;
	Если ТипПеремещения=0 и Элементы.надписьЭтапа.Заголовок="Сканируйте ячейку получатель" тогда
		Возврат ИнициализацияФиксацииДанныхЗадачи(СтруктураДанных);
	КонецЕсли;
	Если ТипПеремещения=1 и Элементы.надписьЭтапа1.Заголовок="Сканируйте SSCC" тогда
		Возврат ОбработчикДанныхОбщиеФункцииИПроцедуры.ИнициализацияЗадачиНаСервере(СтруктураДанных,"Задача",Перечисления.итWMSСостоянияЗадачТСД.Выполняется);
	КонецЕсли;
	Если ТипПеремещения=1 и Элементы.надписьЭтапа1.Заголовок="Сканируйте SSCC получатель" тогда	
		Возврат ИнициализацияФиксацииДанныхЗадачи(СтруктураДанных);
	КонецЕсли;
	Если ТипПеремещения=2 и Элементы.надписьЭтапа2.Заголовок="Сканируйте SSCC" тогда
		Возврат ОбработчикДанныхОбщиеФункцииИПроцедуры.ИнициализацияЗадачиНаСервере(СтруктураДанных,"Задача",Перечисления.итWMSСостоянияЗадачТСД.Выполняется);
	КонецЕсли;
	Если ТипПеремещения=2 и Элементы.надписьЭтапа2.Заголовок="Сканируйте SSCC получатель" тогда		
		Возврат ИнициализацияФиксацииДанныхЗадачи(СтруктураДанных);
	КонецЕсли;
	
	
	
	//Если Режим="РежимСканированиеПаллетыНачало" тогда
	//Возврат ОбработчикДанныхОбщиеФункцииИПроцедуры.ИнициализацияЗадачиНаСервере(СтруктураДанных,"Задача",Перечисления.итWMSСостоянияЗадачТСД.Выполняется);
	//КонецЕсли;
	////Если Режим="РежимСканированиеПаллетыКонец" тогда
	//Если Режим="РежимСканированияЯчейкиПолучатель" тогда
	//СтруктураДанных.Вставить("ФиксацияЗадачи",Истина);
	//СтруктураИнициализации=СлужебныеФункцииИПроцедурыКлиентСервер.СформироватьСтруктуруИнициализацииДанных(СтруктураДанных,"Задача",Перечисления.итWMSСостоянияЗадачТСД.Выполнена);
	//СтруктураИнициализации.Вставить("ТипОбработкиДанных","ВнесениеИзмененийВДокумент");
	//СтруктураИнициализации=ОбработчикиЗапросаСервера.ЗапроситьДанные(СтруктураИнициализации,"Placement");
	//Если СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(СтруктураИнициализации,"Инициализация") тогда
	//	Возврат Ложь;
	//КонецЕсли;	
	//МодульРаспределенияДанных.ОбработчикВходящихДанных(СтруктураИнициализации);
	//Возврат СтруктураИнициализации.Инициализация;
	
	////Возврат ОбработчикДанныхОбщиеФункцииИПроцедуры.ИнициализацияЗадачиНаСервере(СтруктураДанных,"Задача",Перечисления.итWMSСостоянияЗадачТСД);
	//КонецЕсли;
КонецФункции
&НаСервере
Функция ИнициализацияФиксацииДанныхЗадачи(СтруктураДанных)
	СтруктураДанных.Вставить("ФиксацияЗадачи",Истина);
	СтруктураИнициализации=СлужебныеФункцииИПроцедурыКлиентСервер.СформироватьСтруктуруИнициализацииДанных(СтруктураДанных,"Задача",Перечисления.итWMSСостоянияЗадачТСД.Выполнена);
	//СтруктураИнициализации.Вставить("ТипОбработкиДанных","ВнесениеИзмененийВДокумент");
	СтруктураИнициализации.Вставить("ТипОбработкиДанных","ЗаписьДанныхТСД");
	СтруктураИнициализации.Вставить("СтрокиЗадачи",СтрокиЗадачи.Выгрузить());
	Если ПомарочныйУчет Тогда 
		СтруктураИнициализации.Вставить("ДанныеАгрегации",ПолучитьДанныеАгрегацииПомарочногоУчета());
	КонецЕсли;
	СтруктураИнициализации.Вставить("ИдентификаторУпаковкиПолучатель",ИдентификаторУпаковкиПолучатель);
	СтруктураИнициализации=ОбработчикиЗапросаСервера.ЗапроситьДанные(СтруктураИнициализации,"Move");
	Если СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(СтруктураИнициализации,"Инициализация") тогда
		Возврат Ложь;
	КонецЕсли;	
	МодульРаспределенияДанных.ОбработчикВходящихДанных(СтруктураИнициализации);
	Возврат СтруктураИнициализации.Инициализация;
КонецФункции

&НаСервере
Процедура ПроверитьНаЗавершениеПроцессаРедактированияСтрок(ПроцессЗавершен)
	для Каждого стр из СтрокиЗадачи цикл
		Если стр.КоличествоПлан<>стр.КоличествоФакт тогда
			ПроцессЗавершен=Ложь;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры
&НаСервере
Процедура ЗафиксироватьИдентификаторПолучательЗадачи(ИдУпаковкиПолучатель)
	НаборЗаписей=РегистрыСведений.ИтЗадачиНаТСД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдЗадачи.Установить(ИдЗадачи);
	НаборЗаписей.Прочитать();
	для Каждого стр из НаборЗаписей цикл
		ДанныеТСД=стр.ДанныеДокументаТСД.Получить();
		Если ТипЗнч(ДанныеТСД)=тип("Структура") тогда
			ДанныеТСД.Вставить("ИдентификаторУпаковкиПолучатель",ИдУпаковкиПолучатель);
		иначе
			ДанныеТСД=новый Структура;
			ДанныеТСД.Вставить("ИдентификаторУпаковкиПолучатель",ИдУпаковкиПолучатель);
			
		КонецЕсли;
		стр.ДанныеДокументаТСД=новый ХранилищеЗначения(ДанныеТСД);
	КонецЦикла;
	НаборЗаписей.Записать();
КонецПроцедуры
&НаКлиенте
Процедура СтрокиЗадачиКоличествоФактПриИзменении()
	Данные=этаформа.ТекущийЭлемент.ТекущиеДанные;
	СтрокиЗадачиКоличествоФактПриИзмененииНаСервере(Данные.ИдСтроки,Данные.КоличествоФакт);
	Если ТипПеремещения=2 тогда
		ПроцессЗавершен=Истина;
		ПроверитьНаЗавершениеПроцессаРедактированияСтрок(ПроцессЗавершен);
		Если ПроцессЗавершен тогда
			ПерейтиКСледующемуПунктуНаСервере();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ИдентификаторУпаковкиОткрытиеПечать()
	Если ЗначениеЗаполнено(ИдентификаторУпаковкиПолучатель) тогда
		Оповещение = новый ОписаниеОповещения("ПечатьИдентификатораУпаковкиОповещение",ЭтаФорма,ИдентификаторУпаковкиПолучатель);
		ПоказатьВопрос(Оповещение,"Хотите распечатать текущий идентификатор?",РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПечатьИдентификатораУпаковкиОповещение(Результат,Параметры) Экспорт
	Если Результат=КодВозвратаДиалога.Нет тогда
		Возврат
	КонецЕсли;	
	ОткрытьФорму("ОбщаяФорма.ВыборПринтераДляПечати",Новый Структура("ИдентификаторУпаковки",Параметры),ЭтаФорма);
	ТригерПриемаСканераШтрихКода=Ложь;
КонецПроцедуры
&НаСервере
Функция ПолучитьКоличествоОтсканированныхМарок(Номенклатура,СерияНоменклатуры)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ итДанныеПомарочногоУчета.Марка) КАК Марка,
	|	итДанныеПомарочногоУчета.Ключ КАК Ключ
	|ИЗ
	|	РегистрСведений.итДанныеПомарочногоУчета КАК итДанныеПомарочногоУчета
	|ГДЕ
	|	итДанныеПомарочногоУчета.Ключ = &Ключ
	|	И итДанныеПомарочногоУчета.Номенклатура = &Номенклатура
	|	И итДанныеПомарочногоУчета.СерияНоменклатуры = &СерияНоменклатуры
	|	И итДанныеПомарочногоУчета.ПризнакОбработки = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	итДанныеПомарочногоУчета.Ключ";
	
	Запрос.УстановитьПараметр("Ключ", ИдЗадачи);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("СерияНоменклатуры", СерияНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Возврат   ВыборкаДетальныеЗаписи.Марка;
	КонецЕсли;
	Возврат 0;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции
&НаСервере
Процедура ОбновитьДанныеСтрокЗадачи()
	Отказ=Ложь;
	МассивРезультатов=ЧтениеДанныхЗадачи();
	ВыборкаСтрокЗадачи = МассивРезультатов[2].Выбрать();
	ЗаполнитьСтрокиЗадачи(ВыборкаСтрокЗадачи,Отказ);
	Если Отказ Тогда 
		Сообщить("Ошибка обновления данных");
	КонецЕсли;	
КонецПроцедуры
&НаСервере
Функция  ПолучитьДанныеАгрегацииПомарочногоУчета()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итДанныеПомарочногоУчета.Марка КАК Марка,
		|	итДанныеПомарочногоУчета.Ключ КАК Ключ,
		|	итДанныеПомарочногоУчета.SSCC КАК SSCC,
		|	итДанныеПомарочногоУчета.GTIN КАК GTIN,
		|	итДанныеПомарочногоУчета.Номенклатура КАК Номенклатура,
		|	итДанныеПомарочногоУчета.СерияНоменклатуры КАК СерияНоменклатуры,
		|	итДанныеПомарочногоУчета.ДатаРозлива КАК ДатаРозлива
		|ИЗ
		|	РегистрСведений.итДанныеПомарочногоУчета КАК итДанныеПомарочногоУчета
		|ГДЕ
		|	итДанныеПомарочногоУчета.Ключ = &Ключ
		|	И итДанныеПомарочногоУчета.ПризнакОбработки = ИСТИНА";
	
	Запрос.УстановитьПараметр("Ключ", ИдЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	КонецФункции
&НаСервере
Функция ПолучитьСписокВыбораПричнОтмены()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итWMS_ПричиныОтменыЗадач.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.итWMS_ПричиныОтменыЗадач КАК итWMS_ПричиныОтменыЗадач";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса.ВыгрузитьКолонку("Ссылка");
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции


#КонецОбласти





