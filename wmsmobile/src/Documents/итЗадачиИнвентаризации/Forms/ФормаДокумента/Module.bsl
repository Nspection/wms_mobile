#Область ОбработчикиСобытий
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СписокЯчеек.Параметры.УстановитьЗначениеПараметра("ДокументОснование",Объект.Ссылка);
	Элементы.ДекорацияИнформацииДокумента.Заголовок="Задача Инвентаризации Номер №"+Объект.Номер+" от "+Объект.Дата;
КонецПроцедуры
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия="ОбработчикШтрихКода"  и ТригерПриемаСканераШтрихКода тогда
		Если Параметр=404 и Источник="ОшибкаЧтения" тогда
			ОбщийМодульКлиентскойЧасти.СообщитьЧерезФорму("Штрих код некорректен");
			Возврат
		КонецЕсли;	
		ОбработчкаПолученияДанныхШтрихКода(Параметр);
	КонецЕсли;
	Если ИмяСобытия="ОбновлениеДанныхДинамическихСписков" и Источник=ОбщийМодульКлиентскойЧасти тогда
		Если ЗадачНет() тогда
			ЭтаФорма.Закрыть();
		КонецЕсли;
		Элементы.СписокЯчеек.Обновить();
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбщийМодульКлиентскойЧасти.ПереопределенияТригераПолучениеШтрихКодаПриОткрытии(ЭтаФорма);
КонецПроцедуры
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	ОбщийМодульКлиентскойЧасти.ПереопределенияТригераПолучениеШтрихКодаПриЗакрытии(ЭтаФорма);	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд


&НаКлиенте
Процедура Назад(Команда)
	ЭтаФорма.Закрыть();
КонецПроцедуры

&НаСервере
Функция  ОтказатьсяОтИнвентаризацииНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИтЗадачиНаТСД.ИдЗадачи КАК ИдЗадачи,
	|	ИтЗадачиНаТСД.ТипЗадачи КАК ТипЗадачи,
	|	ИтЗадачиНаТСД.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
	|ГДЕ
	|	ИтЗадачиНаТСД.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	СтруктураОтказаЗадачи=новый Структура;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		для Каждого Колонка из РезультатЗапроса.Колонки цикл
			СтруктураОтказаЗадачи.Вставить(Колонка.Имя,ВыборкаДетальныеЗаписи[Колонка.Имя]);
		КонецЦикла;
	КонецЦикла;
	Возврат ОбработчикДанныхОбщиеФункцииИПроцедуры.ИнициализацияЗадачиНаСервере(СтруктураОтказаЗадачи,"ДокументОтказ",Перечисления.итWMSСостоянияЗадачТСД.КВыполнению);
	
КонецФункции
&НаКлиенте
Процедура ОтказатьсяОтИнвентаризацииОповещение(Результат,Параметры) Экспорт 
	Если Результат = КодВозвратаДиалога.Нет тогда
		Возврат
	КонецЕсли;
	Если ОтказатьсяОтИнвентаризацииНаСервере() тогда
		ОбщийМодульКлиентскойЧасти.ОповещениеДинамическихСписковОткрытыхФорм();
	иначе
		ОбщийМодульКлиентскойЧасти.СообщитьЧерезФорму("не удачная попытка отказа от задачи, попробуйте еще раз, или подойтиде к оператору");
	КонецЕсли;	
	
КонецПроцедуры
&НаКлиенте
Процедура ОтказатьсяОтИнвентаризации(Команда)
	Оповещение=новый ОписаниеОповещения("ОтказатьсяОтИнвентаризацииОповещение",ЭтаФорма);
	ПоказатьВопрос(Оповещение,"Вы точно хотите отказаться от Документа",РежимДиалогаВопрос.ДаНет);	
КонецПроцедуры
&НаКлиенте
Процедура ЗавершитьДокумент(Команда)
	Оповещение=новый ОписаниеОповещения("ЗавершитьДокументОповещение",ЭтаФорма);
	ПоказатьВопрос(Оповещение,"Вы точно хотите завершить документ?-Все не выполненные задачи будут отменены.",РежимДиалогаВопрос.ДаНет);	
КонецПроцедуры
&НаКлиенте
Процедура ЗавершитьДокументОповещение(Результат,Параметры) Экспорт 
	Если Результат=КодВозвратаДиалога.Нет Тогда 
		Возврат
	КонецЕсли;	
	Если ЗавершитьДокументНаСервере() тогда
		ОбщийМодульКлиентскойЧасти.ОповещениеДинамическихСписковОткрытыхФорм();
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Функция ЗадачНет()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИтЗадачиНаТСД.ИдЗадачи КАК ИдЗадачи
	|ИЗ
	|	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
	|ГДЕ
	|	ИтЗадачиНаТСД.ДокументОснование = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	ИтЗадачиНаТСД.ИдЗадачи";
	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если  РезультатЗапроса.Пустой() тогда
		Возврат Истина;
	иначе
		Возврат Ложь;
	КонецЕсли;	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
КонецФункции
&НаКлиенте
Процедура ОбработчкаПолученияДанныхШтрихКода(Параметр)
	ЭтапСканированияЯчейки=ЭтапСканированияЯчейки+1;
	МассивСтрок=Объект.ШтрихКодыЯчеекДокумента.НайтиСтроки(новый Структура("ШтрихКод",СокрЛП(ВРег(Параметр))));
	Если МассивСтрок.Количество()>0 тогда
		ЭтапСканированияЯчейки=0;
		НакопительСканированияЯчейки="";
		
	    ФормаИнвенторизацииЯчейки=ПолучитьФорму("Обработка.ОбработчикИнвентаризацииЯчейки.Форма.ФормаОбработки",новый Структура("ШтрихКодЯчейкиДокумента,ДокументЗадачИнвентаризации",Параметр,Объект.Ссылка),ЭтаФорма);
		Если ТипЗнч(ФормаИнвенторизацииЯчейки)=Тип("УправляемаяФорма") Тогда 
		ФормаИнвенторизацииЯчейки.Открыть();
		ТригерПриемаСканераШтрихКода=Ложь;
		КонецЕсли;
	ИначеЕсли ШтрихКодНакопленВерно(Параметр) тогда
		ЭтапСканированияЯчейки=0;
		НакопительСканированияЯчейки="";
		
		ФормаИнвенторизацииЯчейки=ПолучитьФорму("Обработка.ОбработчикИнвентаризацииЯчейки.Форма.ФормаОбработки",новый Структура("ШтрихКодЯчейкиДокумента,ДокументЗадачИнвентаризации",Параметр,Объект.Ссылка),ЭтаФорма);
		Если ТипЗнч(ФормаИнвенторизацииЯчейки)=Тип("УправляемаяФорма") Тогда 
		ФормаИнвенторизацииЯчейки.Открыть();
		ТригерПриемаСканераШтрихКода=Ложь;
		КонецЕсли;
	ИначеЕсли МассивСтрок.Количество()=0 и ЭтапСканированияЯчейки<2 тогда
		НакопительСканированияЯчейки=СокрЛП(Параметр);
	иначе	
		ОбщийМодульКлиентскойЧасти.СообщитьЧерезФорму("Отсканированный штрих-код "+Параметр+СокрЛП(НакопительСканированияЯчейки)+" не удовлетворяет требованиям");
		ЭтапСканированияЯчейки=0;
		НакопительСканированияЯчейки="";
	КонецЕсли;   	
КонецПроцедуры



&НаКлиенте
Функция ШтрихКодНакопленВерно(Параметр)
	МассивСтрок=Объект.ШтрихКодыЯчеекДокумента.НайтиСтроки(новый Структура("ШтрихКод",СокрЛП(ВРег(НакопительСканированияЯчейки+Параметр))));
	Если МассивСтрок.Количество()>0 тогда
		Параметр=СокрЛП(ВРег(НакопительСканированияЯчейки+Параметр));
		Возврат Истина;
	КонецЕсли;
	МассивСтрок=Объект.ШтрихКодыЯчеекДокумента.НайтиСтроки(новый Структура("ШтрихКод",СокрЛП(ВРег(НакопительСканированияЯчейки+"-"+Параметр))));
	Если  МассивСтрок.Количество()>0 тогда
		Параметр=СокрЛП(ВРег(НакопительСканированияЯчейки+"-"+Параметр));
		Возврат Истина;
	КонецЕсли;
	МассивСтрок=Объект.ШтрихКодыЯчеекДокумента.НайтиСтроки(новый Структура("ШтрихКод",СокрЛП(ВРег(Параметр+"-"+НакопительСканированияЯчейки))));
	
	Если  МассивСтрок.Количество()>0 тогда
		Параметр=СокрЛП(ВРег(Параметр+"-"+НакопительСканированияЯчейки));
		Возврат Истина;
	КонецЕсли;
	
	МассивСтрок=Объект.ШтрихКодыЯчеекДокумента.НайтиСтроки(новый Структура("ШтрихКод",СокрЛП(ВРег(Параметр+НакопительСканированияЯчейки))));
	Если  МассивСтрок.Количество()>0 тогда
		Параметр=СокрЛП(ВРег(Параметр+НакопительСканированияЯчейки));
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции
&НаСервере
Функция ЗавершитьДокументНаСервере()
	СтруктураДанных =новый Структура;
	СлужебныеФункцииИПроцедурыКлиентСервер.СформироватьСтруктуруДанныхОПользователе(СтруктураДанных);
    СтруктураДанных.Вставить("КлючПолученияДанных","");
	СтруктураДанных.Вставить("КлючИнициализацииДанных",ПолучитьЗадачуДокумента());
	СтруктураДанных.Вставить("ТипОбработкиДанных","ЗавершениеДокументаЗадачиИнвенторизации");
	СтруктураДанных.Вставить("ТипЗадачи",Объект.ТипЗадачи);
	СтруктураДанных=ОбработчикиЗапросаСервера.ЗапроситьДанные(СтруктураДанных,"Inventory");
	Если СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(СтруктураДанных,"Инициализация") тогда
		Возврат Ложь;
	КонецЕсли;
	МодульРаспределенияДанных.ОбработчикВходящихДанных(СтруктураДанных);
	Возврат СтруктураДанных.Инициализация;
    
КонецФункции
&НаСервере
Функция ПолучитьЗадачуДокумента()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИтЗадачиНаТСД.ИдЗадачи КАК ИдЗадачи
		|ИЗ
		|	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
		|ГДЕ
		|	ИтЗадачиНаТСД.ДокументОснование = &ДокументОснование
		|	И ИтЗадачиНаТСД.ТипЗадачи = &ТипЗадачи";
	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТипЗадачи", Объект.ТипЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		Возврат ВыборкаДетальныеЗаписи.ИдЗадачи;
		КонецЕсли;
	Возврат Неопределено;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	КонецФункции

#КонецОбласти




