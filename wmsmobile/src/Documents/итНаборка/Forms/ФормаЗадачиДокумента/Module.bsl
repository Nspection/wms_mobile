
#Область ОбработчикиСобытий
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если не Параметры.Свойство("ИдЗадачи") тогда
		Отказ=Истина;
		Возврат
	КонецЕсли;
	ИдЗадачи=Параметры.ИдЗадачи;
	//ПомарочныйУчет=ЗадачаПомарочногоУчета();
	ВидимостьДоступностьЭлементовСервер();
	ЗаполнитьДанныеЗадачи(Отказ);
	//УстановитьНачальноеСостояниеЗадачи();
	СписокВыбораПричнОтмены();
	
КонецПроцедуры
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбщийМодульКлиентскойЧасти.ПереопределенияТригераПолучениеШтрихКодаПриОткрытии(ЭтаФорма);
КонецПроцедуры
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	ОбщийМодульКлиентскойЧасти.ПереопределенияТригераПолучениеШтрихКодаПриЗакрытии(ЭтаФорма);
КонецПроцедуры
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия="ОбработчикШтрихКода"  и ТригерПриемаСканераШтрихКода тогда
		Если Параметр=404 и Источник="ОшибкаЧтения" тогда
			ОбщийМодульКлиентскойЧасти.СообщитьЧерезФорму("Штрих код некорректен");
			Возврат
		КонецЕсли;	
		ОбработчкаПолученияДанныхШтрихКода(Параметр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторУпаковкиПолучательОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ОткрытьФорму("ОбщаяФорма.ВыборПринтераДляПечати",новый Структура("ИдентификаторУпаковки",ИдентификаторУпаковкиПолучатель),ЭтаФорма);
	ТригерПриемаСканераШтрихКода=Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ЯчейкаПолучательПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Оповещение=новый ОписаниеОповещения("ЯчейкаПолучательПредставлениеОткрытиеОповещение",ЭтаФорма);
	ПоказатьВопрос(Оповещение,"Вы хотите заменить ячейку получатель (ячейку эстокады)?",РежимДиалогаВопрос.ДаНет);	
КонецПроцедуры	
&НаКлиенте
Процедура ЯчейкаПолучательПредставлениеОткрытиеОповещение(Результат,Параметры) Экспорт 
	Если Результат=КодВозвратаДиалога.Нет Тогда 
		Возврат
	КонецЕсли;
	ОткрытьФорму("ОбщаяФорма.СканированиеЯчейки",,ЭтаФорма);
	ТригерПриемаСканераШтрихКода=Ложь;
КонецПроцедуры
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы= "ОбщаяФорма.СканированиеЯчейки" тогда
		Если не ЗначениеЗаполнено(ВыбранноеЗначение.Ячейка) тогда
			Сообщить("Ячейка не выбрана, в изменении отказано");
		иначе
			ИзменитьЯчейкуПолучательНаСервере(ВыбранноеЗначение.Ячейка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура SSCCиЯчейкиДляНаборкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Данные=ТекущийЭлемент.ТекущиеДанные;
	Если Данные.РучноеОткрытие Тогда 
		ОбработкаСканированияSSCCОтправителя(Данные.ИдентификаторУпаковкиОтправитель);
	иначе
		МассивСтрок=ДанныеЗадачиХранилища.НайтиСтроки(новый Структура("ИдентификаторУпаковкиОтправитель,ЯчейкаПикинга",Данные.ИдентификаторУпаковкиОтправитель,Данные.ЯчейкаПикинга));
		МассивИдСтрокКПросмотру=новый Массив;
		Для Каждого стр из МассивСтрок  Цикл 
			МассивИдСтрокКПросмотру.Добавить(стр.идСтроки);
		КонецЦикла;
		ОткрытьФорму("Документ.итНаборка.Форма.ФормаСоставаSSCCОтправителя",новый Структура("МассивИдСтрокКПросмотру,ИдЗадачи",МассивИдСтрокКПросмотру,ИдЗадачи),ЭтаФорма);
		ТригерПриемаСканераШтрихКода=Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд
&НаКлиенте
Процедура Назад(Команда)
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьсяОтЗадачи(Команда)
	Оповещение=новый ОписаниеОповещения("ОтказатьсяОтЗадачиОповещение",ЭтаФорма);
	ПоказатьВопрос(Оповещение,"Вы точно хотите отказаться от Задачи",РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры
&НаКлиенте
Процедура ОтказатьсяОтЗадачиОповещение(Результат,Параметры) Экспорт 
	Если Результат=КодВозвратаДиалога.Нет тогда
		Возврат
	КонецЕсли;	
	Если ОтказатьсяОтЗадачиНаСервере() тогда
		ОбщийМодульКлиентскойЧасти.ОповещениеДинамическихСписковОткрытыхФорм();
		ЭтаФорма.Закрыть();
	иначе
		ОбщийМодульКлиентскойЧасти.СообщитьЧерезФорму("не удачная попытка отказа от задачи, попробуйте еще раз, или подойтиде к оператору");
	КонецЕсли;	
КонецПроцедуры
&НаСервере
Функция ОтказатьсяОтЗадачиНаСервере()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	СтруктураОтказаЗадачи= ПолучитьДанныеДляИнициализации();
	Возврат ОбработчикДанныхОбщиеФункцииИПроцедуры.ИнициализацияЗадачиНаСервере(СтруктураОтказаЗадачи,"ЗадачаОтказ",Перечисления.итWMSСостоянияЗадачТСД.КВыполнению);
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции

&НаКлиенте
Процедура ЗадачаНеМожетБытьВыполнена(Команда)
	Если ПричинаОтменыЗадачи.Пустая() Тогда 
		Сообщить("Заполните причину отмены задачи");
		Возврат
	КонецЕсли;	
	Если ЕстьНаличиеВыполненныхСтрок() Тогда 
		СтруктураПередачиДанных=новый Структура;
		СтруктураПередачиДанных.Вставить("ИдентификаторУпаковкиПолучатель",ИдентификаторУпаковкиПолучатель);
		СтруктураПередачиДанных.Вставить("ШтрихКодЯчейкиПолучатель",ШтрихКодЯчейкиПолучатель);
		СтруктураПередачиДанных.Вставить("ЯчейкаПолучатель",ЯчейкаПолучатель);
		СтруктураПередачиДанных.Вставить("ЯчейкаПолучательПредставление",ЯчейкаПолучательПредставление);
		ОткрытьФорму("Документ.итНаборка.Форма.ФормаЭкстренногоЗавершенияЗадачи",СтруктураПередачиДанных,ЭтаФорма);
		Возврат
	КонецЕсли;
	Оповещение =новый ОписаниеОповещения("ЗадачаНеМожетБытьВыполненаОповещение",ЭтаФорма);
	ПоказатьВопрос(Оповещение,"Задача будет отменена. Продолжить?",РежимДиалогаВопрос.ДаНет);
КонецПроцедуры
&НаКлиенте
Процедура ЗадачаНеМожетБытьВыполненаОповещение(Результат,Параметры) Экспорт 
	Если Результат = КодВозвратаДиалога.Нет Тогда 
		Возврат
	КонецЕсли;
	АварийноеЗавершениеЗадачи();	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаКлиенте
Процедура ОбработчкаПолученияДанныхШтрихКода(Параметр)
	//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"#НаборкаФормаЗадачи Сканирование");
	МассивСтрокSSCC= SSCCиЯчейкиДляНаборки.НайтиСтроки(новый Структура("ИдентификаторУпаковкиОтправитель",Параметр));
	Если МассивСтрокSSCC.Количество()=0 и Элементы.надписьЭтапа.Заголовок="Сканируйте SSCC отправитель" Тогда 
		Сообщить("Не верный SSCC");
		//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"#НаборкаФормаЗадачи Не верный SSCC");
	КонецЕсли;	
	Если МассивСтрокSSCC.Количество()=0 и Элементы.надписьЭтапа.Заголовок="Сканируйте ячейку отправитель" Тогда
		//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"#НаборкаФормаЗадачи +ОбработкаСкнированияЯчейкиПикинга");
		ОбработкаСкнированияЯчейкиПикинга(Параметр);
		//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"#НаборкаФормаЗадачи -ОбработкаСкнированияЯчейкиПикинга");
	КонецЕсли;
	Если МассивСтрокSSCC.Количество()>0 и не  Элементы.надписьЭтапа.Заголовок="Сканируйте собраный SSCC"   тогда
		//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"#НаборкаФормаЗадачи +ОбработкаСканированияSSCCОтправителя");
		Если не ОбработкаСканированияSSCCОтправителя(Параметр) Тогда 
			Возврат
		КонецЕсли;	
		//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"#НаборкаФормаЗадачи -ОбработкаСканированияSSCCОтправителя");
	КонецЕсли;
	Если Элементы.надписьЭтапа.Заголовок="Сканируйте собраный SSCC" Тогда
		Если Параметр = ИдентификаторУпаковкиПолучатель Тогда 
			Элементы.надписьЭтапа.Заголовок="Сканируйте ячейку эстокады";
			ЯчейкаОтправительПредставление="Отправляйтесь на эстокаду";
		иначе
			Сообщить("Не верный SSCC");
		КонецЕсли;
		Возврат
	КонецЕсли;
	Если МассивСтрокSSCC.Количество()=0 и Элементы.надписьЭтапа.Заголовок="Сканируйте ячейку эстокады"   тогда
		Если СокрЛП(НРег(Параметр))=СокрЛП(НРег(ШтрихКодЯчейкиПолучатель)) Тогда
			Если ЕстьРасхождения() тогда
				ОткрытьФорму("Документ.итНаборка.Форма.ФормаОповещенияПередЗавершением",новый Структура("ИдЗадачи",ИдЗадачи),ЭтаФорма);
			иначе
				ЗавершитьЗадачуНаборки();
				Возврат
			КонецЕсли;	
		ИначеЕсли ШтрихКодНакопленВерно(Параметр) тогда
			Если ЕстьРасхождения() тогда
				ОткрытьФорму("Документ.итНаборка.Форма.ФормаОповещенияПередЗавершением",новый Структура("ИдЗадачи",ИдЗадачи),ЭтаФорма);
			иначе
				ЗавершитьЗадачуНаборки();
				Возврат
			КонецЕсли;	
		ИначеЕсли  ЭтапСканированияЯчейки<1 тогда 
			ЭтапСканированияЯчейки=1;
			НакопительСканированияЯчейки=Параметр;
		иначе
			НакопительСканированияЯчейки="";
			ЭтапСканированияЯчейки=0;
			Сообщить("Не верное сканирование ячейки получатель");
		КонецЕсли;
	КонецЕсли;
	//Если Элементы.надписьЭтапа.Заголовок="Сканируйте собраный SSCC"  тогда
	//	Если Параметр = ИдентификаторУпаковкиПолучатель Тогда 
	//	Если  ИнициализацияФиксацииДанныхЗадачи() Тогда 
	//		ЭтаФорма.Закрыть();
	//	КонецЕсли;
	//иначе
	//	Сообщить("Не верный SSCC Получатель");
	//	КонецЕсли;
	//	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция  ОбработкаСканированияSSCCОтправителя(Знач Параметр)		
	МассивИдентификаторовСтрок = новый Массив;
	МассивДанныхХранилища=ДанныеЗадачиХранилища.НайтиСтроки(новый Структура("ИдентификаторУпаковкиОтправитель",Параметр));
	для Каждого стр из МассивДанныхХранилища цикл
		МассивИдентификаторовСтрок.Добавить(стр.идСтроки);
	КонецЦикла;
	Если Найти(НРег(Строка(Состояние)),НРег("К Выполнению")) тогда
		//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"#НаборкаФормаЗадачи +перевести на сервере в состояние выполняется");
		Если не ИнициализацияЗадачиНаСервере() тогда
			//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"#НаборкаФормаЗадачи -перевести на сервере в состояние выполняется-не удача");
			Возврат Ложь;
		КонецЕсли;	
		//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"#НаборкаФормаЗадачи -перевести на сервере в состояние выполняется");
		ИзменитьСостояниеЗадачиНаФорме();
	КонецЕсли;
	ОткрытьФорму("Документ.итНаборка.Форма.ФормаСтрокиЗадачи",новый Структура("МассивИдентификаторовСтрок,ИдЗадачи,"+
	"ИдентификаторУпаковкиОтправитель,ИдентификаторУпаковкиПолучатель",МассивИдентификаторовСтрок,ИдЗадачи,Параметр,ИдентификаторУпаковкиПолучатель),
	ЭтаФорма);
	ТригерПриемаСканераШтрихКода=Ложь;
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ОбработкаСкнированияЯчейкиПикинга(Знач Параметр)
	
	
	
	Ячейка=ШтрихЯчейкиПикингаКодНакопленВерно(Параметр);
	Если Ячейка=Неопределено Тогда 
		Если ЭтапСканированияЯчейки<1 Тогда 
			ЭтапСканированияЯчейки=1;
			НакопительСканированияЯчейки=Параметр;
		иначе
			ЭтапСканированияЯчейки=0;
			НакопительСканированияЯчейки="";
			Сообщить("Сканирование не верной ячейки");
		КонецЕсли;
	иначе
		ЭтапСканированияЯчейки=0;
		НакопительСканированияЯчейки="";
	КонецЕсли;	
	Для Каждого стр из  SSCCиЯчейкиДляНаборки Цикл 
		стр.РучноеОткрытие=Ложь;
	КонецЦикла;
	Если Ячейка=Неопределено Тогда 
		Возврат
	иначе
		Если Найти(НРег(Строка(Состояние)),НРег("К Выполнению")) тогда
			//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"#НаборкаФормаЗадачи +перевести на сервере в состояние выполняется");
			Если не ИнициализацияЗадачиНаСервере() тогда
				//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"#НаборкаФормаЗадачи -перевести на сервере в состояние выполняется-не удача");
				Возврат;
			КонецЕсли;	
			//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"#НаборкаФормаЗадачи -перевести на сервере в состояние выполняется");
			ИзменитьСостояниеЗадачиНаФорме();			
		КонецЕсли;
	КонецЕсли;

	СтрокиSSCCКОбработке=SSCCиЯчейкиДляНаборки.НайтиСтроки(новый Структура("ЯчейкаПикинга",Ячейка));
	Для Каждого стр из  СтрокиSSCCКОбработке Цикл 
		стр.РучноеОткрытие=Истина;
	КонецЦикла;
	
	
КонецПроцедуры
&НаКлиенте
Процедура ЗавершитьЗадачуНаборки() Экспорт 
	Если ПроверкаНаСменуСистемнойЯчейки() Тогда 
		Сообщить("Смените ячейку эстокады");
		Возврат
	КонецЕсли;
	//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"#НаборкаФормаЗадачи +Завершение задачи на сервере");
	Если  ИнициализацияФиксацииДанныхЗадачи() Тогда
		//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"#НаборкаФормаЗадачи -Завершение задачи на сервере");
		ОбщийМодульКлиентскойЧасти.ОповещениеДинамическихСписковОткрытыхФорм();
		ЭтаФорма.Закрыть();
	иначе
		//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"#НаборкаФормаЗадачи -Завершение задачи на сервере-не удача");
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Функция ШтрихКодНакопленВерно(Параметр)
	Если НРег(СокрЛП(НакопительСканированияЯчейки)+СокрЛП(Параметр))=НРег(СокрЛП(ШтрихКодЯчейкиПолучатель)) тогда
		Возврат Истина;
	ИначеЕсли  НРег(СокрЛП(НакопительСканированияЯчейки)+"-"+СокрЛП(Параметр))=НРег(СокрЛП(ШтрихКодЯчейкиПолучатель)) тогда
		Возврат Истина;
	ИначеЕсли НРег(СокрЛП(Параметр)+"-"+СокрЛП(НакопительСканированияЯчейки))=НРег(СокрЛП(ШтрихКодЯчейкиПолучатель)) тогда
		Возврат Истина;
	ИначеЕсли НРег(СокрЛП(Параметр)+СокрЛП(НакопительСканированияЯчейки))=НРег(СокрЛП(ШтрихКодЯчейкиПолучатель)) тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция ШтрихЯчейкиПикингаКодНакопленВерно(Параметр)
	Ячейка=Неопределено;
	Ячейка=ЯчейкаПоШтрихКоду(СокрЛП(НакопительСканированияЯчейки)+СокрЛП(Параметр));
	Если Ячейка=Неопределено тогда
		Ячейка=	ЯчейкаПоШтрихКоду(СокрЛП(НакопительСканированияЯчейки)+"-"+СокрЛП(Параметр));
	КонецЕсли;	
	Если Ячейка=Неопределено тогда
		Ячейка=	ЯчейкаПоШтрихКоду(СокрЛП(Параметр)+"-"+СокрЛП(НакопительСканированияЯчейки));
	КонецЕсли;
	Если Ячейка=Неопределено тогда
		Ячейка=	ЯчейкаПоШтрихКоду(СокрЛП(Параметр)+СокрЛП(НакопительСканированияЯчейки));
	КонецЕсли;
	Возврат Ячейка;
КонецФункции


&НаСервере
Процедура ВидимостьДоступностьЭлементовСервер()
	Если Объект.РозничныйПризнак Тогда 
		Элементы.надписьЭтапа.Заголовок="Сканируйте ячейку отправитель";
	КонецЕсли;	
КонецПроцедуры
&НаСервере
Процедура ЗаполнитьДанныеЗадачи(Отказ)
	РезультатЗапроса=ЧтениеДанныхЗадачи();
	Если РезультатЗапроса.Пустой() Тогда
		Отказ = Истина;
		Сообщить("Задача была удалена с ТСД");
		Возврат
	КонецЕсли;	
	ВыборкаЗадача = РезультатЗапроса.Выбрать();
	ЗаполнитьШапкуЗадачи(ВыборкаЗадача,Отказ);
	//ЗаполнитьSSCCиЯчейкиДляНаборки(ВыборкаСтрокЗадачи,Отказ);
КонецПроцедуры
&НаСервере
Функция ЧтениеДанныхЗадачи()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИтЗадачиНаТСД.ДокументОснование КАК ДокументОснование,
	|	ИтЗадачиНаТСД.ТипЗадачи КАК ТипЗадачи,
	|	ИтЗадачиНаТСД.ИдЗадачи КАК ИдЗадачи,
	|	ИтЗадачиНаТСД.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ИтЗадачиНаТСД.ЯчейкаОтправитель КАК ЯчейкаОтправитель,
	|	ИтЗадачиНаТСД.ЯчейкаОтправительПредставление КАК ЯчейкаОтправительПредставление,
	|	ИтЗадачиНаТСД.ЯчейкаПолучатель КАК ЯчейкаПолучатель,
	|	ИтЗадачиНаТСД.ЯчейкаПолучательПредставление КАК ЯчейкаПолучательПредставление,
	|	ИтЗадачиНаТСД.ДополнительныеДанные КАК ДополнительныеДанные,
	|	ИтЗадачиНаТСД.Состояние КАК Состояние,
	|	ИтЗадачиНаТСД.ДанныеДокументаТСД КАК ДанныеДокументаТСД,
	|	итНаборкаШтрихКодыЯчеекДокумента.ШтрихКод КАК ШтрихКодЯчейкиПолучатель
	|ИЗ
	|	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.итНаборка.ШтрихКодыЯчеекДокумента КАК итНаборкаШтрихКодыЯчеекДокумента
	|		ПО ИтЗадачиНаТСД.ДокументОснование = итНаборкаШтрихКодыЯчеекДокумента.Ссылка
	|			И ИтЗадачиНаТСД.ЯчейкаПолучатель = итНаборкаШтрихКодыЯчеекДокумента.Ячейка
	|ГДЕ
	|	ИтЗадачиНаТСД.ИдЗадачи = &ИдЗадачи";
	
	Запрос.УстановитьПараметр("ИдЗадачи", ИдЗадачи);
	
	МассивРезультатов = Запрос.Выполнить();
	
	Возврат МассивРезультатов;	
КонецФункции

&НаСервере	
Процедура ЗаполнитьШапкуЗадачи(ВыборкаЗадача,Отказ)
	Если  ВыборкаЗадача.Следующий() тогда
		ДанныеХранилищаЗадачи= ВыборкаЗадача.ДополнительныеДанные.Получить();
		Если ТипЗнч(ДанныеХранилищаЗадачи)<> тип("Структура") тогда
			Отказ=Истина;
			Сообщить("Неверный формат данных");
			Возврат
		КонецЕсли;
		ЯчейкаОтправитель=ВыборкаЗадача.ЯчейкаОтправитель;
		ЯчейкаОтправительПредставление = ВыборкаЗадача.ЯчейкаОтправительПредставление;
		ЯчейкаПолучатель = ВыборкаЗадача.ЯчейкаПолучатель;
		ЯчейкаПолучательПредставление = ВыборкаЗадача.ЯчейкаПолучательПредставление;
		ИдентификаторУпаковкиПолучатель=ВыборкаЗадача.ИдентификаторУпаковки;
		Состояние=ВыборкаЗадача.Состояние;
		Если ВыборкаЗадача.ШтрихКодЯчейкиПолучатель<>null Тогда 
			//Сообщить("откажитесь от задачи , т.к шк ячейки задан не верно");
			//иначе
			ШтрихКодЯчейкиПолучатель=ВыборкаЗадача.ШтрихКодЯчейкиПолучатель;
		КонецЕсли;
		ДанныеДокументаТСД = ВыборкаЗадача.ДанныеДокументаТСД.Получить();
		Если ТипЗнч(ДанныеДокументаТСД) = тип("Структура") тогда
			ЗаполнитьЗначенияСвойств(ЭтаФорма,ДанныеДокументаТСД); 
		КонецЕсли;
		Если не ДанныеХранилищаЗадачи.Свойство("ТаблицаДляГруппировкиДанных") Тогда 
			Отказ=Истина;
			Сообщить("Неверный формат данных");
			Возврат
		КонецЕсли;
		ДанныеЗадачиХранилища.Загрузить(ДанныеХранилищаЗадачи.ТаблицаДляГруппировкиДанных);
		ЗаполнитьSSCCиЯчейкиДляНаборки(Отказ);
		ОпределитьОчереднойSSCCДляОбходаИлиСменитьЭтап();
	КонецЕсли;
КонецПроцедуры
&НаСервере
Процедура ОпределитьОчереднойSSCCДляОбходаИлиСменитьЭтап()
	для Каждого стр из SSCCиЯчейкиДляНаборки цикл
		Если не стр.Обработан тогда
			ЯчейкаОтправительПредставление=стр.ЯчейкаПикингаПредставление;
			Возврат
		КонецЕсли;
	КонецЦикла;
	Элементы.надписьЭтапа.Заголовок="Сканируйте собраный SSCC";
	ЯчейкаОтправительПредставление="----------";
КонецПроцедуры
&НаСервере
Процедура ЗаполнитьSSCCиЯчейкиДляНаборки(Отказ)
	ТаблицаГруппировкиДанных=ДанныеЗадачиХранилища.Выгрузить();
	ТаблицаГруппировкиДанных.Свернуть("ИдентификаторУпаковкиОтправитель,ЯчейкаПикинга,ЯчейкаПикингаПредставление,ПорядокОбходаПаллеты");
	ТаблицаГруппировкиДанных.Сортировать("ПорядокОбходаПаллеты Возр,ЯчейкаПикингаПредставление Возр");
	SSCCиЯчейкиДляНаборки.Очистить();
	для Каждого стр из ТаблицаГруппировкиДанных цикл
		СтруктураДанныхПаллеты= ПаллетОбработан(стр.ИдентификаторУпаковкиОтправитель);
		Если СтруктураДанныхПаллеты.Обработан и не СтруктураДанныхПаллеты.ОбработанСОшибкой  тогда
			Продолжить;
		КонецЕсли;	
		НоваяСтрока=SSCCиЯчейкиДляНаборки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,стр);
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураДанныхПаллеты);
	КонецЦикла;
	
	//НомерПоПорядку=1;
	//ТаблицаЗначений=SSCCиЯчейкиДляНаборки.Выгрузить();
	//для каждого Строка из  ВыборкаСтрокЗадачи цикл
	//	НоваяСтрока=ТаблицаЗначений.Добавить();
	//	ДанныеХранилищаЗадачи= Строка.ДополнительныеДанные.Получить();
	//	Если ТипЗнч(ДанныеХранилищаЗадачи)<> тип("Структура") тогда
	//		Отказ=Истина;
	//		Сообщить("Неверный формат данных");
	//		Возврат
	//	КонецЕсли;
	//	ЗаполнитьЗначенияСвойств(НоваяСтрока,ДанныеХранилищаЗадачи);
	//КонецЦикла;
	//ТаблицаЗначений.Свернуть("ИдентификаторУпаковкиОтправитель,ЯчейкаПикинга,ЯчейкаПикингаПредставление");
	//для Каждого стр из ТаблицаЗначений Цикл 
	//	стр.НомерСтрокиПоПорядку=НомерПоПорядку;
	//	НомерПоПорядку=НомерПоПорядку+1;
	//КонецЦикла;
	//SSCCиЯчейкиДляНаборки.Загрузить(ТаблицаЗначений);
КонецПроцедуры
&НаСервере
Функция ПаллетОбработан(ИдентификаторУпаковкиОтправитель)
	МассивСтрок=ДанныеЗадачиХранилища.НайтиСтроки(новый Структура("ИдентификаторУпаковкиОтправитель",ИдентификаторУпаковкиОтправитель));
	МассивИдСтрок=новый Массив;
	для Каждого стр из МассивСтрок цикл
		МассивИдСтрок.Добавить(стр.идСтроки);
	КонецЦикла;
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИтСтрокиЗадачНаТСД.ИдЗадачи КАК ИдЗадачи,
	|	ИтСтрокиЗадачНаТСД.ИдСтроки КАК ИдСтроки,
	|	ИтСтрокиЗадачНаТСД.Номенклатура КАК Номенклатура,
	|	ИтСтрокиЗадачНаТСД.НоменклатураПредставление КАК НоменклатураПредставление,
	|	ИтСтрокиЗадачНаТСД.ДатаРозлива КАК ДатаРозлива,
	|	ИтСтрокиЗадачНаТСД.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ИтСтрокиЗадачНаТСД.СерияНоменклатурыПредставление КАК СерияНоменклатурыПредставление,
	|	ИтСтрокиЗадачНаТСД.Количество КАК Количество,
	|	ИтСтрокиЗадачНаТСД.ДополнительныеДанные КАК ДополнительныеДанные,
	|	ИтСтрокиЗадачНаТСД.ДанныеДокументаТСД КАК ДанныеДокументаТСД
	|ИЗ
	|	РегистрСведений.ИтСтрокиЗадачНаТСД КАК ИтСтрокиЗадачНаТСД
	|ГДЕ
	|	ИтСтрокиЗадачНаТСД.ИдЗадачи = &ИдЗадачи
	|	И ИтСтрокиЗадачНаТСД.ИдСтроки В(&ИдСтроки)";
	
	Запрос.УстановитьПараметр("ИдЗадачи", ИдЗадачи);
	Запрос.УстановитьПараметр("ИдСтроки", МассивИдСтрок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Обработан=Истина;
	ОбработанСОшибкой = Ложь;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДанныеДокументаТСД=ВыборкаДетальныеЗаписи.ДанныеДокументаТСД.Получить();
		Если ТипЗнч(ДанныеДокументаТСД) = Тип("Структура") тогда
			
			Если не ДанныеДокументаТСД.Свойство("КоличествоФакт")  Тогда 
				Обработан=Ложь;
			КонецЕсли;
			Если ДанныеДокументаТСД.Свойство("КоличествоФакт") Тогда
				Если ДанныеДокументаТСД.КоличествоФакт<>ВыборкаДетальныеЗаписи.Количество тогда
					ОбработанСОшибкой=Истина;
				КонецЕсли;
			КонецЕсли;
		иначе
			Обработан=Ложь;
		КонецЕсли;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	Возврат новый Структура("Обработан,ОбработанСОшибкой",Обработан,ОбработанСОшибкой);
КонецФункции

&НаСервере
Функция ПолучитьДанныеДляИнициализации()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИтЗадачиНаТСД.ИдЗадачи КАК ИдЗадачи,
	|	ИтЗадачиНаТСД.ТипЗадачи КАК ТипЗадачи,
	|	ИтЗадачиНаТСД.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
	|ГДЕ
	|	ИтЗадачиНаТСД.ИдЗадачи = &ИдЗадачи";
	
	Запрос.УстановитьПараметр("ИдЗадачи",ИдЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	СтруктураДанных=новый Структура;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		для Каждого Колонка из РезультатЗапроса.Колонки цикл
			СтруктураДанных.Вставить(Колонка.Имя,ВыборкаДетальныеЗаписи[Колонка.Имя]);
		КонецЦикла;
	КонецЦикла;
	Возврат СтруктураДанных;
КонецФункции
&НаКлиенте
Процедура ОбработкаОбновленияДанных()Экспорт 
	Отказ=ложь;
	ЗаполнитьSSCCиЯчейкиДляНаборки(Отказ);
	ОпределитьОчереднойSSCCДляОбходаИлиСменитьЭтап();
КонецПроцедуры
&НаСервере
Функция ИнициализацияЗадачиНаСервере()
	СтруктураДанных= ПолучитьДанныеДляИнициализации();
	Возврат ОбработчикДанныхОбщиеФункцииИПроцедуры.ИнициализацияЗадачиНаСервере(СтруктураДанных,"Задача",Перечисления.итWMSСостоянияЗадачТСД.Выполняется);
КонецФункции
&НаСервере
Функция ИнициализацияФиксацииДанныхЗадачи()
	СтруктураДанных = ПолучитьДанныеДляИнициализации();
	СтруктураДанных.Вставить("ФиксацияЗадачи",Истина);
	СтруктураИнициализации=СлужебныеФункцииИПроцедурыКлиентСервер.СформироватьСтруктуруИнициализацииДанных(СтруктураДанных,"Задача",Перечисления.итWMSСостоянияЗадачТСД.Выполнена);
	СтруктураИнициализации.Вставить("ТипОбработкиДанных","ЗаписьДанныхТСД");
	СтруктураИнициализации.Вставить("СтрокиЗадачи",ПолучитьСтрокиЗадачиДляФиксации());
	СтруктураИнициализации.Вставить("ИдентификаторУпаковкиПолучатель",ИдентификаторУпаковкиПолучатель);
	Если ЗадачаПомарочногоУчета() Тогда
		Если ЕстьНеобходимостьПереупаковать(СтруктураИнициализации.СтрокиЗадачи) Тогда 
			СтруктураИнициализации.Вставить("ДанныеАгрегации",ПолучитьДанныеАгрегацииПомарочногоУчета());
		КонецЕсли;
	КонецЕсли;
	СтруктураИнициализации=ОбработчикиЗапросаСервера.ЗапроситьДанные(СтруктураИнициализации,"Dial");
	Если СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(СтруктураИнициализации,"Инициализация") тогда
		Возврат Ложь;
	КонецЕсли;	
	МодульРаспределенияДанных.ОбработчикВходящихДанных(СтруктураИнициализации);
	Возврат СтруктураИнициализации.Инициализация;
КонецФункции
&НаСервере
Функция ПолучитьСтрокиЗадачиДляФиксации()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИтСтрокиЗадачНаТСД.ИдСтроки КАК ИдСтроки,
	|	ИтСтрокиЗадачНаТСД.Номенклатура КАК Номенклатура,
	|	ИтСтрокиЗадачНаТСД.НоменклатураПредставление КАК НоменклатураПредставление,
	|	ИтСтрокиЗадачНаТСД.ДатаРозлива КАК ДатаРозлива,
	|	ИтСтрокиЗадачНаТСД.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ИтСтрокиЗадачНаТСД.СерияНоменклатурыПредставление КАК СерияНоменклатурыПредставление,
	|	ИтСтрокиЗадачНаТСД.Количество КАК Количество,
	|	ИтСтрокиЗадачНаТСД.ДанныеДокументаТСД КАК ДанныеДокументаТСД,
	|	ИтСтрокиЗадачНаТСД.ДополнительныеДанные КАК ДополнительныеДанные
	|ИЗ
	|	РегистрСведений.ИтСтрокиЗадачНаТСД КАК ИтСтрокиЗадачНаТСД
	|ГДЕ
	|	ИтСтрокиЗадачНаТСД.ИдЗадачи = &ИдЗадачи";
	
	Запрос.УстановитьПараметр("ИдЗадачи", ИдЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	РезультатЗапроса.Колонки.Добавить("КоличествоФакт");
	РезультатЗапроса.Колонки.Добавить("Отмена");
	РезультатЗапроса.Колонки.Добавить("ПричинаОтменыЗадачи");
	для Каждого стр из РезультатЗапроса цикл
		ДанныеДокументаТСД=стр.ДанныеДокументаТСД.Получить();
		Если ТипЗнч(ДанныеДокументаТСД)=Тип("Структура") Тогда 
			Если ДанныеДокументаТСД.Свойство("КоличествоФакт") тогда
				стр.КоличествоФакт= ДанныеДокументаТСД.КоличествоФакт;
			иначе
				стр.КоличествоФакт= 0;
			КонецЕсли;
			Если ДанныеДокументаТСД.Свойство("Отмена") тогда
				стр.Отмена= ДанныеДокументаТСД.Отмена;
			иначе
				стр.Отмена= Ложь;
			КонецЕсли;
			Если ДанныеДокументаТСД.Свойство("ПричинаОтменыЗадачи") тогда
				стр.ПричинаОтменыЗадачи= ДанныеДокументаТСД.ПричинаОтменыЗадачи;
			иначе
				стр.ПричинаОтменыЗадачи=Неопределено;
			КонецЕсли;	
		иначе
			стр.КоличествоФакт= 0;
			стр.Отмена= Ложь;
			стр.ПричинаОтменыЗадачи=Неопределено;
		КонецЕсли;
		ДополнительныеДанные=стр.ДополнительныеДанные.Получить();
		Если ТипЗнч(ДополнительныеДанные) = тип("Структура") тогда
			Если ДополнительныеДанные.Свойство("ПомарочныйУчет")  Тогда 
				Если  ДополнительныеДанные.ПомарочныйУчет  Тогда 
					стр.КоличествоФакт=ПолучитьКоличествоОтсканированныхМарокТекущейПродукции(стр.Номенклатура,стр.СерияНоменклатуры,ДополнительныеДанные.ИдентификаторУпаковкиОтправитель)
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	РезультатЗапроса.Колонки.Удалить("ДанныеДокументаТСД");
	РезультатЗапроса.Колонки.Удалить("ДополнительныеДанные");
	Возврат РезультатЗапроса;
КонецФункции
&НаСервере
функция ЕстьРасхождения()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИтСтрокиЗадачНаТСД.ИдЗадачи КАК ИдЗадачи,
	|	ИтСтрокиЗадачНаТСД.ИдСтроки КАК ИдСтроки,
	|	ИтСтрокиЗадачНаТСД.Номенклатура КАК Номенклатура,
	|	ИтСтрокиЗадачНаТСД.НоменклатураПредставление КАК НоменклатураПредставление,
	|	ИтСтрокиЗадачНаТСД.ДатаРозлива КАК ДатаРозлива,
	|	ИтСтрокиЗадачНаТСД.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ИтСтрокиЗадачНаТСД.СерияНоменклатурыПредставление КАК СерияНоменклатурыПредставление,
	|	ИтСтрокиЗадачНаТСД.Количество КАК Количество,
	|	ИтСтрокиЗадачНаТСД.ДополнительныеДанные КАК ДополнительныеДанные,
	|	ИтСтрокиЗадачНаТСД.ДанныеДокументаТСД КАК ДанныеДокументаТСД
	|ИЗ
	|	РегистрСведений.ИтСтрокиЗадачНаТСД КАК ИтСтрокиЗадачНаТСД
	|ГДЕ
	|	ИтСтрокиЗадачНаТСД.ИдЗадачи = &ИдЗадачи";
	
	Запрос.УстановитьПараметр("ИдЗадачи", ИдЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДанныеДокументаТСД=ВыборкаДетальныеЗаписи.ДанныеДокументаТСД.Получить();
		
		Если ТипЗнч(ДанныеДокументаТСД)=тип("Структура") тогда
			Если ДанныеДокументаТСД.Свойство("КоличествоФакт") Тогда
				Если ВыборкаДетальныеЗаписи.Количество<>ДанныеДокументаТСД.КоличествоФакт тогда
					Возврат Истина;
				КонецЕсли;	
			иначе
				Возврат Истина;
			КонецЕсли;	
		иначе
			Возврат Истина;
		КонецЕсли;	
	КонецЦикла;
	Возврат Ложь;	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции

&НаСервере
Процедура СписокВыбораПричнОтмены()
	МассивСпискаВыбора=ПолучитьСписокВыбораПричнОтмены();
	для Каждого стр из МассивСпискаВыбора цикл
		Элементы.ПричинаОтменыЗадачи.СписокВыбора.Добавить(стр);
	КонецЦикла;
КонецПроцедуры
&НаСервере
Функция ПолучитьСписокВыбораПричнОтмены()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMS_ПричиныОтменыЗадач.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.итWMS_ПричиныОтменыЗадач КАК итWMS_ПричиныОтменыЗадач";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса.ВыгрузитьКолонку("Ссылка");
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции
&НаСервере
Функция ЕстьНаличиеВыполненныхСтрок()
	ТаблицаСтрок=ПолучитьСтрокиЗадачиДляФиксации();
	ЕстьВыполненныеСтроки=Ложь;
	Для Каждого стр из ТаблицаСтрок цикл
		Если стр.КоличествоФакт>0 Тогда 
			ЕстьВыполненныеСтроки=Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	Возврат ЕстьВыполненныеСтроки;
КонецФункции
&НаКлиенте
Процедура АварийноеЗавершениеЗадачи() Экспорт 
	АварийноеЗавершениеЗадачиСервер();
	Если  ИнициализацияФиксацииДанныхЗадачи() Тогда 
		ЭтаФорма.Закрыть();
	КонецЕсли;
КонецПроцедуры
&НаСервере
Процедура АварийноеЗавершениеЗадачиСервер()
	ТаблицаСтрок=ПолучитьСтрокиЗадачиДляФиксации();
	Для Каждого стр из ТаблицаСтрок цикл
		Если стр.КоличествоФакт=0 Тогда 
			НаборЗаписей=РегистрыСведений.ИтСтрокиЗадачНаТСД.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ИдЗадачи.Установить(ИдЗадачи);
			НаборЗаписей.Отбор.ИдСтроки.Установить(стр.ИдСтроки);
			НаборЗаписей.Прочитать();
			Для Каждого Запись из НаборЗаписей Цикл
				ДанныеДокументаТСД=Запись.ДанныеДокументаТСД.Получить();
				Если  ТипЗнч(ДанныеДокументаТСД)=Тип("Структура") Тогда 
					ДанныеДокументаТСД.Вставить("Отмена",Истина);
					ДанныеДокументаТСД.Вставить("ПричинаОтменыЗадачи",ПричинаОтменыЗадачи);
				иначе
					ДанныеДокументаТСД=новый Структура;
					ДанныеДокументаТСД.Вставить("Отмена",Истина);
					ДанныеДокументаТСД.Вставить("ПричинаОтменыЗадачи",ПричинаОтменыЗадачи);
				КонецЕсли;
				Запись.ДанныеДокументаТСД=новый ХранилищеЗначения(ДанныеДокументаТСД);
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
&НаСервере		
Функция ПолучитьКоличествоОтсканированныхМарокТекущейПродукции(Номенклатура,СерияНоменклатуры,ИдентификаторУпаковкиОтправитель)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ итДанныеПомарочногоУчета.Марка) КАК Марка,
	|	итДанныеПомарочногоУчета.Ключ КАК Ключ
	|ИЗ
	|	РегистрСведений.итДанныеПомарочногоУчета КАК итДанныеПомарочногоУчета
	|ГДЕ
	|	итДанныеПомарочногоУчета.Ключ = &Ключ
	|	И итДанныеПомарочногоУчета.Номенклатура = &Номенклатура
	|	И итДанныеПомарочногоУчета.СерияНоменклатуры = &СерияНоменклатуры
	|	И итДанныеПомарочногоУчета.ПризнакОбработки = ИСТИНА
	|	И итДанныеПомарочногоУчета.SSCC = &SSCC
	|
	|СГРУППИРОВАТЬ ПО
	|	итДанныеПомарочногоУчета.Ключ";
	
	Запрос.УстановитьПараметр("Ключ", ИдЗадачи);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("СерияНоменклатуры", СерияНоменклатуры);
	Запрос.УстановитьПараметр("SSCC",ИдентификаторУпаковкиОтправитель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Возврат   ВыборкаДетальныеЗаписи.Марка;
	КонецЕсли;
	Возврат 0;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции
&НаСервере
Функция ЗадачаПомарочногоУчета()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	итДанныеПомарочногоУчета.Марка КАК Марка
	|ИЗ
	|	РегистрСведений.итДанныеПомарочногоУчета КАК итДанныеПомарочногоУчета
	|ГДЕ
	|	итДанныеПомарочногоУчета.Ключ = &Ключ
	|
	|СГРУППИРОВАТЬ ПО
	|	итДанныеПомарочногоУчета.Марка";
	
	Запрос.УстановитьПараметр("Ключ", ИдЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции
&НаСервере
Функция ПолучитьДанныеАгрегацииПомарочногоУчета()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итДанныеПомарочногоУчета.Марка КАК Марка,
	|	итДанныеПомарочногоУчета.Ключ КАК Ключ,
	|	итДанныеПомарочногоУчета.SSCC КАК SSCC,
	|	итДанныеПомарочногоУчета.GTIN КАК GTIN,
	|	итДанныеПомарочногоУчета.Номенклатура КАК Номенклатура,
	|	итДанныеПомарочногоУчета.СерияНоменклатуры КАК СерияНоменклатуры,
	|	итДанныеПомарочногоУчета.ДатаРозлива КАК ДатаРозлива
	|ИЗ
	|	РегистрСведений.итДанныеПомарочногоУчета КАК итДанныеПомарочногоУчета
	|ГДЕ
	|	итДанныеПомарочногоУчета.Ключ = &Ключ
	|	И итДанныеПомарочногоУчета.ПризнакОбработки = ИСТИНА";
	
	Запрос.УстановитьПараметр("Ключ", ИдЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции

&НаСервере	
Функция ЕстьНеобходимостьПереупаковать(ТаблицаРезультата)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИтЗадачиНаТСД.ДополнительныеДанные КАК ДополнительныеДанные
	|ИЗ
	|	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
	|ГДЕ
	|	ИтЗадачиНаТСД.ИдЗадачи = &ИдЗадачи
	|	И ИтЗадачиНаТСД.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	Запрос.УстановитьПараметр("ИдЗадачи", ИдЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ДвижениеЦелойПаллеты=Ложь;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДополнительныеДанные=ВыборкаДетальныеЗаписи.ДополнительныеДанные.Получить();
		Если  ТипЗнч(ДополнительныеДанные)=Тип("Структура") Тогда 
			Если ДополнительныеДанные.Свойство("ДвижениеЦелойПаллеты") Тогда 
				ДвижениеЦелойПаллеты=ДополнительныеДанные.ДвижениеЦелойПаллеты;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	Если не ДвижениеЦелойПаллеты Тогда 
		Возврат Истина;
	КонецЕсли;
	СоотвПланФакт=Истина;
	Для Каждого стр из ТаблицаРезультата цикл
		Если стр.Количество <> стр.КоличествоФакт Тогда 
			СоотвПланФакт=Ложь;
		КонецЕсли;	 
	КонецЦикла;
	
	Если не СоотвПланФакт Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;	
КонецФункции
&НаСервере		
Процедура ИзменитьЯчейкуПолучательНаСервере(ЯчейкаИзменения)
	//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"#НаборкаФормаЗадачи Изменение ячейки на сервере");
	СтруктураДанных =новый Структура;
	СлужебныеФункцииИПроцедурыКлиентСервер.СформироватьСтруктуруДанныхОПользователе(СтруктураДанных);
	СтруктураДанных.Вставить("ТипОбработкиДанных","ИзменениеЯчейкиПолучателяЗадачи");
	СтруктураДанных.Вставить("КлючИнициализацииДанных",ИдЗадачи);
	СтруктураДанных.Вставить("ЯчейкаПолучатель",ЯчейкаИзменения);
	СтруктураДанных=ОбработчикиЗапросаСервера.ЗапроситьДанные(СтруктураДанных,"Dial");
	Если СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(СтруктураДанных,"ШтрихКодЯчейки") тогда
		Возврат;
	КонецЕсли;
	//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"#НаборкаФормаЗадачи Изменение ячейки на сервере получены данные");
	МодульРаспределенияДанных.ОбработчикВходящихДанных(СтруктураДанных);	
	УстановитьЯчейкуПолучательЗадачи();
	ОбъектИзменения=Объект.Ссылка.ПолучитьОбъект();
	НоваяСтрока=ОбъектИзменения.ШтрихКодыЯчеекДокумента.Добавить();
	НоваяСтрока.ШтрихКод=СтруктураДанных.ШтрихКодЯчейки;
	НоваяСтрока.Ячейка=ЯчейкаИзменения;
	ОбъектИзменения.Записать();
	ЗначениеВРеквизитФормы(ОбъектИзменения,"Объект");
	ШтрихКодЯчейкиПолучатель=СтруктураДанных.ШтрихКодЯчейки;
	//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"#НаборкаФормаЗадачи Изменение ячейки на сервере данные внесены в документ ТСД");
КонецПроцедуры
&НаСервере	
Процедура  УстановитьЯчейкуПолучательЗадачи()	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИтЗадачиНаТСД.ЯчейкаПолучатель КАК ЯчейкаПолучатель,
	|	ИтЗадачиНаТСД.ЯчейкаПолучательПредставление КАК ЯчейкаПолучательПредставление
	|ИЗ
	|	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
	|ГДЕ
	|	ИтЗадачиНаТСД.ИдЗадачи = &ИдЗадачи";
	
	Запрос.УстановитьПараметр("ИдЗадачи", ИдЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЯчейкаПолучатель=ВыборкаДетальныеЗаписи.ЯчейкаПолучатель;
		ЯчейкаПолучательПредставление=ВыборкаДетальныеЗаписи.ЯчейкаПолучательПредставление;
	КонецЦикла;	
КонецПроцедуры
&НаСервере	
Функция ПроверкаНаСменуСистемнойЯчейки()
	Ошибка=Ложь;
	Менеджер=РегистрыСведений.ИтЗадачиНаТСД.СоздатьМенеджерЗаписи();
	Менеджер.ИдЗадачи=ИдЗадачи;
	Менеджер.ДокументОснование=Объект.Ссылка;
	Менеджер.ТипЗадачи=Объект.ТипЗадачи;
	Менеджер.Прочитать();
	ДополнительныеДанные=Менеджер.ДополнительныеДанные.Получить();
	Если ТипЗнч(ДополнительныеДанные)=Тип("Структура") Тогда 
		Если  ДополнительныеДанные.Свойство("СистемнаяЯчейка") Тогда
			Если Менеджер.ЯчейкаПолучатель=ДополнительныеДанные.СистемнаяЯчейка Тогда 
				Ошибка=Истина;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	Возврат Ошибка;
КонецФункции
&НаСервере
Процедура ИзменитьСостояниеЗадачиНаФорме() 
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИтЗадачиНаТСД.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
		|ГДЕ
		|	ИтЗадачиНаТСД.ИдЗадачи = &ИдЗадачи
		|
		|СГРУППИРОВАТЬ ПО
		|	ИтЗадачиНаТСД.Состояние";
	
	Запрос.УстановитьПараметр("ИдЗадачи", ИдЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Состояние=ВыборкаДетальныеЗаписи.Состояние;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	КонецПроцедуры

Функция ЯчейкаПоШтрихКоду(ШкЯчейки)
	Для Каждого стр из Объект.ШтрихКодыЯчеекДокумента Цикл 
		Если НРег(ШкЯчейки)=НРег(стр.ШтрихКод) Тогда 
			Возврат стр.Ячейка;
		КонецЕсли;	
	КонецЦикла;
	Возврат Неопределено;
КонецФункции
#КонецОбласти





