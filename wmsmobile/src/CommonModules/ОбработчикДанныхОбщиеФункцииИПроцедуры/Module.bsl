////////// Необходимо перевести все ядро обмена данными , на 2 версию обработчика задач
#Область ОбработчикЗадачВ1

//Процедура ОбработчикСозданиеИзменениеУдалениеЗадач(Задача,ДокументТСД,ТипЗадачи,АдресХраненияДанных,ЗапроситьДанныеМарок=Ложь) Экспорт
//	Если НРег(Задача.Действие)=НРег("Удаление") тогда
//		УдалениеЗадачи(Задача,АдресХраненияДанных);
//	ИначеЕсли НРег(Задача.Действие)=НРег("НоваяЗапись_Изменение") тогда 
//		СозданиеИзменениеЗадачи(Задача,ДокументТСД,ТипЗадачи,АдресХраненияДанных,ЗапроситьДанныеМарок);
//	КонецЕсли;
//КонецПроцедуры

//Процедура СозданиеИзменениеЗадачи(Задача,ДокументТСД,ТипЗадачи,АдресХраненияДанных,ЗапроситьДанныеМарок)
//	ИдентификаторНовойЗадачи="";
//	НаборЗаписейИтЗадачиНаТСД=РегистрыСведений.ИтЗадачиНаТСД.СоздатьНаборЗаписей();
//	НаборЗаписейИтЗадачиНаТСД.Отбор.ИдЗадачи.Установить(Задача.ИдЗадачи) ;
//	НаборЗаписейИтЗадачиНаТСД.Прочитать();
//	Если НаборЗаписейИтЗадачиНаТСД.Количество()>0 тогда
//		для Каждого Запись из НаборЗаписейИтЗадачиНаТСД цикл
//			ЗаполнитьЗначенияСвойств(Запись,Задача);
//			Запись.ДополнительныеДанные= новый ХранилищеЗначения(Задача.ДополнительныеДанные);
//			Запись.ДокументОснование=ДокументТСД;
//			Запись.ТипЗадачи=ТипЗадачи;
//			ЗаписьСтрокЗадачи(Задача);
//		КонецЦикла;
//	иначе
//		НоваяЗадача= НаборЗаписейИтЗадачиНаТСД.Добавить();
//		ЗаполнитьЗначенияСвойств(НоваяЗадача,Задача);
//		///Блок помарочного учета
//		Если ЗапроситьДанныеМарок Тогда 
//		КонецЕсли;	
//		//
//		НоваяЗадача.ДополнительныеДанные=новый ХранилищеЗначения(Задача.ДополнительныеДанные);			
//		НоваяЗадача.ДокументОснование=ДокументТСД;
//		НоваяЗадача.ТипЗадачи=ТипЗадачи;
//		ЗаписьСтрокЗадачи(Задача);
//		ИдентификаторНовойЗадачи= Задача.ИдентификаторУпаковки;
//	КонецЕсли;	
//	НаборЗаписейИтЗадачиНаТСД.Записать();
//	Если ЗначениеЗаполнено(ИдентификаторНовойЗадачи) тогда
//		РаботаСВременнымХранилищемМассивИзменений(АдресХраненияДанных,"Создан",Задача.ИдентификаторУпаковки);
//	КонецЕсли;
//КонецПроцедуры

#КонецОбласти

#Область ОбработчикЗадачВ2

// Процедура - Обработчик создание изменение удаление задач
//
// Параметры:
//  СтруктураТиповыхПараметровЗадач	 - Структура - формируется методом "СформироватьТиповуюСтруктуруПараметровДанныхЗадач" , 
//  на основании полученных данных, а так же добавляется произвольными данными
//
Процедура ОбработчикСозданиеИзменениеУдалениеЗадач(СтруктураТиповыхПараметровЗадач) Экспорт
	Если НРег(СтруктураТиповыхПараметровЗадач.Задача.Действие)=НРег("Удаление") тогда
		УдалениеЗадачи(СтруктураТиповыхПараметровЗадач.Задача,СтруктураТиповыхПараметровЗадач.АдресХраненияДанных);
	ИначеЕсли НРег(СтруктураТиповыхПараметровЗадач.Задача.Действие)=НРег("НоваяЗапись_Изменение") тогда 
		СозданиеИзменениеЗадачи(СтруктураТиповыхПараметровЗадач);
	КонецЕсли;
КонецПроцедуры

// Процедура - Создание изменение задачи
//
// Параметры:
//  СтруктураТиповыхПараметровЗадач	 - Структура - формируется методом "СформироватьТиповуюСтруктуруПараметровДанныхЗадач" , 
//  на основании полученных данных, а так же добавляется произвольными данными 
//
Процедура СозданиеИзменениеЗадачи(СтруктураТиповыхПараметровЗадач)
	ИдентификаторНовойЗадачи="";
	НаборЗаписейИтЗадачиНаТСД=РегистрыСведений.ИтЗадачиНаТСД.СоздатьНаборЗаписей();
	НаборЗаписейИтЗадачиНаТСД.Отбор.ИдЗадачи.Установить(СтруктураТиповыхПараметровЗадач.Задача.ИдЗадачи) ;
	НаборЗаписейИтЗадачиНаТСД.Прочитать();
	Если НаборЗаписейИтЗадачиНаТСД.Количество()>0 тогда
		для Каждого Запись из НаборЗаписейИтЗадачиНаТСД цикл
			ЗаполнитьЗначенияСвойств(Запись,СтруктураТиповыхПараметровЗадач.Задача);
			Запись.ДополнительныеДанные= новый ХранилищеЗначения(СтруктураТиповыхПараметровЗадач.Задача.ДополнительныеДанные);
			Запись.ДокументОснование=СтруктураТиповыхПараметровЗадач.ДокументТСД;
			Запись.ТипЗадачи=СтруктураТиповыхПараметровЗадач.ТипОбрабатываемойЗадачи;
			ЗаписьСтрокЗадачи(СтруктураТиповыхПараметровЗадач.Задача);
		КонецЦикла;
	иначе
		НоваяЗадача= НаборЗаписейИтЗадачиНаТСД.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗадача,СтруктураТиповыхПараметровЗадач.Задача);
		///Блок помарочного учета
		Если СтруктураТиповыхПараметровЗадач.ЗапроситьДанныеМарок Тогда 
			АнализНеобходимостиЗагрузкиМарок(СтруктураТиповыхПараметровЗадач);
		КонецЕсли;	
		//
		НоваяЗадача.ДополнительныеДанные=новый ХранилищеЗначения(СтруктураТиповыхПараметровЗадач.Задача.ДополнительныеДанные);			
		НоваяЗадача.ДокументОснование=СтруктураТиповыхПараметровЗадач.ДокументТСД;
		НоваяЗадача.ТипЗадачи=СтруктураТиповыхПараметровЗадач.ТипОбрабатываемойЗадачи;
		ЗаписьСтрокЗадачи(СтруктураТиповыхПараметровЗадач.Задача);
		ИдентификаторНовойЗадачи= СтруктураТиповыхПараметровЗадач.Задача.ИдентификаторУпаковки;
	КонецЕсли;	
	НаборЗаписейИтЗадачиНаТСД.Записать();
	Если ЗначениеЗаполнено(ИдентификаторНовойЗадачи) тогда
		РаботаСВременнымХранилищемМассивИзменений(СтруктураТиповыхПараметровЗадач.АдресХраненияДанных,"Создан",СтруктураТиповыхПараметровЗадач.Задача.ИдентификаторУпаковки);
	КонецЕсли;
КонецПроцедуры


#КонецОбласти
#Область АнализНеобходимостиДанныхПомарочногоУчета
// Процедура - Анализ необходимости загрузки марок
//  центральный обработчик анализа необходимости загрузки марок, распределяет по методам, в зависимости от типа задачи
// Параметры:
//  СтруктураТиповыхПараметровЗадач	 - Структура - формируется методом "СформироватьТиповуюСтруктуруПараметровДанныхЗадач" , 
//  на основании полученных данных, а так же добавляется произвольными данными
//
Процедура АнализНеобходимостиЗагрузкиМарок(СтруктураТиповыхПараметровЗадач)
	Если СтруктураТиповыхПараметровЗадач.ТипОбрабатываемойЗадачи=Перечисления.итWMSТипыЗадачТСД.Перемещение Тогда 
		АнализНеобходимостиЗагрузкиМарокПеремещения(СтруктураТиповыхПараметровЗадач)
	КонецЕсли;
	Если СтруктураТиповыхПараметровЗадач.ТипОбрабатываемойЗадачи=Перечисления.итWMSТипыЗадачТСД.Наборка Тогда 
		СтруктураТиповыхПараметровЗадач.МассивИдЗадачПомарочногоУчета.Добавить(СтруктураТиповыхПараметровЗадач.Задача.ИдЗадачи);
	КонецЕсли;
	Если СтруктураТиповыхПараметровЗадач.ТипОбрабатываемойЗадачи=Перечисления.итWMSТипыЗадачТСД.Проверка Тогда 
		СтруктураТиповыхПараметровЗадач.МассивИдЗадачПомарочногоУчета.Добавить(СтруктураТиповыхПараметровЗадач.Задача.ИдЗадачи);
	КонецЕсли;
КонецПроцедуры
// Процедура - Анализ необходимости загрузки марок перемещения
//
// Параметры:
//  СтруктураТиповыхПараметровЗадач	 - Структура - формируется методом "СформироватьТиповуюСтруктуруПараметровДанныхЗадач" , 
//  на основании полученных данных, а так же добавляется произвольными данными
//
Процедура АнализНеобходимостиЗагрузкиМарокПеремещения(СтруктураТиповыхПараметровЗадач)
	Если ТипЗнч(СтруктураТиповыхПараметровЗадач.Задача.ДополнительныеДанные)=Тип("Структура") Тогда
		Если СтруктураТиповыхПараметровЗадач.Задача.ДополнительныеДанные.Свойство("ДвижениеНеЦелойПаллеты") Тогда 
			Если СтруктураТиповыхПараметровЗадач.Задача.ДополнительныеДанные.ДвижениеНеЦелойПаллеты >0 Тогда 
				СтруктураТиповыхПараметровЗадач.МассивИдЗадачПомарочногоУчета.Добавить(СтруктураТиповыхПараметровЗадач.Задача.ИдЗадачи);	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

// Процедура - Запись строк задачи
//
// Параметры:
//  Задача	 - Структура - данные задачи, в формате структуры 
//
Процедура ЗаписьСтрокЗадачи(Задача)
	Если  Задача.СтрокиЗадачТСД=Неопределено тогда
		Возврат
	КонецЕсли;	
	НаборЗаписейИтСтрокиЗадачНаТСД=РегистрыСведений.ИтСтрокиЗадачНаТСД.СоздатьНаборЗаписей();
	НаборЗаписейИтСтрокиЗадачНаТСД.Отбор.ИдЗадачи.Установить(Задача.ИдЗадачи) ;
	НаборЗаписейИтСтрокиЗадачНаТСД.Прочитать();	
	Если НаборЗаписейИтСтрокиЗадачНаТСД.Количество()>0 тогда
		ТаблицаЗадач=НаборЗаписейИтСтрокиЗадачНаТСД.Выгрузить();
		НаборЗаписейИтСтрокиЗадачНаТСД.Очистить();
		для Каждого стр из Задача.СтрокиЗадачТСД цикл
			Строка=ТаблицаЗадач.Найти(стр.идСтроки);
			НоваяЗапись=НаборЗаписейИтСтрокиЗадачНаТСД.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись,стр);
			НоваяЗапись.ДополнительныеДанные=новый ХранилищеЗначения(стр.ДополнительныеДанные);
			Если Строка<>Неопределено тогда
				НоваяЗапись.ДанныеДокументаТСД= Строка.ДанныеДокументаТСД;
			КонецЕсли;		
		КонецЦикла;
		НаборЗаписейИтСтрокиЗадачНаТСД.Записать();
	иначе
		для Каждого стр из Задача.СтрокиЗадачТСД цикл
			НоваяЗапись= НаборЗаписейИтСтрокиЗадачНаТСД.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись,стр);
			НоваяЗапись.ДополнительныеДанные=новый ХранилищеЗначения(стр.ДополнительныеДанные);
		КонецЦикла;
	КонецЕсли;	
	НаборЗаписейИтСтрокиЗадачНаТСД.Записать();
КонецПроцедуры

// Процедура - Удаление задачи
//
// Параметры:
//  Задача				 - Структура - данные задачи, в формате структуры 
//  АдресХраненияДанных	 - Строка - адрес временного хранилища или адрес Временного хранилища формы, получаемого методом СлужебныеФункцииИПроцедурыКлиентСервер.ПоместитьВоВременноеХранилищеФормы  
//
Процедура УдалениеЗадачи(Задача,АдресХраненияДанных)
	ИдентификаторУдаляемойЗадачи="";
	НаборЗаписейИтЗадачиНаТСД=РегистрыСведений.ИтЗадачиНаТСД.СоздатьНаборЗаписей();
	НаборЗаписейИтЗадачиНаТСД.Отбор.ИдЗадачи.Установить(Задача.ИдЗадачи) ;
	НаборЗаписейИтЗадачиНаТСД.Прочитать();
	для Каждого стр из НаборЗаписейИтЗадачиНаТСД цикл
		ИдентификаторУдаляемойЗадачи=стр.ИдентификаторУпаковки;
	КонецЦикла;
	НаборЗаписейИтЗадачиНаТСД.Очистить();
	НаборЗаписейИтЗадачиНаТСД.Записать();
	НаборЗаписейИтСтрокиЗадачНаТСД=РегистрыСведений.ИтСтрокиЗадачНаТСД.СоздатьНаборЗаписей();
	НаборЗаписейИтСтрокиЗадачНаТСД.Отбор.ИдЗадачи.Установить(Задача.ИдЗадачи) ;
	НаборЗаписейИтСтрокиЗадачНаТСД.Прочитать();
	НаборЗаписейИтСтрокиЗадачНаТСД.Очистить();
	НаборЗаписейИтСтрокиЗадачНаТСД.Записать();
	ОчиститьДанныеПомарочногоУчета(Задача.ИдЗадачи);
	Если ЗначениеЗаполнено(ИдентификаторУдаляемойЗадачи) тогда
		РаботаСВременнымХранилищемМассивИзменений(АдресХраненияДанных,"Удален",Задача.ИдентификаторУпаковки);
	КонецЕсли;
КонецПроцедуры

// Процедура - Проверить удалить документ
//
// Параметры:
//  ДокументТСД			 - Произвольный - ссылка на любой документ учавствующий в регистре ИтЗадачиНаТСД 
//  АдресХраненияДанных	 - Строка - адрес временного хранилища или адрес Временного хранилища формы, получаемого методом СлужебныеФункцииИПроцедурыКлиентСервер.ПоместитьВоВременноеХранилищеФормы
//
Процедура ПроверитьУдалитьДокумент(ДокументТСД,АдресХраненияДанных="")Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИтЗадачиНаТСД.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
	|ГДЕ
	|	ИтЗадачиНаТСД.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументТСД);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() тогда
		Если ЗначениеЗаполнено(АдресХраненияДанных) тогда
			ОбработчикДанныхОбщиеФункцииИПроцедуры.РаботаСВременнымХранилищемМассивИзменений(АдресХраненияДанных,"Удален",ДокументТСД.Ссылка);
		КонецЕсли;
		ОчиститьДанныеПомарочногоУчета(ДокументТСД.УникальныйИдентификатор());
		ОбъектДокумента=ДокументТСД.ПолучитьОбъект();
		ОбъектДокумента.Удалить();
	КонецЕсли;	
КонецПроцедуры

// Процедура - Очистить данные помарочного учета
// очищает регистр сведений с помарочным учетом, согласно ключу
//
// Параметры:
//  Гуид - УникальныйИдентификатор	 -  ключ хранения данных ( гуид документа, задачи, строки )
//
Процедура ОчиститьДанныеПомарочногоУчета(Гуид) Экспорт 
	НаборЗаписей=РегистрыСведений.итДанныеПомарочногоУчета.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Ключ.Установить(Гуид);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
КонецПроцедуры

// Процедура - Добавить данные помарочного учета
// записывает данные помарочного учета полученные с базы 1с 
//
// Параметры:
//  Гуид	 - УникальныйИдентификатор	 -  ключ хранения данных ( гуид документа, задачи, строки ) 
//  Данные	 - Массив,ТаблицаЗначений - Колонки,свойства:
//  *Марка - Строка - идентификатор помарочной продукции
//  *SSCC - Строка - Идентификатор упаковки(паллеты)
//  *GTIN - Строка - Идентификатор упаковки(Коробки)
//  *Номенклатура - УникальныйИдентификатор - ГУИД номенклатуры
//  *НоменклатураПредставление - Строка - Наименование номенклатуры
//  *СерияНоменклатуры - УникальныйИдентификатор - ГУИД СерияНоменклатуры 
//  *СерияНоменклатурыПредставление - Строка - Наименование серии номенклатуры
//  *ДатаРозлива - Дата - Дата розлива
//  *ПризнакОбработки - Булево- Признак Обработки строки
//
Процедура ДобавитьДанныеПомарочногоУчета(Гуид,Данные) Экспорт 
	НаборЗаписей=РегистрыСведений.итДанныеПомарочногоУчета.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Ключ.Установить(Гуид);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	для Каждого стр из Данные цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись,стр);
		НоваяЗапись.Ключ=Гуид;	
	КонецЦикла;
	НаборЗаписей.Записать();
КонецПроцедуры

// Процедура - Работа с временным хранилищем массив изменений
// Записывает изменения в хранилище
//
// Параметры:
//  АдресХраненияДанных	 - Строка - адрес временного хранилища или адрес Временного хранилища формы, получаемого методом СлужебныеФункцииИПроцедурыКлиентСервер.ПоместитьВоВременноеХранилищеФормы
//  Признак				 - Строка - "Создан" или "Удален"  
//  ОбъектДанных		 - Произвольный - объект изменения данных . Пример : "ДокументСсылка","ИдЗадачи". 
//
Процедура РаботаСВременнымХранилищемМассивИзменений(АдресХраненияДанных,Признак="СтроковеЗначение",ОбъектДанных)Экспорт
	Если  АдресХраненияДанных ="" тогда
		Возврат
	КонецЕсли;	
	Если Найти(АдресХраненияДанных,"ВременноеХранилищеФорм")тогда
		Данные=СлужебныеФункцииИПроцедурыКлиентСервер.ПолучитьИзВременногоХранилищаФормы(АдресХраненияДанных);
	иначе
		Данные=ПолучитьИзВременногоХранилища(АдресХраненияДанных);
	КонецЕсли;
	Если ТипЗнч(Данные)=тип("Структура") тогда
		Если не Данные.Свойство("МассивСозданныхОбъектовДанных") тогда
			Данные.Вставить("МассивСозданныхОбъектовДанных",новый Массив);
		КонецЕсли;
		
		Если НРег(Признак) = НРег("Создан") тогда
			Данные.МассивСозданныхОбъектовДанных.Добавить(ОбъектДанных);
		ИначеЕсли НРег(Признак) = НРег("Удален") тогда
			ИндексЗначения=Данные.МассивСозданныхОбъектовДанных.Найти(ОбъектДанных);
			Если ИндексЗначения<>Неопределено тогда
				Данные.МассивСозданныхОбъектовДанных.Удалить(ИндексЗначения);
			КонецЕсли;
		КонецЕсли;
		Если Найти(АдресХраненияДанных,"ВременноеХранилищеФорм")тогда
			СлужебныеФункцииИПроцедурыКлиентСервер.ПоместитьВоВременноеХранилищеФормы(Данные,АдресХраненияДанных);
		иначе
			ПоместитьВоВременноеХранилище(Данные,АдресХраненияДанных);	
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

// Функция - Сформировать типовую структуру параметров данных задач
//
// Параметры:
//  Задача					 - Структура - данные задачи полученный с сервера 
//  ДокументТСД				 - Произвольный - Ссылка на документ  
//  ТипОбрабатываемойЗадачи	 - Перечисления.итWMSТипыЗадачТСД - тип обрабатываемой задачи 
//  АдресХраненияДанных		 - Строка - адрес временного хранилища или адрес Временного хранилища формы, получаемого методом СлужебныеФункцииИПроцедурыКлиентСервер.ПоместитьВоВременноеХранилищеФормы
// 
// Возвращаемое значение:
// Структура  - СтруктураТиповыхПараметровЗадач. Свойства см функцию
//
Функция СформироватьТиповуюСтруктуруПараметровДанныхЗадач(Задача=Неопределено,ДокументТСД=Неопределено,ТипОбрабатываемойЗадачи=Неопределено,АдресХраненияДанных=Неопределено) Экспорт 
	СтруктураТиповыхПараметровЗадач=новый Структура;
	СтруктураТиповыхПараметровЗадач.Вставить("Задача",Задача);
	СтруктураТиповыхПараметровЗадач.Вставить("ДокументТСД",ДокументТСД);
	СтруктураТиповыхПараметровЗадач.Вставить("ТипОбрабатываемойЗадачи",ТипОбрабатываемойЗадачи);
	СтруктураТиповыхПараметровЗадач.Вставить("АдресХраненияДанных",АдресХраненияДанных);
	СтруктураТиповыхПараметровЗадач.Вставить("ЗапроситьДанныеМарок",Ложь);
	СтруктураТиповыхПараметровЗадач.Вставить("МассивИдЗадачПомарочногоУчета",новый Массив);
	Возврат СтруктураТиповыхПараметровЗадач;
КонецФункции

// Функция - Инициализация задачи на сервере
//
// Параметры:
//  СтруктураОтвета			 - Структура - структура получаемая методом   СлужебныеФункцииИПроцедурыКлиентСервер.ПолучитьДанныеИзИтЗадачиТСД(ШтрихКод) 
//  ТипИнициализации		 - Строка - Описания типа инициализации. 
//  Пример: "Задача","Документ","ЗадачаОтказ","ДокументОтказ".
//  СостояниеИнициализации	 - Перечисления.итWMSСостоянияЗадачТСД	 -  состояние в которое задача будет переведена после инициализации
// 
// Возвращаемое значение:
// Булево  - Истина,если задача инициализирована,иначе ложь.
//
Функция  ИнициализацияЗадачиНаСервере(СтруктураОтвета,ТипИнициализации,СостояниеИнициализации) Экспорт 
	///структура ответа формируется в СлужебныеФункцииИПроцедурыКлиентСервер.ПолучитьДанныеИзИтЗадачиТСД(ШтрихКод)
	///в обработчик отправляется СтруктураОтвета.""ТипЗадачи"" -это сделанно , т.к на 1 штрихкод может быть несколько задач и если на тсд
	/// доступен весь перечень, то в зависимости от места вызова выбирается нужный тип задачи для обработки
	Если СтруктураОтвета.Состояние=СостояниеИнициализации и не Найти(НРег(ТипИнициализации),"отказ")  тогда
		Возврат Истина;
	иначе
		СтруктураДанных =СлужебныеФункцииИПроцедурыКлиентСервер.СформироватьСтруктуруИнициализацииДанных(СтруктураОтвета,ТипИнициализации,СостояниеИнициализации);
		СтруктураДанных=ОбработчикиЗапросаСервера.ЗапроситьДанные(СтруктураДанных,"Initialization");
		МодульРаспределенияДанных.ОбработчикВходящихДанных(СтруктураДанных);
		Возврат  СтруктураДанных.Инициализация;
		
	КонецЕсли;
	Возврат Ложь;
КонецФункции



// Процедура - Получить данные марок по списку задач
// получение и запись данных помарочного учета, по массиву задач тсд
//
// Параметры:
//  МассивИдЗадачПомарочногоУчета	 - Массив - массив из идентификаторов задач тсд
//  ТипЗадачи - Перечисления.итWMSТипыЗадачТСД - тип обрабатываемой задачи
//
Процедура ПолучитьДанныеМарокПоСпискуЗадач(МассивИдЗадачПомарочногоУчета,ТипЗадачи,ПризнакОбработки=Ложь) Экспорт 
	Если МассивИдЗадачПомарочногоУчета.Количество()=0 Тогда 
		Возврат
	КонецЕсли;	
	СтруктураДанныхЗапросаМарок=новый Структура;
	
	СтруктураДанныхЗапросаМарок.Вставить("ТипЗадачи",ТипЗадачи);
	СтруктураДанныхЗапросаМарок.Вставить("КлючПолученияДанных",МассивИдЗадачПомарочногоУчета);
	////СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(,"#ОбработчикДанныхОбщиеФункцииИПроцедуры начало получение марок с сервера",);
	Если  Константы.ПолучатьПМУАссинхронно.Получить() Тогда 
		СтруктураДанныхЗапросаМарок.Вставить("КлючОперации","ЗапросДанныхМарокПоЗадачамАссинхронно");
		СтруктураДанныхЗапросаМарок=ОбработчикиЗапросаСервера.ЗапроситьДанные(СтруктураДанныхЗапросаМарок,"ServiceFunction");
		ОпросСервераНаНаличеДанныхОМарках(СтруктураДанныхЗапросаМарок)
	Иначе 
		СтруктураДанныхЗапросаМарок.Вставить("КлючОперации","ЗапросДанныхМарокПоЗадачам");
		СтруктураДанныхЗапросаМарок=ОбработчикиЗапросаСервера.ЗапроситьДанные(СтруктураДанныхЗапросаМарок,"ServiceFunction");
	КонецЕсли;
	////СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(,"#ОбработчикДанныхОбщиеФункцииИПроцедуры Марки получены",);
	Если СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(СтруктураДанныхЗапросаМарок,"МассивДанныхМарок") тогда
		ВызватьИсключение "ошибка получения данных помарочного учета";
	КонецЕсли;
	Для Каждого стр из МассивИдЗадачПомарочногоУчета цикл
		ОчиститьДанныеПомарочногоУчета(стр);
	КонецЦикла;	
	////СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(,"#ОбработчикДанныхОбщиеФункцииИПроцедуры Начало записи марок в ТСД",);
	Для Каждого Строка из СтруктураДанныхЗапросаМарок.МассивДанныхМарок цикл
		МенеджерЗаписиДанных=РегистрыСведений.итДанныеПомарочногоУчета.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписиДанных,Строка);
		МенеджерЗаписиДанных.Марка=Строка.Марка;
		МенеджерЗаписиДанных.Ключ=Строка.ИдЗадачи;
		МенеджерЗаписиДанных.ПризнакОбработки=ПризнакОбработки;
		МенеджерЗаписиДанных.Записать(Истина);
	КонецЦикла;
	////СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(,"#ОбработчикДанныхОбщиеФункцииИПроцедуры Марки Записаны",);
	
КонецПроцедуры
Процедура ОпросСервераНаНаличеДанныхОМарках(СтруктураДанных)
	ДатаОкончанияОпроса=ТекущаяДата()+500;
	Шаг=30;
	ДатаЗАпросаНаСервер=ТекущаяДата()+10;	 
	Пока ТекущаяДата()<=ДатаОкончанияОпроса Цикл
		Если ТекущаяДата()>=ДатаЗАпросаНаСервер Тогда 
			СтруктураДанных.КлючОперации="ПолучениеАссинхронноЗаписанныхДанныхМарокПоЗадачам";
			СтруктураДанных=ОбработчикиЗапросаСервера.ЗапроситьДанные(СтруктураДанных,"ServiceFunction");
			Если  СтруктураДанных.Завершён Тогда 
				Прервать;
			иначе
				ДатаЗАпросаНаСервер=ДатаЗАпросаНаСервер+Шаг;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


#Область ОбработчикиСинхронизацииСправочныхДанных
// Процедура - Обработка справочника ит WMSПричины отмены задач
// Удаляет причины отмены и записывает новые согласно МассивуДанных
// Параметры:
//  МассивДанных - Массив - структурированный массив, собранный из реквизитов справочника на сервере 
//
Процедура ОбработкаСправочника_итWMSПричиныОтменыЗадач(МассивДанных) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMS_ПричиныОтменыЗадач.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.итWMS_ПричиныОтменыЗадач КАК итWMS_ПричиныОтменыЗадач";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбъектДляУдаления=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ОбъектДляУдаления.Удалить();
	КонецЦикла;
	
	Для Каждого стр из МассивДанных цикл
		НовыйЭлемент=Справочники.итWMS_ПричиныОтменыЗадач.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(НовыйЭлемент,стр);
		НовыйЭлемент.УстановитьСсылкуНового(Справочники.итWMS_ПричиныОтменыЗадач.ПолучитьСсылку(стр.Ссылка));
		НовыйЭлемент.Записать();
	КонецЦикла;
	
	
	
КонецПроцедуры
#КонецОбласти
