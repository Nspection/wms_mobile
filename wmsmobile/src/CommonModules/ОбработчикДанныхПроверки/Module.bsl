// Процедура - Обработать документ проверка
// Создает\Перезаписывает документ Приемка , а так же создает перезаписывает данные задач в регистр
// Параметры:
//  Документ			 - Структура - структура содержащая в себе данные документа на сервере 
//  АдресХраненияДанных	 - Строка - адрес временного хранилища или адрес Временного хранилища формы, получаемого методом СлужебныеФункцииИПроцедурыКлиентСервер.ПоместитьВоВременноеХранилищеФормы
//
Процедура ОБработатьДокументПроверка(Документ,АдресХраненияДанных="")Экспорт 
	ТипОбрабатываемойЗадачи=Перечисления.итWMSТипыЗадачТСД.Проверка;
	
	
	ДокументТСД=НайтиСоздатьДокументПроверки(Документ,ТипОбрабатываемойЗадачи,АдресХраненияДанных);
	Если не Документ.Свойство("МассивЗадач") тогда
		ВызватьИсключение "Ошибка типа данных";
	КонецЕсли;
	Если ТипЗнч(Документ.ДополнительныеДанные)=тип("Структура") тогда
		ОбъектДокументаТСД=Неопределено;
		Если  Документ.ДополнительныеДанные.Свойство("СтруктураКраткогоСодежимого") тогда
			Если ОбъектДокументаТСД=Неопределено Тогда 
				ОбъектДокументаТСД=ДокументТСД.ПолучитьОбъект();
			КонецЕсли;
			ОбъектДокументаТСД.СтруктураКраткогоСодежимого=новый ХранилищеЗначения(Документ.ДополнительныеДанные.СтруктураКраткогоСодежимого);		     
		КонецЕсли;

		Если ОбъектДокументаТСД<>Неопределено Тогда 
			ОбъектДокументаТСД.Записать();
		КонецЕсли;	
	КонецЕсли;
	
	СтруктураТиповыхПараметровЗадач=ОбработчикДанныхОбщиеФункцииИПроцедуры.СформироватьТиповуюСтруктуруПараметровДанныхЗадач(,ДокументТСД,ТипОбрабатываемойЗадачи,АдресХраненияДанных);
	Если Документ.Свойство("ПомарочныйУчет")  Тогда
		СтруктураТиповыхПараметровЗадач.ЗапроситьДанныеМарок=Документ.ПомарочныйУчет
	иначе
		СтруктураТиповыхПараметровЗадач.ЗапроситьДанныеМарок=Ложь;
	КонецЕсли;
    ЗадачиСНецелымиПаллетами=новый Массив;
	для Каждого Задача из Документ.МассивЗадач цикл
		Если ТипЗнч(Задача.ДополнительныеДанные)=Тип("Структура") Тогда 
			Если Задача.ДополнительныеДанные.Свойство("НеЦелыйПаллет") Тогда 
				Если Задача.ДополнительныеДанные.НеЦелыйПаллет>0 Тогда 
					ЗадачиСНецелымиПаллетами.Добавить(Задача.идЗадачи);
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		СтруктураТиповыхПараметровЗадач.Задача=Задача;
		ОбработчикДанныхОбщиеФункцииИПроцедуры.ОбработчикСозданиеИзменениеУдалениеЗадач(СтруктураТиповыхПараметровЗадач);
	КонецЦикла;
	Если СтруктураТиповыхПараметровЗадач.ЗапроситьДанныеМарок  Тогда
		//ОбработчикДанныхОбщиеФункцииИПроцедуры.ПолучитьДанныеМарокПоСпискуЗадач(СтруктураТиповыхПараметровЗадач.МассивИдЗадачПомарочногоУчета,СтруктураТиповыхПараметровЗадач.ТипОбрабатываемойЗадачи,Истина);
		ПолучитьДанныеМарокПоСпискуЗадачПроверка(СтруктураТиповыхПараметровЗадач.МассивИдЗадачПомарочногоУчета,СтруктураТиповыхПараметровЗадач.ТипОбрабатываемойЗадачи,ЗадачиСНецелымиПаллетами);
	КонецЕсли;

	
	ОбработчикДанныхОбщиеФункцииИПроцедуры.ПроверитьУдалитьДокумент(ДокументТСД,АдресХраненияДанных);
	
КонецПроцедуры


Процедура ПолучитьДанныеМарокПоСпискуЗадачПроверка(МассивИдЗадачПомарочногоУчета,ТипЗадачи,ЗадачиСНецелымиПаллетами) Экспорт 
	Если МассивИдЗадачПомарочногоУчета.Количество()=0 Тогда 
		Возврат
	КонецЕсли;	
	СтруктураДанныхЗапросаМарок=новый Структура;
	
	СтруктураДанныхЗапросаМарок.Вставить("ТипЗадачи",ТипЗадачи);
	СтруктураДанныхЗапросаМарок.Вставить("КлючПолученияДанных",МассивИдЗадачПомарочногоУчета);
	//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(,"#ОбработчикДанныхОбщиеФункцииИПроцедуры начало получение марок с сервера",);
	СтруктураДанныхЗапросаМарок.Вставить("КлючОперации","ЗапросДанныхМарокПоЗадачам");
	СтруктураДанныхЗапросаМарок=ОбработчикиЗапросаСервера.ЗапроситьДанные(СтруктураДанныхЗапросаМарок,"ServiceFunction");
	//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(,"#ОбработчикДанныхОбщиеФункцииИПроцедуры Марки получены",);
	Если СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(СтруктураДанныхЗапросаМарок,"МассивДанныхМарок") тогда
		ВызватьИсключение "ошибка получения данных помарочного учета";
	КонецЕсли;
	Для Каждого стр из МассивИдЗадачПомарочногоУчета цикл
		ОбработчикДанныхОбщиеФункцииИПроцедуры.ОчиститьДанныеПомарочногоУчета(стр);
	КонецЦикла;	
	//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(,"#ОбработчикДанныхОбщиеФункцииИПроцедуры Начало записи марок в ТСД",);
	Для Каждого Строка из СтруктураДанныхЗапросаМарок.МассивДанныхМарок цикл
		МенеджерЗаписиДанных=РегистрыСведений.итДанныеПомарочногоУчета.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписиДанных,Строка);
		МенеджерЗаписиДанных.Марка=Строка.Марка;
		МенеджерЗаписиДанных.Ключ=Строка.ИдЗадачи;
		Если ЗадачиСНецелымиПаллетами.Найти(Строка.ИдЗадачи)=Неопределено Тогда 
			МенеджерЗаписиДанных.ПризнакОбработки=Истина;
			Иначе 
			МенеджерЗаписиДанных.ПризнакОбработки=Ложь;
		КонецЕсли;
		МенеджерЗаписиДанных.Записать(Истина);
	КонецЦикла;
	//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(,"#ОбработчикДанныхОбщиеФункцииИПроцедуры Марки Записаны",);
	
КонецПроцедуры


#Область СлужебныеФункцииИпроцедурыПриемки
// Функция - Найти создать документ приемки
//
// Параметры:
//  Документ			 - Структура - структура содержащая в себе данные документа на сервере
//  ТипЗадачи			 - Перечисления.итWMSТипыЗадачТСД - тип задачи документа (в данном модуле Приемка или ПриемкаКакЕсть) 
//  АдресХраненияДанных	 - Строка - адрес временного хранилища или адрес Временного хранилища формы, получаемого методом СлужебныеФункцииИПроцедурыКлиентСервер.ПоместитьВоВременноеХранилищеФормы
//  ЗапроситьДанныеМарок - Булево - т.к  приемка это не делимая еденица, то запрос марок производиться для всего документа Истина-запросить, Ложь-не запрашивать.
// 
// Возвращаемое значение:
// ДокументСсылка.итПриемка  - ссылка на документ приемки
//
Функция НайтиСоздатьДокументПроверки(Документ,ТипЗадачи,АдресХраненияДанных="")
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итПроверка.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.итПроверка КАК итПроверка
	|ГДЕ
	|	итПроверка.ГУИД = &ГУИД";
	
	Запрос.УстановитьПараметр("ГУИД", Документ.ГУИД);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	иначе
		НовыйДокументПроверки = Документы.итПроверка.СоздатьДокумент();
		НовыйДокументПроверки.ГУИД=Документ.ГУИД;
		НовыйДокументПроверки.Номер=Документ.Номер;
		НовыйДокументПроверки.Дата=Документ.Дата;
		НовыйДокументПроверки.ТипЗадачи=ТипЗадачи;
		НовыйДокументПроверки.Записать();		
		Если ЗначениеЗаполнено(АдресХраненияДанных) тогда
			ОбработчикДанныхОбщиеФункцииИПроцедуры.РаботаСВременнымХранилищемМассивИзменений(АдресХраненияДанных,"Создан",НовыйДокументПроверки.Ссылка);
		КонецЕсли;
		Возврат НовыйДокументПроверки.Ссылка;
	КонецЕсли;	
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции
#КонецОбласти