// Процедура - Опрос сервера базы данных на сервере
// Процедура обновляет данные,получает новые данные с сервера 
//
// Параметры:
//  Параметры	 - Структура - структура данные необходимая для получения обновлений ТСД - как минимум структура полученная методом:
//  СлужебныеФункцииИПроцедурыКлиентСервер.СформироватьСтруктуруДанныхОПользователе.  
//  Так же Свойство-АдресИнформацииОбновленияБазы- отвечает за адрес, куда будут будт записаны изменения текущего обновления данных
//
Процедура ОпросСервераБазыДанныхНаСервере(Параметры=Неопределено) Экспорт 	
	Если ТипЗнч(Параметры)<>тип("Структура") тогда
		Возврат
	КонецЕсли;
	ДанныеОбновления=ЗапроситьДанные(Параметры,"UpdateChange");
	Если СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(ДанныеОбновления) тогда
		Возврат
	КонецЕсли;
	МодульРаспределенияДанных.ОбработчикВходящихДанных(ДанныеОбновления,?(Параметры=Неопределено,"",Параметры.АдресИнформацииОбновленияБазы));
	//СтруктураЗапроса.Вставить("ЗаданиеНаРазмещениеКВыполнению");
	//СтруктураЗапроса.Вставить("ВыполненныеЗаданияРазмещения");
	//ДанныеОВыполенныхЗаданияхРазмещения(СтруктураЗапроса);
	//СлужебныеФункцииИПроцедурыКлиентСервер.СформироватьСтруктуруДанныхОПользователе(СтруктураЗапроса);
	////ЗаполнениеСтруктураЗаданияНаРазмещение(СтруктураЗапроса);
	//СтруктураДанных=ЗапроситьДанные(СтруктураЗапроса,"DonloadTSD");
	//ОбработчикОтветаССервера(СтруктураДанных);
КонецПроцедуры
// Функция - Запросить данные
// Отправляет,получает данные с сервера, согласно заданным настройкам в базе и передаваемым параметрам
//
// Параметры:
//  СтруктураЗапроса - Структура - Структура данных для передачи на сервер
//  ИмяОперации		 - Строка - Наименование операции веб сервиса. Пример : "ServiceFunction".
// 
// Возвращаемое значение:
// Произвольное,Структура  - ответ полученный от сервера 
//
Функция ЗапроситьДанные(СтруктураЗапроса,ИмяОперации)Экспорт
	СеансВызоваСервера=новый УникальныйИдентификатор();
	//ДополнительныйКлюч="";
	//Если ИмяОперации="ServiceFunction" Тогда 
	//ДополнительныйКлюч=СтруктураЗапроса.КлючОперации;
	//КонецЕсли;
	//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(,"+#ОбработчикиЗапросаСервера Запрос сервера ИмяОперации:"+ИмяОперации,ДополнительныйКлюч);
	Отказ=Ложь;
	~ОжиданиеСоединения:
	ОжиданиеРазрешенияСоединенияДоСервера(Отказ,СеансВызоваСервера);
	Если Отказ Тогда 
		ДатаПоследнегоЗапроса=Константы.ДатаВремяВызоваСервера.Получить();
		ДатаМаксимальногоОграничения= ДатаПоследнегоЗапроса+190;
		СтруктураЗапроса.Вставить("Статус",404);
		СтруктураЗапроса.Вставить("ОписаниеОшибки","не удалось установить соединение до сервера в виду начлия активного соединения с текущего тсд,если соединение не завершиться 
	    |само, то система завершит его в "+Строка(ДатаМаксимальногоОграничения));
		Возврат СтруктураЗапроса;
	КонецЕсли;
	Константы.ДатаВремяВызоваСервера.Установить(ТекущаяДата());
   	Данные=ОбработчикHTTP.СериализаторДанных(СтруктураЗапроса);
	//Определение = новый WSОпределения("http://192.168.43.118/giftemewms/ws/ServerTSD.1cws?wsdl" ,"webserv","111");
	ПараметрыПрокиСервера=СлужебныеФункцииИПроцедурыКлиентСервер.СформироватьПараметрыПроксиСервера();
	//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(,"+#ОбработчикиЗапросаСервера создание ссылки до базы ИмяОперации:"+ИмяОперации,ДополнительныйКлюч);
	Определение=новый WSОпределения(СлужебныеФункцииИПроцедурыКлиентСервер.СформироватьСтрокуПодключения() ,"webserv","111");
	//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(,"-#ОбработчикиЗапросаСервера создание ссылки до базы ИмяОперации:"+ИмяОперации,ДополнительныйКлюч);
	//Прокси = новый WSПрокси(Определение,"ServerTSD","ServerTSD","ServerTSDSoap");
	////СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(,"+#ОбработчикиЗапросаСервера создание прокси до базы ИмяОперации:"+ИмяОперации,ДополнительныйКлюч);
	Прокси = новый WSПрокси(Определение,ПараметрыПрокиСервера.URLПространствоИменСервиса,ПараметрыПрокиСервера.ИмяСервиса,ПараметрыПрокиСервера.ИмяТочкиПодключения,,180);
	////СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(,"-#ОбработчикиЗапросаСервера создание прокси до базы ИмяОперации:"+ИмяОперации,ДополнительныйКлюч);
	//Операция=Прокси.ТочкаПодключения.Интерфейс.Операции.Получить("ОбработчикЗапросаТСД");
	Прокси.Пользователь="webserv";
	//Прокси.Таймаут=20;
	Прокси.Пароль="111";
	//Ответ=ОбработчикHTTP.ДесериализаторДанных(Прокси.DonloadTSD(Данные));
	Sleep(1);
	Если Константы.СеансВызоваСервера.Получить()<>СеансВызоваСервера Тогда 
		Перейти ~ОжиданиеСоединения;
	КонецЕсли;
	Попытка
		Ответ=ОбработчикHTTP.ДесериализаторДанных(Вычислить("Прокси."+ИмяОперации+"(Данные)"));
	Исключение
		ТекстОшибки=ОписаниеОшибки();
		////СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(,"-#ОбработчикиЗапросаСервера Запрос сервера ИмяОперации:"+ИмяОперации+" ошибка:"+ТекстОшибки,ДополнительныйКлюч);
		Сообщить(ТекстОшибки);
		Константы.ДатаВремяВызоваСервера.Установить('00010101');
	КонецПопытки;
	////СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(,"-#ОбработчикиЗапросаСервера Запрос сервера ИмяОперации:"+ИмяОперации,ДополнительныйКлюч);

	Константы.ДатаВремяВызоваСервера.Установить('00010101');
	Возврат Ответ;
КонецФункции

Функция ЗапросДатыСервера(СтруктураЗапроса) Экспорт 
	Данные=ОбработчикHTTP.СериализаторДанных(СтруктураЗапроса);
	ПараметрыПрокиСервера=СлужебныеФункцииИПроцедурыКлиентСервер.СформироватьПараметрыПроксиСервера();
	Определение=новый WSОпределения(СлужебныеФункцииИПроцедурыКлиентСервер.СформироватьСтрокуПодключения() ,"webserv","111");
	//Прокси = новый WSПрокси(Определение,"ServerTSD","ServerTSD","ServerTSDSoap");
	Прокси = новый WSПрокси(Определение,ПараметрыПрокиСервера.URLПространствоИменСервиса,ПараметрыПрокиСервера.ИмяСервиса,ПараметрыПрокиСервера.ИмяТочкиПодключения,,120);
	//Операция=Прокси.ТочкаПодключения.Интерфейс.Операции.Получить("ОбработчикЗапросаТСД");
	Прокси.Пользователь="webserv";
	//Прокси.Таймаут=20;
	Прокси.Пароль="111";
	Ответ=ОбработчикHTTP.ДесериализаторДанных(Прокси.ServiceFunction(Данные));
    Возврат Ответ;
	КонецФункции

Процедура ОжиданиеРазрешенияСоединенияДоСервера(Отказ,СеансВызоваСервера)
	ВремяОкончанияОжидания=ТекущаяДата()+15;
	ШагОпроса=1;
	Отказ=Истина;
	СчетчикДляЛога=0;
	ВремяОпроса=ТекущаяДата();
	Пока ТекущаяДата()<=ВремяОкончанияОжидания Цикл
		Если ВремяОпроса<=ТекущаяДата() Тогда 
			Если Константы.ДатаВремяВызоваСервера.Получить()='00010101' тогда
				Константы.СеансВызоваСервера.Установить(СеансВызоваСервера);
				Отказ=Ложь;
				Прервать;
			КонецЕсли;
			ВремяОпроса=ВремяОпроса+ШагОпроса;
		КонецЕсли;
		//Если СчетчикДляЛога=0 Тогда 
		//	//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(,"#ОбработчикиЗапросаСервера Попадание в ожидание соединения с сервером");
		//КонецЕсли;
		СчетчикДляЛога=1;
	КонецЦикла;
КонецПроцедуры

Процедура Sleep(Секунд)
	ВремяОкончанияОжидания=ТекущаяДата()+Секунд;
	Пока ТекущаяДата()<=ВремяОкончанияОжидания Цикл
	КонецЦикла;
	КонецПроцедуры
// Процедура - Обновить список задач к распределению
// Получает данные корзины задач (Обработки.ДиспетчерЗадач.ЗадачиКРаспределению) 
//
// Параметры:
//  Параметры	 - Структура,Неопределено - Структура-СтруктуруДанныхОПользователе получаемая методом СлужебныеФункцииИПроцедурыКлиентСервер.СформироватьСтруктуруДанныхОПользователе
//  в противном случае(Неопределено), такая структура будет создана.
//
Процедура ОбновитьСписокЗадачКРаспределению(Параметры=Неопределено) Экспорт 	
СтруктураДанных=новый Структура;
Если Параметры=Неопределено тогда
СлужебныеФункцииИПроцедурыКлиентСервер.СформироватьСтруктуруДанныхОПользователе(СтруктураДанных);
иначе
СтруктураДанных=Параметры;
КонецЕсли;
СтруктураДанных.Вставить("КлючОперации","ПолучитьСписокЗадач");
СтруктураДанных=ЗапроситьДанные(СтруктураДанных,"ServiceFunction");
Если СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(СтруктураДанных) тогда
	Возврат
КонецЕсли;
Если СтруктураДанных.Свойство("Результат") тогда
	
	НаборЗаписей=РегистрыСведений.итЗадачиКРаспределению.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	НаборЗаписей2=РегистрыСведений.итЗадачиКРаспределениюДополнительныеДанные.СоздатьНаборЗаписей();
	НаборЗаписей2.Прочитать();
	НаборЗаписей2.Очистить();
	НаборЗаписей2.Записать();
	
	для Каждого стр из СтруктураДанных.Результат цикл
		НоваяЗапись=НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись,стр);	
		Если ТипЗнч(стр.ДополнительныеДанные)<>Тип("Структура") Тогда 
			ДополнительныеДанные=новый Структура;
		иначе
			ДополнительныеДанные=стр.ДополнительныеДанные;
			ЗаполнениеДополнительныхДанныхКЗадачамРаспределения(ДополнительныеДанные,стр.ТипЗадачи,стр.ИдЗадачи)
		КонецЕсли;	 
		НоваяЗапись.ДополнительныеДанные=новый ХранилищеЗначения(ДополнительныеДанные);
	КонецЦикла;
	НаборЗаписей.Записать();
КонецЕсли;
КонецПроцедуры

Процедура ЗаполнениеДополнительныхДанныхКЗадачамРаспределения(ДополнительныеДанные,ТипЗадачи,ИдЗадачи)
	Если ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.Наборка Тогда 
		ЗаполнениеДополнительныхДанныхКЗадачамРаспределенияНаборка(ДополнительныеДанные,ИдЗадачи);
	КонецЕсли;
КонецПроцедуры


Процедура ЗаполнениеДополнительныхДанныхКЗадачамРаспределенияНаборка(ДополнительныеДанные,ИдЗадачи)
	НаборЗаписей=РегистрыСведений.итЗадачиКРаспределениюДополнительныеДанные.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдЗадачи.Установить(ИдЗадачи);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НоваяЗпись=НаборЗаписей.Добавить();
	НоваяЗпись.ИдЗадачи=ИдЗадачи;
	ДатаОтгрузки=Неопределено;
	Маршрут=Неопределено;
	ОчередьДоставки=Неопределено;
	МаршрутГУИД=Неопределено;
	ДополнительныеДанные.Свойство("ДатаОтгрузки",ДатаОтгрузки);	
	ДополнительныеДанные.Свойство("Маршрут",Маршрут);	
	ДополнительныеДанные.Свойство("ОчередьДоставки",ОчередьДоставки);	
	ДополнительныеДанные.Свойство("МаршрутГУИД",МаршрутГУИД);
	Если ДатаОтгрузки<>Неопределено Тогда 
		НоваяЗпись.Реквизит1Дата=ДатаОтгрузки;
	КонецЕсли;
	Если Маршрут<>Неопределено Тогда 
		НоваяЗпись.Реквизит1Строка=Маршрут;
	КонецЕсли;
	Если ОчередьДоставки<>Неопределено Тогда 
		НоваяЗпись.Реквизит1Число=ОчередьДоставки;	
	КонецЕсли;
	Если МаршрутГУИД<>Неопределено Тогда 
		НоваяЗпись.Реквизит1ГУИД=МаршрутГУИД;	
	КонецЕсли;
	НаборЗаписей.Записать();
	КонецПроцедуры