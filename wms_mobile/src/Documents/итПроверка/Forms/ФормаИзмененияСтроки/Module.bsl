#Область ОбработчикиСобытий
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ПроверкаПараметров(Отказ);
	Если Отказ Тогда 
		Возврат
	КонецЕсли;	
	
	Номенклатура=Параметры.Номенклатура;
	НоменклатураПредставление=Параметры.НоменклатураПредставление;
	СерияНоменклатуры=Параметры.СерияНоменклатуры;
	СерияНоменклатурыПредставление=Параметры.СерияНоменклатурыПредставление;
	ИдСтроки=Параметры.ИдСтроки;
	ИдЗадачи=Параметры.ИдЗадачи;
	ПомарочныйУчет=Параметры.ПомарочныйУчет;
	ИдентификаторУпаковки=Параметры.ИдентификаторУпаковки;
	ШтрихкодКороба=Параметры.ШтрихкодКороба;
	КоэффициентКороба=Параметры.КоэффициентКороба;	
	ШтрихкодБутылки	=Параметры.ШтрихкодБутылки;
	КоличествоПлан=Параметры.КоличествоПлан;
	Если ПомарочныйУчет Тогда
		КоличествоФакт=КоличествоМарокНоменклатурыЗадачи();
	иначе
		КоличествоФакт=Параметры.КоличествоФакт;
	КонецЕсли;
	ВидимостьДоступностьЭлементовСервер();
КонецПроцедуры



&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбщийМодульКлиентскойЧасти.ПереопределенияТригераПолучениеШтрихКодаПриОткрытии(ЭтаФорма);
КонецПроцедуры
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	ОбщийМодульКлиентскойЧасти.ПереопределенияТригераПолучениеШтрихКодаПриЗакрытии(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбработчикШтрихКода" и ТригерПриемаСканераШтрихКода тогда
		Если Параметр = 404 и Источник = "ОшибкаЧтения" тогда
			ОбщийМодульКлиентскойЧасти.СообщитьЧерезФорму("Штрих код некорректен");
			Возврат
		КонецЕсли;
		НомерОшибки=0;
		ОбработчкаПолученияДанныхШтрихКода(Параметр);
		ОбработчикОшибокПоНомеру();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура Очистить(Команда)
	ОчиститьНаСервере();
	КоличествоФакт=0;
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итДанныеПомарочногоУчета.Марка КАК Марка,
		|	итДанныеПомарочногоУчета.Ключ КАК Ключ
		|ИЗ
		|	РегистрСведений.итДанныеПомарочногоУчета КАК итДанныеПомарочногоУчета
		|ГДЕ
		|	итДанныеПомарочногоУчета.Ключ = &Ключ
		|	И итДанныеПомарочногоУчета.Номенклатура = &Номенклатура
		|	И итДанныеПомарочногоУчета.СерияНоменклатуры = &СерияНоменклатуры";
	
	Запрос.УстановитьПараметр("Ключ", ИдЗадачи);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("СерияНоменклатуры", СерияНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	НаборЗаписей=РегистрыСведений.итДанныеПомарочногоУчета.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Ключ.Установить(ВыборкаДетальныеЗаписи.Ключ);
	НаборЗаписей.Отбор.Марка.Установить(ВыборкаДетальныеЗаписи.Марка);
	НаборЗаписей.Прочитать();
	Для Каждого стр из НаборЗаписей цикл
		стр.ПризнакОбработки=Ложь;
	КонецЦикла;
	НаборЗаписей.Записать();

	КонецЦикла;

КонецПроцедуры


&НаКлиенте
Процедура Завершить(Команда)
	ОповеститьОВыборе(новый Структура("ИдСтроки,КоличествоФакт,ПомарочныйУчет",ИдСтроки,КоличествоФакт,ПомарочныйУчет));
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура ВидимостьДоступностьЭлементовСервер()
	Если  не ПомарочныйУчет Тогда 
		Элементы.ДекорацияЗаголовокДействия.Заголовок="Укажите количество";
		Элементы.Очистить.Видимость=Ложь;
	иначе
		Элементы.КоличествоФакт.ТолькоПросмотр=Истина;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПроверкаПараметров(Отказ)
	Если не  Параметры.Свойство("Номенклатура") Тогда 
		Отказ=Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не хватает параметров");
		Возврат
	КонецЕсли;	
	Если не  Параметры.Свойство("НоменклатураПредставление") Тогда 
		Отказ=Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не хватает параметров");
		Возврат
	КонецЕсли;
	Если не  Параметры.Свойство("СерияНоменклатуры") Тогда 
		Отказ=Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не хватает параметров");
		Возврат
	КонецЕсли;
	Если не  Параметры.Свойство("СерияНоменклатурыПредставление") Тогда 
		Отказ=Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не хватает параметров");
		Возврат
	КонецЕсли;
	
	Если не  Параметры.Свойство("ИдСтроки") Тогда 
		Отказ=Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не хватает параметров");
		Возврат
	КонецЕсли;
	
	Если не  Параметры.Свойство("ПомарочныйУчет") Тогда 
		Отказ=Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не хватает параметров");
		Возврат
	КонецЕсли;
	Если не  Параметры.Свойство("ШтрихкодКороба") Тогда 
		Отказ=Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не хватает параметров");
		Возврат
	КонецЕсли;
	
	Если не  Параметры.Свойство("КоэффициентКороба") Тогда 
		Отказ=Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не хватает параметров");
		Возврат
	КонецЕсли;
	Если не  Параметры.Свойство("ШтрихкодБутылки") Тогда 
		Отказ=Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не хватает параметров");
		Возврат
	КонецЕсли;                                     
	Если не  Параметры.Свойство("ИдЗадачи") Тогда 
		Отказ=Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не хватает параметров");
		Возврат
	КонецЕсли;
	Если не  Параметры.Свойство("КоличествоПлан") Тогда 
		Отказ=Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не хватает параметров");
		Возврат
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработчкаПолученияДанныхШтрихКода(ШтрихКод)
	Если ПомарочныйУчет Тогда 
		Отказ=Ложь;
		СлужебныеФункцииИПроцедурыКлиентСервер.ПроверитьGTINНаЛеквидность(ШтрихКод,Отказ,Ложь);
		Если Отказ Тогда 
			ОбработчикПодтвержденияМарки(ШтрихКод);
		иначе
			ОбработчикПодтвержденияМарокGTIN(ШтрихКод);
		КонецЕсли;
	иначе
		Если ШтрихКод=ШтрихкодКороба Тогда 
			КоличествоФакт=КоличествоФакт+КоэффициентКороба;
		ИначеЕсли ШтрихКод= ШтрихкодБутылки Тогда 
			КоличествоФакт=КоличествоФакт+1;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
&НаСервере
Процедура ОбработчикПодтвержденияМарокGTIN(ШтрихКод)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итДанныеПомарочногоУчета.Марка КАК Марка
	|ИЗ
	|	РегистрСведений.итДанныеПомарочногоУчета КАК итДанныеПомарочногоУчета
	|ГДЕ
	|	итДанныеПомарочногоУчета.Ключ = &Ключ
	|	И итДанныеПомарочногоУчета.GTIN = &GTIN
	|	И НЕ итДанныеПомарочногоУчета.ПризнакОбработки
	|	И итДанныеПомарочногоУчета.Номенклатура = &Номенклатура
	|	И итДанныеПомарочногоУчета.СерияНоменклатуры = &СерияНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	итДанныеПомарочногоУчета.Марка КАК Марка
	|ИЗ
	|	РегистрСведений.итДанныеПомарочногоУчета КАК итДанныеПомарочногоУчета
	|ГДЕ
	|	итДанныеПомарочногоУчета.Ключ = &Ключ
	|	И итДанныеПомарочногоУчета.GTIN = &GTIN
	|	И итДанныеПомарочногоУчета.ПризнакОбработки
	|	И итДанныеПомарочногоУчета.Номенклатура = &Номенклатура
	|	И итДанныеПомарочногоУчета.СерияНоменклатуры = &СерияНоменклатуры";
	
	Запрос.УстановитьПараметр("GTIN", ШтрихКод);
	Запрос.УстановитьПараметр("Ключ", ИдЗадачи);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("СерияНоменклатуры", СерияНоменклатуры);
	
	МассивРезультатов= Запрос.ВыполнитьПакет();
	РезультатЗапроса1 = МассивРезультатов[0];
	РезультатЗапроса2=МассивРезультатов[1];
	Если РезультатЗапроса1.Пустой() Тогда 
		Если РезультатЗапроса2.Пустой() Тогда 
			НомерОшибки=4;
			//Сообщить("Штрих-код соотв. стандартам GTIN , но марки найдены не были");
		иначе
			НомерОшибки=5;
			//Сообщить("Штрих-код соотв. стандартам GTIN , Все его марки уже числяться обработанными");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	ВыборкаДетальныеЗаписи = РезультатЗапроса1.Выбрать();
	КоличествоМарок=0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей=РегистрыСведений.итДанныеПомарочногоУчета.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Ключ.Установить(ИдЗадачи);
		НаборЗаписей.Отбор.Марка.Установить(ВыборкаДетальныеЗаписи.Марка);
		НаборЗаписей.Прочитать();
		Для Каждого стр из НаборЗаписей цикл
			стр.ПризнакОбработки=Истина;
			КоличествоМарок=КоличествоМарок+1;
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	
	КоличествоФакт=КоличествоФакт+КоличествоМарок;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры
&НаСервере	
Процедура ОбработчикПодтвержденияМарки(ШтрихКод)
	НаборЗаписей=РегистрыСведений.итДанныеПомарочногоУчета.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Ключ.Установить(ИдЗадачи);
	НаборЗаписей.Отбор.Марка.Установить(ШтрихКод);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество()=0 Тогда 
		НомерОшибки=1;
		//Сообщить("нет данных по текущему штрих-коду");
		Возврат
	КонецЕсли;
	Для Каждого стр из НаборЗаписей цикл
		Если стр.ПризнакОбработки Тогда 
			НомерОшибки=2;
			//Сообщить("Марка уже обработана");
			Возврат;
		КонецЕсли;
		Если стр.Номенклатура<>Номенклатура Тогда 
			НомерОшибки=3;
			//Сообщить("Марка не той продукции");
			Продолжить;
		КонецЕсли;
		Если стр.СерияНоменклатуры<>СерияНоменклатуры Тогда 
			НомерОшибки=3;
			//Сообщить("Марка не той продукции");
			Продолжить;
		КонецЕсли;	
		стр.ПризнакОбработки=Истина;
	КонецЦикла;
	НаборЗаписей.Записать();
	КоличествоФакт=КоличествоФакт+1;
КонецПроцедуры

&НаСервере	
Функция КоличествоМарокНоменклатурыЗадачи()
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ итДанныеПомарочногоУчета.Марка) КАК Марка,
	|	итДанныеПомарочногоУчета.SSCC КАК SSCC
	|ИЗ
	|	РегистрСведений.итДанныеПомарочногоУчета КАК итДанныеПомарочногоУчета
	|ГДЕ
	|	итДанныеПомарочногоУчета.Ключ = &Ключ
	|	И итДанныеПомарочногоУчета.SSCC = &SSCC
	|	И итДанныеПомарочногоУчета.ПризнакОбработки
	|	И итДанныеПомарочногоУчета.Номенклатура = &Номенклатура
	|	И итДанныеПомарочногоУчета.СерияНоменклатуры = &СерияНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	итДанныеПомарочногоУчета.SSCC";
	
	Запрос.УстановитьПараметр("SSCC", ИдентификаторУпаковки);
	Запрос.УстановитьПараметр("Ключ", ИдЗадачи);
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	Запрос.УстановитьПараметр("СерияНоменклатуры",СерияНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Возврат ВыборкаДетальныеЗаписи.Марка;
	КонецЕсли;
	Возврат 0;

	
КонецФункции

&НаКлиенте
Процедура ОбработчикОшибокПоНомеру();
	СтруктураДанныхоповещения=новый Структура;
	СтруктураДанныхоповещения.Вставить("ТекстОшибки");
	СтруктураДанныхоповещения.Вставить("АдресМедиаФайла");
	СтруктураДанныхоповещения.Вставить("Вибрация");
	СтруктураДанныхоповещения.Вставить("ЗвуковоеВоспроизведение");
	#Если МобильноеПриложениеКлиент  тогда
	Если НомерОшибки=1 Тогда 
	СтруктураДанныхоповещения.ТекстОшибки="нет данных по текущему штрих-коду";
	СтруктураДанныхоповещения.Вибрация=Истина;
	СтруктураДанныхоповещения.ЗвуковоеВоспроизведение=Истина;
	СтруктураДанныхоповещения.АдресМедиаФайла="НетДанныхПоТекШКMP3";
	ОткрытьФорму("ОбщаяФорма.СообщениеПользователюОбОшибке",СтруктураДанныхоповещения,ЭтаФорма);
	ТригерПриемаСканераШтрихКода=Ложь;    
	КонецЕсли;
	
	Если НомерОшибки=2 Тогда 
		Звук=ПолучитьДанныеЗвука("МаркаОбработанаMP3");
		СредстваМультимедиа.ВоспроизвестиЗвуковоеОповещение(ЗвуковоеОповещение.Нет,Истина);  
		СредстваМультимедиа.ВоспроизвестиАудио(Звук,0,,Истина);	
	КонецЕсли;
	
	Если НомерОшибки=3 Тогда 
	СтруктураДанныхоповещения.ТекстОшибки="Марка не той продукции";
	СтруктураДанныхоповещения.Вибрация=Истина;
	СтруктураДанныхоповещения.ЗвуковоеВоспроизведение=Истина;
	СтруктураДанныхоповещения.АдресМедиаФайла="МаркаНеТойПродукцииMP3";
	ОткрытьФорму("ОбщаяФорма.СообщениеПользователюОбОшибке",СтруктураДанныхоповещения,ЭтаФорма);
	ТригерПриемаСканераШтрихКода=Ложь;  
	КонецЕсли;

	Если НомерОшибки=4 Тогда 
	СтруктураДанныхоповещения.ТекстОшибки="Штрих-код соотв. стандартам GTIN , но марки найдены не были";
	СтруктураДанныхоповещения.Вибрация=Истина;
	СтруктураДанныхоповещения.ЗвуковоеВоспроизведение=Истина;
	СтруктураДанныхоповещения.АдресМедиаФайла="НетМарокКоробаMP3";
	ОткрытьФорму("ОбщаяФорма.СообщениеПользователюОбОшибке",СтруктураДанныхоповещения,ЭтаФорма);
	ТригерПриемаСканераШтрихКода=Ложь; 
    КонецЕсли;
    Если НомерОшибки=5 Тогда 
	Звук=ПолучитьДанныеЗвука("МаркиКоробаОбработаныMp3");
	СредстваМультимедиа.ВоспроизвестиЗвуковоеОповещение(ЗвуковоеОповещение.Нет,Истина);  
	СредстваМультимедиа.ВоспроизвестиАудио(Звук,0,,Истина);	
	КонецЕсли;


	#КонецЕсли

КонецПроцедуры
// Получить данные звука.
// 
// Параметры:
//  АдресМедиаФайла - Строка - Адрес медиа файла
// 
// Возвращаемое значение:
// ДвоичныеДанные - Получить данные звука
&НаСервере	
Функция ПолучитьДанныеЗвука(АдресМедиаФайла)
		Звук=ПолучитьОбщийМакет(АдресМедиаФайла);
		Если ТипЗнч(Звук)=Тип("ДвоичныеДанные") Тогда
		Возврат Звук;	
		КонецЕсли;
		Возврат новый ДвоичныеДанные(Неопределено);
КонецФункции

#КонецОбласти




