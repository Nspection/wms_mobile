
#Область ОбработчикиСобытий
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Объект.Заказ <> СлужебныеФункцииИПроцедурыКлиентСервер.ПустойУникальныйИдентификатор() Тогда 
		ЗаказНайден=Истина;
	КонецЕсли;
	ВидимостьДоступностьЭлементовСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбщийМодульКлиентскойЧасти.ПереопределенияТригераПолучениеШтрихКодаПриОткрытии(ЭтаФорма);
КонецПроцедуры
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если  не НеВозвращатьКонтрольНадТригером Тогда 
	ОбщийМодульКлиентскойЧасти.ПереопределенияТригераПолучениеШтрихКодаПриЗакрытии(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеЗаказаТЧВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ОткрытьФорму("Документ.итРучнаяНаборка.Форма.ФормаПросмотраСтрокиНМ",новый Структура("НоменклатураПредставление,КоличествоПлан,КоличествоФакт",ТекущийЭлемент.ТекущиеДанные.НоменклатураПредставление
	,ТекущийЭлемент.ТекущиеДанные.КоличествоПлан,ТекущийЭлемент.ТекущиеДанные.КоличествоФакт),ЭтаФорма);
	ТригерПриемаСканераШтрихКода=Ложь;
КонецПроцедуры
&НаКлиенте
Процедура ДанныеСканированияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ОткрытьФорму("Документ.итРучнаяНаборка.Форма.ФормаПросмотраСтрокиНМ",новый Структура("НоменклатураПредставление,Количество,ЯчейкаПредставление,ДатаРозлива,ИдентификаторУпаковки",ТекущийЭлемент.ТекущиеДанные.НоменклатураПредставление
	,ТекущийЭлемент.ТекущиеДанные.Количество,ТекущийЭлемент.ТекущиеДанные.ЯчейкаПредставление,ТекущийЭлемент.ТекущиеДанные.ДатаРозлива,ТекущийЭлемент.ТекущиеДанные.ИдентификаторУпаковки),ЭтаФорма);
	ТригерПриемаСканераШтрихКода=Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы= "Документ.итРучнаяНаборка.Форма.ФормаПоискаЗаказа" тогда
		 УстановитьДанныеЗаказаВДокумент(ВыбранноеЗначение);
		 //ВидимостьДоступностьЭлементовКлиент();
		 ПодключитьОбработчикОжидания("ЗакрытиеФормыОжиданием",0.1,Истина);
		 ОткрытьФорму("Документ.итРучнаяНаборка.Форма.ФормаДокумента",новый Структура("Ключ",Объект.Ссылка),ЭтаФорма.ВладелецФормы,новый УникальныйИдентификатор());
	 КонецЕсли;   
	 Если ИсточникВыбора.ИмяФормы= "Документ.итРучнаяНаборка.Форма.ФормаВыборкаНоменклатурыИдентификатора" тогда
		   ДобавитьДанныеСканирования(ВыбранноеЗначение);
		   Оповестить("ДобавлениеДанныхРучнаяНаборка",,ЭтаФорма);
     КонецЕсли;

 КонецПроцедуры
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия="ОбработчикШтрихКода"  и ТригерПриемаСканераШтрихКода тогда
		Если Параметр=404 и Источник="ОшибкаЧтения" тогда
			ОбщийМодульКлиентскойЧасти.СообщитьЧерезФорму("Штрих код некорректен");
			Возврат
		КонецЕсли;	
		 ОбработчкаПолученияДанныхШтрихКода(Параметр);
	 КонецЕсли;

КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКоманд
&НаСервере
Процедура ОтказатьсяОтДокументаНаСервере()
ОбъектДанных=Объект.Ссылка.ПолучитьОбъект();
ОбъектДанных.Удалить();
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьсяОтДокументаОповещение(Результат,Параметры)Экспорт
	Если Результат=КодВозвратаДиалога.Нет тогда
		Возврат
	КонецЕсли;
	ОтказатьсяОтДокументаНаСервере();
	ОбщийМодульКлиентскойЧасти.ОповещениеДинамическихСписковОткрытыхФорм();
	ОповеститьОВыборе(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьсяОтДокумента(Команда)
	Оповещение = новый ОписаниеОповещения("ОтказатьсяОтДокументаОповещение",ЭтаФорма);
	ПоказатьВопрос(Оповещение,"Вы точно хотите удалить данные документа",РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	ЭтаФорма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьсяКЗаказу(Команда)
ОткрытьФорму("Документ.итРучнаяНаборка.Форма.ФормаПоискаЗаказа",,ЭтаФорма);
ТригерПриемаСканераШтрихКода=Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьНаборку(Команда)
Сообщение=ПолучитьДанныеРасхождений();
Оповещение=новый ОписаниеОповещения("ЗавершитьНаборкуОвоещение",ЭтаФорма);
ПоказатьВопрос(Оповещение,Сообщение+ " Вы точно хотите завершить наборку ?",РежимДиалогаВопрос.ДаНет);
КонецПроцедуры
&НаКлиенте
Процедура ЗавершитьНаборкуОвоещение(Результат,Параметры) Экспорт 
	Если  Результат=КодВозвратаДиалога.Нет Тогда 
		Возврат
	КонецЕсли;
	Если ЗавершитьНаборкуНаСервере(Истина) Тогда 
		ОтказатьсяОтДокументаНаСервере();
		ОповеститьОВыборе(Истина);
	КонецЕсли;	
КонецПроцедуры
&НаСервере
Процедура УдалитьНаСервере(ИдентификаторСтроки)
	НачатьТранзакцию();
	Попытка
		Строка=Объект.ДанныеСканирования.НайтиПоИдентификатору(ИдентификаторСтроки);
		Строки=Объект.ДанныеЗаказа.НайтиСтроки(новый Структура("Номенклатура",Строка.Номенклатура));
		Для Каждого стр из Строки цикл
			стр.КоличествоФакт=стр.КоличествоФакт-Строка.Количество;
		КонецЦикла;
		Объект.ДанныеСканирования.Удалить(Строка);
		ЭтаФорма.Записать();
		ОпределеитьКакиеЯчейкиУжеОбошли();
		ЭтаФорма.Записать();
		Если  не ЗавершитьНаборкуНаСервере() Тогда 
			ВызватьИсключение "ошибка внесения данных на сервер";
		КонецЕсли;	
	Исключение
		ОтменитьТранзакцию();
		ОбъектДанных=Объект.Ссылка.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(ОбъектДанных,"Объект");
		Сообщить("Ошибка транзакции, данные не были изменены"+" "+ОписаниеОшибки());
	КонецПопытки;
	ЗафиксироватьТранзакцию();
КонецПроцедуры

&НаКлиенте
Процедура Удалить(Команда)
	ИдентификаторСтроки=ТекущийЭлемент.ТекущиеДанные.ПолучитьИдентификатор();
	УдалитьНаСервере(ИдентификаторСтроки);
КонецПроцедуры

&НаКлиенте
Процедура НайтиДанные(Команда)
	СтруктураДанных=новый Структура;
	СтруктураДанных.Вставить("НоменклатураПредставление",ТекущийЭлемент.ТекущиеДанные.НоменклатураПредставление);
	СтруктураДанных.Вставить("Номенклатура",ТекущийЭлемент.ТекущиеДанные.Номенклатура);
    СтруктураДанных.Вставить("СсылкаНаОбъект",Объект.Ссылка);
	ОткрытьФорму("Документ.итРучнаяНаборка.Форма.ФормаПоиска",СтруктураДанных,ЭтаФорма,новый УникальныйИдентификатор());
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаКлиенте
Процедура ВидимостьДоступностьЭлементовКлиент()
	ВидимостьДоступностьЭлементовСервер();
КонецПроцедуры
&НаСервере
Процедура ВидимостьДоступностьЭлементовСервер()
	Если ЗаказНайден Тогда 
		Элементы.ПодключитьсяКЗаказу.Видимость=Ложь;
		Элементы.ЗавершитьНаборку.Видимость=Истина;
		Элементы.Страницы.Видимость=Истина;
	    иначе
		Элементы.ПодключитьсяКЗаказу.Видимость=Истина;
		Элементы.ЗавершитьНаборку.Видимость=Ложь;
		Элементы.Страницы.Видимость=Ложь;
    КонецЕсли;
КонецПроцедуры

&НаСервере	
Процедура УстановитьДанныеЗаказаВДокумент(СтруктураДанныхЗаказа)
Объект.Заказ=СтруктураДанныхЗаказа.Заказ;
Объект.НомерЗаказа=СтруктураДанныхЗаказа.НомерЗаказа;
Объект.ДатаЗаказа=СтруктураДанныхЗаказа.ДатаЗаказа;
Для Каждого стр из СтруктураДанныхЗаказа.МассивДанныхНмЗаказа цикл
	ЗаполнитьЗначенияСвойств(Объект.ДанныеЗаказа.Добавить(),стр);
КонецЦикла;
Для Каждого стр из СтруктураДанныхЗаказа.МассивДанныхЯчеечногоУчета цикл
	ЗаполнитьЗначенияСвойств(Объект.ДанныеЯчеечногоУчета.Добавить(),стр);
КонецЦикла;
ЭтаФорма.Записать();
ЗаказНайден=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчкаПолученияДанныхШтрихКода(ШтрихКод)
Отказ=Ложь;
СлужебныеФункцииИПроцедурыКлиентСервер.ПроверитьSSCCНаЛеквидность(ШтрихКод,Отказ);
Если Отказ Тогда 
	Возврат
КонецЕсли;
ДанныеSSCC=ПолучитьДанныеSSCC(ШтрихКод);
Если ДанныеSSCC=Неопределено Тогда 
	Возврат
КонецЕсли;
Сообщение="";
АнализПолученныхДанныхSSCC(ДанныеSSCC,Сообщение);
ДанныеSSCC.Вставить("Сообщение",Сообщение);
Если ДанныеSSCC.МассивДанных.Количество()=0 Тогда
	Если  Сообщение<>"" Тогда 
		Сообщить(Сообщение);
		Возврат;
	иначе
		Сообщить("По данному SSCC  не найдено свободных остатков");
		Возврат;
	КонецЕсли;	
КонецЕсли;
ДанныеSSCC.Вставить("Объект",Объект.Ссылка);
ДанныеSSCC.Вставить("ИдентификаторУпаковки",ШтрихКод);
ОткрытьФорму("Документ.итРучнаяНаборка.Форма.ФормаВыборкаНоменклатурыИдентификатора",ДанныеSSCC,ЭтаФорма);
ТригерПриемаСканераШтрихКода=Ложь;
КонецПроцедуры
&НаСервере
Процедура АнализПолученныхДанныхSSCC(ДанныеSSCC,Сообщение)
	Индекс=0;
	Смещение=0;
	Для Каждого стр из  ДанныеSSCC.МассивДанных цикл
		ДанныеСтрокиСканирования=Объект.ДанныеСканирования.НайтиСтроки(новый Структура("Номенклатура,ИдентификаторУпаковки,Ячейка,ДатаРозлива,СерияНоменклатуры,Качество",
		стр.Номенклатура,стр.ИдентификаторУпаковки,стр.Ячейка,стр.ДатаРозлива,стр.СерияНоменклатуры,стр.Качество));
		Если ДанныеСтрокиСканирования.Количество()>0 Тогда 
			Для Каждого НайденнаяСтрока из ДанныеСтрокиСканирования цикл
				стр.Количество=стр.Количество-НайденнаяСтрока.Количество;
				Сообщение=Сообщение+"
				|из этого SSCC уже набранна номенклатура: "+НайденнаяСтрока.НоменклатураПредставление +" в количестве "+НайденнаяСтрока.Количество; 
			КонецЦикла;
		КонецЕсли;
		Если стр.Количество=0 Тогда 
			ДанныеSSCC.МассивДанных.Удалить(Индекс-Смещение);
			Смещение=Смещение+1;
		КонецЕсли;
		Индекс=Индекс+1;
	КонецЦикла;
	
	КонецПроцедуры
&НаСервере
Функция ПолучитьДанныеSSCC(ШтрихКод)
СтруктураЗапросаДанных=новый Структура;
СтруктураЗапросаДанных.Вставить("ТипОбработкиДанных","ПоискДанныхПоSSCC");
СтруктураЗапросаДанных.Вставить("КлючИнициализацииДанных",ШтрихКод);
СтруктураЗапросаДанных.Вставить("Заказ",Объект.Заказ);
СтруктураЗапросаДанных=ОбработчикиЗапросаСервера.ЗапроситьДанные(СтруктураЗапросаДанных,"HandDial");
Если СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(СтруктураЗапросаДанных,"МассивДанных") Тогда 
	Возврат Неопределено;
КонецЕсли;	
Возврат СтруктураЗапросаДанных;
КонецФункции

&НаСервере
Процедура ДобавитьДанныеСканирования(СтруктураДанных)
НачатьТранзакцию();
Попытка
Строки=Объект.ДанныеСканирования.НайтиСтроки(новый Структура("Номенклатура,СерияНоменклатуры,Ячейка,ИдентификаторУпаковки,Качество",
СтруктураДанных.Номенклатура,СтруктураДанных.СерияНоменклатуры,СтруктураДанных.Ячейка,СтруктураДанных.ИдентификаторУпаковки,СтруктураДанных.Качество));
Если Строки.Количество()=0 тогда
НоваяСтрока=Объект.ДанныеСканирования.Добавить();
НоваяСтрока.ИдентификаторСтроки=новый УникальныйИдентификатор();
ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураДанных);
иначе
Строки[0].Количество=Строки[0].Количество+СтруктураДанных.Количество;
КонецЕсли;

Строки=Объект.ДанныеЗаказа.НайтиСтроки(новый Структура("Номенклатура",СтруктураДанных.Номенклатура));
Если Строки.Количество()=0 тогда
ВызватьИсключение "Ошибка исполнения добавления, данные не соответствую заказу";
иначе
Строки[0].КоличествоФакт=Строки[0].КоличествоФакт+СтруктураДанных.Количество;
КонецЕсли;
ЭтаФорма.Записать();
ОпределеитьКакиеЯчейкиУжеОбошли();
ЭтаФорма.Записать();
Если  не ЗавершитьНаборкуНаСервере() Тогда 
ВызватьИсключение "ошибка внесения данных на сервер";
КонецЕсли;		
Исключение
ОтменитьТранзакцию();
ОбъектДанных=Объект.Ссылка.ПолучитьОбъект();
ЗначениеВРеквизитФормы(ОбъектДанных,"Объект");
Сообщить("Ошибка транзакции, данные не были изменены"+" "+ОписаниеОшибки());
КонецПопытки;
ЗафиксироватьТранзакцию();
КонецПроцедуры

&НаСервере
Процедура ОпределеитьКакиеЯчейкиУжеОбошли()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итРучнаяНаборкаДанныеСканирования.Ячейка КАК Ячейка,
		|	итРучнаяНаборкаДанныеСканирования.Номенклатура КАК Номенклатура,
		|	итРучнаяНаборкаДанныеСканирования.НоменклатураПредставление КАК НоменклатураПредставление,
		|	итРучнаяНаборкаДанныеСканирования.СерияНоменклатуры КАК СерияНоменклатуры,
		|	итРучнаяНаборкаДанныеСканирования.ДатаРозлива КАК ДатаРозлива
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	Документ.итРучнаяНаборка.ДанныеСканирования КАК итРучнаяНаборкаДанныеСканирования
		|ГДЕ
		|	итРучнаяНаборкаДанныеСканирования.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	итРучнаяНаборкаДанныеСканирования.Ячейка,
		|	итРучнаяНаборкаДанныеСканирования.Номенклатура,
		|	итРучнаяНаборкаДанныеСканирования.НоменклатураПредставление,
		|	итРучнаяНаборкаДанныеСканирования.СерияНоменклатуры,
		|	итРучнаяНаборкаДанныеСканирования.ДатаРозлива
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	итРучнаяНаборкаДанныеЯчеечногоУчета.Ссылка КАК Ссылка,
		|	итРучнаяНаборкаДанныеЯчеечногоУчета.НомерСтроки КАК НомерСтроки,
		|	итРучнаяНаборкаДанныеЯчеечногоУчета.Номенклатура КАК Номенклатура,
		|	итРучнаяНаборкаДанныеЯчеечногоУчета.НоменклатураПредставление КАК НоменклатураПредставление,
		|	итРучнаяНаборкаДанныеЯчеечногоУчета.Ячейка КАК Ячейка,
		|	итРучнаяНаборкаДанныеЯчеечногоУчета.ЯчейкаПредставление КАК ЯчейкаПредставление,
		|	итРучнаяНаборкаДанныеЯчеечногоУчета.ДатаРозлива КАК ДатаРозлива,
		|	итРучнаяНаборкаДанныеЯчеечногоУчета.СерияНоменклатуры КАК СерияНоменклатуры,
		|	итРучнаяНаборкаДанныеЯчеечногоУчета.СерияНоменклатурыПредставление КАК СерияНоменклатурыПредставление,
		|	итРучнаяНаборкаДанныеЯчеечногоУчета.Количество КАК Количество,
		|	итРучнаяНаборкаДанныеЯчеечногоУчета.ЯчейкаУжеИспользуется КАК ЯчейкаУжеИспользуется
		|ПОМЕСТИТЬ Вт2
		|ИЗ
		|	Документ.итРучнаяНаборка.ДанныеЯчеечногоУчета КАК итРучнаяНаборкаДанныеЯчеечногоУчета
		|ГДЕ
		|	итРучнаяНаборкаДанныеЯчеечногоУчета.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Вт2.Ссылка КАК Ссылка,
		|	Вт2.НомерСтроки КАК НомерСтроки,
		|	Вт2.Номенклатура КАК Номенклатура,
		|	Вт2.НоменклатураПредставление КАК НоменклатураПредставление,
		|	Вт2.Ячейка КАК Ячейка,
		|	Вт2.ЯчейкаПредставление КАК ЯчейкаПредставление,
		|	Вт2.ДатаРозлива КАК ДатаРозлива,
		|	Вт2.СерияНоменклатуры КАК СерияНоменклатуры,
		|	Вт2.СерияНоменклатурыПредставление КАК СерияНоменклатурыПредставление,
		|	Вт2.Количество КАК Количество,
		|	ВЫБОР
		|		КОГДА ВТ.НоменклатураПредставление ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЯчейкаУжеИспользуется
		|ИЗ
		|	Вт2 КАК Вт2
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ КАК ВТ
		|		ПО Вт2.Ячейка = ВТ.Ячейка
		|			И Вт2.Номенклатура = ВТ.Номенклатура
		|			И Вт2.СерияНоменклатуры = ВТ.СерияНоменклатуры
		|			И Вт2.ДатаРозлива = ВТ.ДатаРозлива";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    Объект.ДанныеЯчеечногоУчета.Очистить();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Объект.ДанныеЯчеечногоУчета.Добавить(),ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	КонецПроцедуры
&НаСервере
Функция ПолучитьДанныеРасхождений()
			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итРучнаяНаборкаДанныеЗаказа.НоменклатураПредставление КАК НоменклатураПредставление,
		|	итРучнаяНаборкаДанныеЗаказа.КоличествоПлан - итРучнаяНаборкаДанныеЗаказа.КоличествоФакт КАК Расхождения
		|ИЗ
		|	Документ.итРучнаяНаборка.ДанныеЗаказа КАК итРучнаяНаборкаДанныеЗаказа
		|ГДЕ
		|	итРучнаяНаборкаДанныеЗаказа.Ссылка = &Ссылка
		|	И итРучнаяНаборкаДанныеЗаказа.КоличествоПлан <> итРучнаяНаборкаДанныеЗаказа.КоличествоФакт";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Сообщение="";
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
    Сообщение=Сообщение+" 
	| Для номенклатуры: "+ВыборкаДетальныеЗаписи.НоменклатураПредставление  +" не хватает количества "+Строка(ВыборкаДетальныеЗаписи.Расхождения );
	КонецЦикла;
	Возврат Сообщение;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецФункции
&НаСервере
Функция  ЗавершитьНаборкуНаСервере(ЗавершениеНаборки=Ложь)
СтруктураЗапросаДанных=новый Структура;
СлужебныеФункцииИПроцедурыКлиентСервер.СформироватьСтруктуруДанныхОПользователе(СтруктураЗапросаДанных);
СтруктураЗапросаДанных.Вставить("ТипОбработкиДанных","ВнесениеИзмененийВРучнуюНаборку");
СтруктураЗапросаДанных.Вставить("КлючИнициализацииДанных",новый Структура("ДатаЗаказа,НомерЗаказа,Заказ",Объект.ДатаЗаказа,Объект.НомерЗаказа,Объект.Заказ));
СтруктураЗапросаДанных.Вставить("ГуидДокумента",Объект.Ссылка.УникальныйИдентификатор());
СтруктураЗапросаДанных.Вставить("ЗавершениеНаборки",ЗавершениеНаборки);
СтруктураЗапросаДанных.Вставить("Данные",Объект.ДанныеСканирования.Выгрузить());
СтруктураЗапросаДанных=ОбработчикиЗапросаСервера.ЗапроситьДанные(СтруктураЗапросаДанных,"HandDial");
Если СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(СтруктураЗапросаДанных,"СозданДокумент") Тогда 
	Возврат Ложь;
КонецЕсли;
Возврат Истина;
	КонецФункции

 &НаКлиенте
Процедура ЗакрытиеФормыОжиданием() Экспорт 
	 НеВозвращатьКонтрольНадТригером=Истина;
	 ЭтаФорма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеДанныхЯчеечногоУчета(СтруктураДанных) Экспорт 
ОбновитьДанныеЯчеечногоУчетаСервер();
ОткрытьФорму("Документ.итРучнаяНаборка.Форма.ФормаПоиска",СтруктураДанных,ЭтаФорма);
КонецПроцедуры

Процедура ОбновитьДанныеЯчеечногоУчетаСервер()
	СтруктураЗапросаДанных=новый Структура;
	СлужебныеФункцииИПроцедурыКлиентСервер.СформироватьСтруктуруДанныхОПользователе(СтруктураЗапросаДанных);
	СтруктураЗапросаДанных.Вставить("ТипОбработкиДанных","ОбновитьДанныеЯчеечногоУчета");
	СтруктураЗапросаДанных.Вставить("КлючИнициализацииДанных",Объект.Заказ);
	СтруктураЗапросаДанных=ОбработчикиЗапросаСервера.ЗапроситьДанные(СтруктураЗапросаДанных,"HandDial");
	Если СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(СтруктураЗапросаДанных,"МассивДанныхЯчеечногоУчета") Тогда 
		Сообщить("Обновление не удалось");
		Возврат;
	КонецЕсли;
	НачатьТранзакцию();
	Попытка
		Объект.ДанныеЯчеечногоУчета.Очистить();
		Для Каждого стр из СтруктураЗапросаДанных.МассивДанныхЯчеечногоУчета цикл
			ЗаполнитьЗначенияСвойств(Объект.ДанныеЯчеечногоУчета.Добавить(),стр);
		КонецЦикла;
		ОпределеитьКакиеЯчейкиУжеОбошли();
		ЭтаФорма.Записать();
	Исключение
		ОтменитьТранзакцию();
		ОбъектДанных=Объект.Ссылка.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(ОбъектДанных,"Объект");
		Сообщить("Ошибка транзакции, данные не были изменены"+" "+ОписаниеОшибки());
	КонецПопытки;
	ЗафиксироватьТранзакцию();
КонецПроцедуры
#КонецОбласти

