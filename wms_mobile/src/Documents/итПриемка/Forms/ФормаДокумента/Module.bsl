#Область ОбработчикиСобытий
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗадачиТСД.Параметры.УстановитьЗначениеПараметра("ДокументОснование",Объект.Ссылка);
	ЗадачиТСД.Параметры.УстановитьЗначениеПараметра("ТипЗадачи",Объект.ТипЗадачи);
	Если Объект.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.Приемка тогда
		Элементы.НадписьСканирования.Видимость=Истина;
		Элементы.НовыйSSCC.Видимость=Ложь;
		Элементы.ПрисвоитьВнешнийSSCC.Видимость=Ложь;
	иначе
		Элементы.НадписьСканирования.Заголовок="Сканируйте SSCC или получите ";
		Элементы.НовыйSSCC.Видимость=Истина;
		Элементы.ПрисвоитьВнешнийSSCC.Видимость=Истина;
	КонецЕсли;
	ПомарочныйУчет=Объект.ПомарочныйУчет;
	//Элементы.НовыйSSCC.Видимость=?(Элементы.НовыйSSCC.Видимость=Ложь,Ложь,не ПомарочныйУчет);
	Исполняется=ИнфорацияОСтатусеДокумента();
КонецПроцедуры
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбщийМодульКлиентскойЧасти.ПереопределенияТригераПолучениеШтрихКодаПриОткрытии(ЭтаФорма);	
	Если Объект.ЯчейкаПолучательПредставление <> "" тогда
		Элементы.ЯчейкаПолучательПредставление.Заголовок= Объект.ЯчейкаПолучательПредставление;
	КонецЕсли;	
КонецПроцедуры
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	ОбщийМодульКлиентскойЧасти.ПереопределенияТригераПолучениеШтрихКодаПриЗакрытии(ЭтаФорма);
КонецПроцедуры
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия="ОбработчикШтрихКода"  и ТригерПриемаСканераШтрихКода тогда
		Если Параметр=404 и Источник="ОшибкаЧтения" тогда
			ОбщийМодульКлиентскойЧасти.СообщитьЧерезФорму("Штрих код некорректен");
			Возврат
		КонецЕсли;	
		 ОбработчкаПолученияДанныхШтрихКода(Параметр);
	 КонецЕсли;
	 Если ИмяСобытия="ОбновлениеДанныхДинамическихСписков" и Источник=ОбщийМодульКлиентскойЧасти тогда
		//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(,"+#ПриемкаФормаДокумента ОбновлениеДанныхДинамическихСписков");
		Элементы.ЗадачиТСД.Обновить();
		//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(,"-#ПриемкаФормаДокумента ОбновлениеДанныхДинамическихСписков");
	 КонецЕсли;
КонецПроцедуры	
&НаКлиенте
Процедура ЗадачиТСДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ИдентификаторУпаковки) тогда
	Оповещение = новый ОписаниеОповещения("ПечатьИдентификатораУпаковкиОповещение",ЭтаФорма,Элемент.ТекущиеДанные.ИдентификаторУпаковки);
    ПоказатьВопрос(Оповещение,"Хотите распечатать текущий идентификатор?",РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПечатьИдентификатораУпаковкиОповещение(Результат,Параметры) Экспорт
	Если Результат=КодВозвратаДиалога.Нет тогда
		Возврат
	КонецЕсли;	
ОткрытьФорму("ОбщаяФорма.ВыборПринтераДляПечати",Новый Структура("ИдентификаторУпаковки",Параметры),ЭтаФорма);
ТригерПриемаСканераШтрихКода=Ложь;
	КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы= "ОбщаяФорма.СканированиеЯчейки" тогда
		Если не ЗначениеЗаполнено(ВыбранноеЗначение.Ячейка) тогда
			ЗаписьИзмененийНаСервере(ВыбранноеЗначение);
			Элементы.ЯчейкаПолучательПредставление.Заголовок="Присвоить зону приемки";
		иначе
			ЗаписьИзмененийНаСервере(ВыбранноеЗначение);
            Элементы.ЯчейкаПолучательПредставление.Заголовок=ВыбранноеЗначение.ЯчейкаПредставление;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры
&НаКлиенте
Процедура ЯчейкаПолучательПредставлениеНажатие(Элемент)
	СтандартнаяОбработка=Ложь;
	ОткрытьФорму("ОбщаяФорма.СканированиеЯчейки",Новый Структура("ПолеПолучательИдентификатор,ПолеПолучательПредставление","ЯчейкаПолучатель","ЯчейкаПолучательПредставление"),ЭтаФорма);
	ТригерПриемаСканераШтрихКода=Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд
&НаКлиенте
Процедура Назад(Команда)
	ЭтаФорма.Закрыть()
КонецПроцедуры
&НаКлиенте
Процедура ЗакончитьПриемку(Команда)
	СтруктураОтвета=ПолучитьДанныеПроверки();
	Если СтруктураОтвета.ТекстОшибки<>"" тогда
		ОбщийМодульКлиентскойЧасти.СообщитьЧерезФорму(СтруктураОтвета.ТекстОшибки);
		Возврат
	КонецЕсли;
	Оповещение=новый ОписаниеОповещения("ЗакончитьПриемкуОповещение",ЭтаФорма);
	ПоказатьВопрос(Оповещение,СтруктураОтвета.ТекстПредупреждения+"
	| ВЫ ХОТИТЕ ЗАВЕРШИТЬ ПРИЕМКУ??",РежимДиалогаВопрос.ДаНет);
КонецПроцедуры
&НаКлиенте
Процедура ЗакончитьПриемкуОповещение(Результат,Параметры)Экспорт
	Если Результат = КодВозвратаДиалога.Нет тогда
		Возврат
	КонецЕсли;
	Если ЗакончитьПриемкуНаСервере() тогда
		ОбщийМодульКлиентскойЧасти.ОповещениеДинамическихСписковОткрытыхФорм();
		ЭтаФорма.Закрыть();
	КонецЕсли;	
КонецПроцедуры
&НаСервере
Функция  ЗакончитьПриемкуНаСервере()
	Если ПомарочныйУчет Тогда 
		Отказ=Ложь;
		ПроверитьРасхожденияПМУ(Отказ);
		//Если Отказ Тогда 
		//	Возврат Ложь;
		//КонецЕсли;	
	КонецЕсли;	
	СтруктураДанных =новый Структура;
	СлужебныеФункцииИПроцедурыКлиентСервер.СформироватьСтруктуруДанныхОПользователе(СтруктураДанных);
	ЗадачаДокумента= ПолучитьЗадачуДокумента();
	Если ЗадачаДокумента=Неопределено тогда
		Сообщить("По документу не обнаруженно данных");
		Возврат Ложь;
	КонецЕсли;	

	СтруктураДанных.Вставить("КлючИнициализацииДанных",ЗадачаДокумента);
	СтруктураДанных.Вставить("ТипЗадачи",Объект.ТипЗадачи);
	СтруктураДанных.Вставить("ТипИнициализации","Документ");
	СтруктураДанных.Вставить("СостояниеИнициализации",Перечисления.итWMSСостоянияЗадачТСД.Выполнена);
	СтруктураДанных.Вставить("Инициализация",Ложь);
    СтруктураДанных.Вставить("ФиксацияЗадачи",Истина);
	СтруктураДанных=ОбработчикиЗапросаСервера.ЗапроситьДанные(СтруктураДанных,"Initialization");
	СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(СтруктураДанных,"Инициализация");
	МодульРаспределенияДанных.ОбработчикВходящихДанных(СтруктураДанных);

	Возврат  СтруктураДанных.Инициализация;

КонецФункции
&НаКлиенте
Процедура ОтказатьсяОтЗадачи(Команда)
	Оповещение=новый ОписаниеОповещения("ОтказатьсяОтЗадачиОповещение",ЭтаФорма);
	ПоказатьВопрос(Оповещение,"Вы точно хотите отказаться от Задачи",РежимДиалогаВопрос.ДаНет);
КонецПроцедуры
&НаКлиенте
Процедура ОтказатьсяОтЗадачиОповещение(Результат,Параметры) Экспорт 
	Если Результат=КодВозвратаДиалога.Нет тогда
		Возврат
	КонецЕсли;	
	Если ОтказатьсяОтЗадачиНаСервере() тогда
		ОбщийМодульКлиентскойЧасти.ОповещениеДинамическихСписковОткрытыхФорм();
		ЭтаФорма.Закрыть();
	иначе
		ОбщийМодульКлиентскойЧасти.СообщитьЧерезФорму("не удачная попытка отказа от задачи, попробуйте еще раз, или подойтиде к оператору");
	КонецЕсли;	
	КонецПроцедуры
&НаСервере
Функция  ОтказатьсяОтЗадачиНаСервере()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИтЗадачиНаТСД.ИдЗадачи КАК ИдЗадачи,
		|	ИтЗадачиНаТСД.ТипЗадачи КАК ТипЗадачи,
		|	ИтЗадачиНаТСД.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
		|ГДЕ
		|	ИтЗадачиНаТСД.ДокументОснование = &ДокументОснование
		|	И ИтЗадачиНаТСД.ТипЗадачи = &ТипЗадачи";
	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТипЗадачи", Объект.ТипЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	СтруктураОтказаЗадачи=новый Структура;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		для Каждого Колонка из РезультатЗапроса.Колонки цикл
			СтруктураОтказаЗадачи.Вставить(Колонка.Имя,ВыборкаДетальныеЗаписи[Колонка.Имя]);
		КонецЦикла;
	КонецЦикла;
    Возврат ОбработчикДанныхОбщиеФункцииИПроцедуры.ИнициализацияЗадачиНаСервере(СтруктураОтказаЗадачи,"ДокументОтказ",Перечисления.итWMSСостоянияЗадачТСД.КВыполнению);
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции
&НаКлиенте
Процедура НовыйSSCC(Команда)
	Оповещение=новый ОписаниеОповещения("НовыйSSCCОповещение",ЭтаФорма);
	ПоказатьВопрос(Оповещение,"Запросить новый SSCC на сервере?",РежимДиалогаВопрос.ДаНет);
	
	
КонецПроцедуры
&НаКлиенте
Процедура НовыйSSCCОповещение(Результат,Параметры)Экспорт 
	Если Результат=КодВозвратаДиалога.Нет тогда
		Возврат
	КонецЕсли;	
	НовыйSSCCНаСервере();
КонецПроцедуры

&НаСервере
Процедура НовыйSSCCНаСервере()
	СтруктураДанных=новый Структура;
	СлужебныеФункцииИПроцедурыКлиентСервер.СформироватьСтруктуруДанныхОПользователе(СтруктураДанных);
	СтруктураДанных.Вставить("ТипОбработкиДанных","НовыйSSCCПриемкаКакЕсть");
	СтруктураДанных.Вставить("КлючИнициализацииДанных",Объект.ГУИД);
	СтруктураДанных.Вставить("ТипЗадачи",Объект.ТипЗадачи);
	СтруктураДанных=ОбработчикиЗапросаСервера.ЗапроситьДанные(СтруктураДанных,"Acceptance");
	Если СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(СтруктураДанных) тогда
		Возврат
	КонецЕсли;	
	МодульРаспределенияДанных.ОбработчикВходящихДанных(СтруктураДанных);
	Элементы.ЗадачиТСД.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ПрисвоитьВнешнийSSCC(Команда)
	ОткрытьФорму("Документ.итПриемка.Форма.СчитываниеВнешнегоSSCC",новый Структура("ОбъектДанных",Объект.Ссылка),ЭтаФорма);
	ТригерПриемаСканераШтрихКода=Ложь;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Процедура - Запись изменений на сервере
// записывает выбранную ячейку как зону приемки документа
// Параметры:
//  ВыбранноеЗначение	 - Структура - фиксированная структура со свойствами "Ячейка" , "ЯчейкаПредставление" 
//
&НаСервере
Процедура ЗаписьИзмененийНаСервере(ВыбранноеЗначение)
ОбъектИзменения=Объект.Ссылка.ПолучитьОбъект();
Если не ЗначениеЗаполнено(ВыбранноеЗначение.Ячейка) тогда
	ОбъектИзменения.ЯчейкаПолучатель=СлужебныеФункцииИПроцедурыКлиентСервер.ПустойУникальныйИдентификатор();
	ОбъектИзменения.ЯчейкаПолучательПредставление="";	
иначе	
	ОбъектИзменения.ЯчейкаПолучатель=ВыбранноеЗначение.Ячейка;
	ОбъектИзменения.ЯчейкаПолучательПредставление=ВыбранноеЗначение.ЯчейкаПредставление;	
КонецЕсли;
ОбъектИзменения.Записать();
ЗначениеВРеквизитФормы(ОбъектИзменения,"Объект");
КонецПроцедуры

// Функция - Инфорация о статусе документа
// Определяет началась ли работа с документом
// Возвращаемое значение:
// Булево  - Если Истина тогда документ считается в работе. 
//
&НаСервере
Функция ИнфорацияОСтатусеДокумента()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ИтЗадачиНаТСД.Состояние = ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.Выполнена)
	|					ИЛИ ИтЗадачиНаТСД.Состояние = ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.Выполняется)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Статус
	|ИЗ
	|	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
	|ГДЕ
	|	ИтЗадачиНаТСД.ДокументОснование = &ДокументОснование
	|	И ИтЗадачиНаТСД.ТипЗадачи = &ТипЗадачи";
	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТипЗадачи", Объект.ТипЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		Если  ВыборкаДетальныеЗаписи.Статус=1 тогда
			Возврат Истина;
		иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции

// Процедура - Видимость элементов
// состоит из клиента и сервера, определяет видимость и доступность элементов
// при различных ситуациях
&НаКлиенте
Процедура ВидимостьЭлементов()
	ВидимостьЭлементовНаСервере();
КонецПроцедуры
&НаСервере
Процедура  ВидимостьЭлементовНаСервере()
	Элементы.НачатьПроцессПриемки.Видимость=не Исполняется;
	Элементы.ФормаЗакончитьПриемку.Видимость=Исполняется;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчкаПолученияДанныхШтрихКода(ШтрихКод)
СтруктураОтвета=СлужебныеФункцииИПроцедурыКлиентСервер.ПолучитьДанныеИзИтЗадачиТСД(ШтрихКод);
ПредставлениеТипаЗадачи=СлужебныеФункцииИПроцедурыКлиентСервер.ПредставлениеТипаЗадачиТСД(Объект.ТипЗадачи);
Если СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(СтруктураОтвета,ПредставлениеТипаЗадачи) тогда
	Возврат
КонецЕсли;
Если ИнициализацияЗадачиНаСервере(СтруктураОтвета[ПредставлениеТипаЗадачи]) тогда
ОткрытьФорму("Документ.итПриемка.Форма.ФормаЗадачиДокумента",СтруктураОтвета[ПредставлениеТипаЗадачи],ЭтаФорма);
ТригерПриемаСканераШтрихКода=Ложь;
иначе
ОбщийМодульКлиентскойЧасти.СообщитьЧерезФорму("Отказ инициализации Задач");
КонецЕсли;
КонецПроцедуры
// Функция - Инициализация задачи на сервере
//
// Параметры:
//  СтруктураОтвета	 - Структура	 - структура получаемая методом СлужебныеФункцииИПроцедурыКлиентСервер.ПолучитьДанныеИзИтЗадачиТСД
// 
// Возвращаемое значение:
// Булево  - если инициализация завершилась успешно то ИСТИНА,иначе ложь 
//
&НаСервере
Функция  ИнициализацияЗадачиНаСервере(СтруктураОтвета)
	Если ИнфорацияОСтатусеДокумента() тогда
		Возврат ОбработчикДанныхОбщиеФункцииИПроцедуры.ИнициализацияЗадачиНаСервере(СтруктураОтвета,"Задача",Перечисления.итWMSСостоянияЗадачТСД.Выполняется);	
	иначе
		Возврат ОбработчикДанныхОбщиеФункцииИПроцедуры.ИнициализацияЗадачиНаСервере(СтруктураОтвета,"Документ",Перечисления.итWMSСостоянияЗадачТСД.Выполняется);		
	КонецЕсли;
	КонецФункции


// Функция - Получить задачу документа
// получает любую одну задачу текущего документа
// Возвращаемое значение:
// УникальныйИдентификатор  - ИдЗадачи документа
//
&НаСервере
Функция ПолучитьЗадачуДокумента()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИтЗадачиНаТСД.ИдЗадачи КАК ИдЗадачи
		|ИЗ
		|	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
		|ГДЕ
		|	ИтЗадачиНаТСД.ДокументОснование = &ДокументОснование
		|	И ИтЗадачиНаТСД.ТипЗадачи = &ТипЗадачи";
	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТипЗадачи", Объект.ТипЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		Возврат ВыборкаДетальныеЗаписи.ИдЗадачи;
		КонецЕсли;
	Возврат Неопределено;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	КонецФункции
// Функция - Получить данные проверки
// проверяет документ на наличие расхождений
// Возвращаемое значение:
// Структура  - структура со свойствами "ТекстОшибки","ТекстПредупреждения" типа строка. Если значения свойств заполнены, 
// - есть расхождения.
//
&НаСервере
Функция ПолучитьДанныеПроверки()
	СтруктураОтвета=новый Структура;
	СтруктураОтвета.Вставить("ТекстОшибки","");
	СтруктураОтвета.Вставить("ТекстПредупреждения","");
	Если Объект.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.Приемка тогда
		ПроверкаПриемкиНаОшибки(СтруктураОтвета);
	иначе
		ПроверкаПриемкиНаОшибки(СтруктураОтвета);
        ПроверкаПриемкиКакЕстьНаОшибки(СтруктураОтвета);
	КонецЕсли;
	Возврат СтруктураОтвета;
КонецФункции
&НаСервере
Процедура ПроверкаПриемкиНаОшибки(СтруктураОтвета)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИтЗадачиНаТСД.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
		|	ИтЗадачиНаТСД.ЯчейкаОтправитель КАК ЯчейкаОтправитель,
		|	ИтЗадачиНаТСД.ЯчейкаОтправительПредставление КАК ЯчейкаОтправительПредставление,
		|	ИтЗадачиНаТСД.ЯчейкаПолучатель КАК ЯчейкаПолучатель,
		|	ИтЗадачиНаТСД.ЯчейкаПолучательПредставление КАК ЯчейкаПолучательПредставление,
		|	ИтЗадачиНаТСД.Состояние КАК Состояние,
		|	ИтСтрокиЗадачНаТСД.Номенклатура КАК Номенклатура,
		|	ИтСтрокиЗадачНаТСД.НоменклатураПредставление КАК НоменклатураПредставление,
		|	ИтСтрокиЗадачНаТСД.ДатаРозлива КАК ДатаРозлива,
		|	ИтСтрокиЗадачНаТСД.СерияНоменклатуры КАК СерияНоменклатуры,
		|	ИтСтрокиЗадачНаТСД.СерияНоменклатурыПредставление КАК СерияНоменклатурыПредставление,
		|	ИтСтрокиЗадачНаТСД.Количество КАК Количество,
		|	ИтСтрокиЗадачНаТСД.ДанныеДокументаТСД КАК ДанныеДокументаТСД,
		|	ИтСтрокиЗадачНаТСД.ИдЗадачи КАК ИдЗадачи
		|ИЗ
		|	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИтСтрокиЗадачНаТСД КАК ИтСтрокиЗадачНаТСД
		|		ПО ИтЗадачиНаТСД.ИдЗадачи = ИтСтрокиЗадачНаТСД.ИдЗадачи
		|ГДЕ
		|	ИтЗадачиНаТСД.ДокументОснование = &ДокументОснование
		|	И ИтЗадачиНаТСД.ТипЗадачи = &ТипЗадачи
		|ИТОГИ
		|	МАКСИМУМ(ИдентификаторУпаковки),
		|	МАКСИМУМ(ЯчейкаОтправитель),
		|	МАКСИМУМ(ЯчейкаОтправительПредставление),
		|	МАКСИМУМ(ЯчейкаПолучатель),
		|	МАКСИМУМ(ЯчейкаПолучательПредставление),
		|	МАКСИМУМ(Состояние)
		|ПО
		|	ИдЗадачи";
	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТипЗадачи", Объект.ТипЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() тогда
		 СтруктураОтвета.ТекстОшибки="Данные задачи отсутствуют";
		 Возврат;
	КонецЕсли;	

	ВыборкаИдЗадачи = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаИдЗадачи.Следующий() Цикл
		Если ВыборкаИдЗадачи.Состояние=Перечисления.итWMSСостоянияЗадачТСД.Отменена тогда
			Продолжить;
		КонецЕсли;	
		Если   ВыборкаИдЗадачи.Состояние<>Перечисления.итWMSСостоянияЗадачТСД.Выполнена тогда	
			СтруктураОтвета.ТекстОшибки=СтруктураОтвета.ТекстОшибки+"
			| задача  "+ВыборкаИдЗадачи.ИдентификаторУпаковки +" находится в не завершенном состоянии";
			Продолжить;
		КонецЕсли;
		Если ВыборкаИдЗадачи.ИдентификаторУпаковки="" тогда
		СтруктураОтвета.ТекстОшибки="
			|"+СтруктураОтвета.ТекстОшибки+" задаче не назначен идентификатор упаковки";
			Возврат;
        КонецЕсли;	
		ВыборкаДетальныеЗаписи = ВыборкаИдЗадачи.Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ТипЗнч(ВыборкаДетальныеЗаписи.ИдЗадачи)<>тип("УникальныйИдентификатор") и ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИдентификаторУпаковки) тогда
				СтруктураОтвета.ТекстПредупреждения=СтруктураОтвета.ТекстПредупреждения+"
				| для задачи "+ВыборкаДетальныеЗаписи.ИдентификаторУпаковки+" нет данных проверки";
				Продолжить;
			КонецЕсли;
			
			
 		ЗначениеХранилища=ВыборкаДетальныеЗаписи.ДанныеДокументаТСД.Получить();
		Если ЗначениеХранилища<>Неопределено тогда
			Если ВыборкаДетальныеЗаписи.Количество<>ЗначениеХранилища.КоличествоФакт тогда
				СтруктураОтвета.ТекстПредупреждения=СтруктураОтвета.ТекстПредупреждения+"
				| для задачи "+ВыборкаДетальныеЗаписи.ИдентификаторУпаковки+" в строке номеклатуры "+ ВыборкаДетальныеЗаписи.НоменклатураПредставление+" "+ВыборкаДетальныеЗаписи.ДатаРозлива+
				" плановое и фактическое количество различно";
				КонецЕсли;
		КонецЕсли;
	
		КонецЦикла;
	КонецЦикла;
		//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры
&НаСервере
Функция ПроверкаПриемкиКакЕстьНаОшибки(СтруктураОтвета)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДанныхПроверки.Номенклатура КАК Номенклатура,
		|	ТаблицаДанныхПроверки.НоменклатураПредставление КАК НоменклатураПредставление,
		|	ТаблицаДанныхПроверки.ДатаРозлива КАК ДатаРозлива,
		|	ТаблицаДанныхПроверки.Количество КАК КоличествоПроверенно,
		|	0 КАК КоличествоИзначальныхДанных
		|ПОМЕСТИТЬ ТаблицаПересчета
		|ИЗ
		|	(ВЫБРАТЬ
		|		ИтЗадачиНаТСД.ИдЗадачи КАК ИдЗадачи,
		|		ИтСтрокиЗадачНаТСД.Номенклатура КАК Номенклатура,
		|		ИтСтрокиЗадачНаТСД.НоменклатураПредставление КАК НоменклатураПредставление,
		|		ИтСтрокиЗадачНаТСД.ДатаРозлива КАК ДатаРозлива,
		|		ИтСтрокиЗадачНаТСД.СерияНоменклатуры КАК СерияНоменклатуры,
		|		ИтСтрокиЗадачНаТСД.СерияНоменклатурыПредставление КАК СерияНоменклатурыПредставление,
		|		СУММА(ИтСтрокиЗадачНаТСД.Количество) КАК Количество
		|	ИЗ
		|		РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИтСтрокиЗадачНаТСД КАК ИтСтрокиЗадачНаТСД
		|			ПО ИтЗадачиНаТСД.ИдЗадачи = ИтСтрокиЗадачНаТСД.ИдЗадачи
		|	ГДЕ
		|		ИтЗадачиНаТСД.ДокументОснование = &ДокументОснование
		|		И ИтЗадачиНаТСД.ТипЗадачи = &ТипЗадачи
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ИтЗадачиНаТСД.ИдЗадачи,
		|		ИтСтрокиЗадачНаТСД.ДатаРозлива,
		|		ИтСтрокиЗадачНаТСД.Номенклатура,
		|		ИтСтрокиЗадачНаТСД.НоменклатураПредставление,
		|		ИтСтрокиЗадачНаТСД.СерияНоменклатуры,
		|		ИтСтрокиЗадачНаТСД.СерияНоменклатурыПредставление) КАК ТаблицаДанныхПроверки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.НоменклатураПредставление,
		|	ВложенныйЗапрос.ДатаРозлива,
		|	0,
		|	ВложенныйЗапрос.Количество
		|ИЗ
		|	(ВЫБРАТЬ
		|		итПриемкаДанныеФизическогоНосителя.Номенклатура КАК Номенклатура,
		|		итПриемкаДанныеФизическогоНосителя.НоменклатураПредставление КАК НоменклатураПредставление,
		|		итПриемкаДанныеФизическогоНосителя.ДатаРозлива КАК ДатаРозлива,
		|		СУММА(итПриемкаДанныеФизическогоНосителя.Количество) КАК Количество
		|	ИЗ
		|		Документ.итПриемка.ДанныеФизическогоНосителя КАК итПриемкаДанныеФизическогоНосителя
		|	ГДЕ
		|		итПриемкаДанныеФизическогоНосителя.Ссылка = &ДокументОснование
		|	
		|	СГРУППИРОВАТЬ ПО
		|		итПриемкаДанныеФизическогоНосителя.Номенклатура,
		|		итПриемкаДанныеФизическогоНосителя.НоменклатураПредставление,
		|		итПриемкаДанныеФизическогоНосителя.ДатаРозлива) КАК ВложенныйЗапрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|	ВложенныйЗапрос.НоменклатураПредставление КАК НоменклатураПредставление,
		|	ВложенныйЗапрос.ДатаРозлива КАК ДатаРозлива,
		|	ВложенныйЗапрос.КоличествоПроверенно КАК КоличествоПроверенно,
		|	ВложенныйЗапрос.КоличествоИзначальныхДанных КАК КоличествоИзначальныхДанных,
		|	ВЫБОР
		|		КОГДА ВложенныйЗапрос.КоличествоИзначальныхДанных - ВложенныйЗапрос.КоличествоПроверенно = 0
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьРасхождения
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаПересчета.Номенклатура КАК Номенклатура,
		|		ТаблицаПересчета.НоменклатураПредставление КАК НоменклатураПредставление,
		|		ТаблицаПересчета.ДатаРозлива КАК ДатаРозлива,
		|		СУММА(ТаблицаПересчета.КоличествоПроверенно) КАК КоличествоПроверенно,
		|		СУММА(ТаблицаПересчета.КоличествоИзначальныхДанных) КАК КоличествоИзначальныхДанных
		|	ИЗ
		|		ТаблицаПересчета КАК ТаблицаПересчета
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ТаблицаПересчета.Номенклатура,
		|		ТаблицаПересчета.НоменклатураПредставление,
		|		ТаблицаПересчета.ДатаРозлива) КАК ВложенныйЗапрос";
	
		Запрос.УстановитьПараметр("ДокументОснование",Объект.Ссылка);
		Запрос.УстановитьПараметр("ТипЗадачи",Объект.ТипЗадачи);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если  ВыборкаДетальныеЗаписи.ЕстьРасхождения тогда
			СтруктураОтвета.ТекстПредупреждения=СтруктураОтвета.ТекстПредупреждения+"
				| по номенклатуре "+ВыборкаДетальныеЗаписи.НоменклатураПредставление+" в строке с датой розлива "+ВыборкаДетальныеЗаписи.ДатаРозлива+
				" есть расхождения данных документа :"+ВыборкаДетальныеЗаписи.КоличествоИзначальныхДанных +" с проверенным количеством "+ВыборкаДетальныеЗаписи.КоличествоПроверенно;
			КонецЕсли;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции
&НаСервере
Процедура ПроверитьРасхожденияПМУ(Отказ)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итДанныеПомарочногоУчета.Марка КАК Марка
		|ПОМЕСТИТЬ МаркиДокумента
		|ИЗ
		|	РегистрСведений.итДанныеПомарочногоУчета КАК итДанныеПомарочногоУчета
		|ГДЕ
		|	итДанныеПомарочногоУчета.Ключ = &ИдДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	итДанныеПомарочногоУчета.Марка КАК Марка
		|ПОМЕСТИТЬ МаркиЗадач
		|ИЗ
		|	(ВЫБРАТЬ
		|		ИтЗадачиНаТСД.ИдЗадачи КАК ИдЗадачи
		|	ИЗ
		|		РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
		|	ГДЕ
		|		ИтЗадачиНаТСД.ДокументОснование = &ДокументОснование) КАК ВложенныйЗапрос
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итДанныеПомарочногоУчета КАК итДанныеПомарочногоУчета
		|		ПО ВложенныйЗапрос.ИдЗадачи = итДанныеПомарочногоУчета.Ключ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаркиДокумента.Марка КАК Марка
		|ИЗ
		|	МаркиДокумента КАК МаркиДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ МаркиЗадач КАК МаркиЗадач
		|		ПО МаркиДокумента.Марка = МаркиЗадач.Марка
		|ГДЕ
		|	МаркиЗадач.Марка ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ИдДокумента", Объект.Ссылка.УникальныйИдентификатор());
	Запрос.УстановитьПараметр("ДокументОснование",Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() 	>0 Тогда 
		СтруктураДанных =новый Структура;
		СлужебныеФункцииИПроцедурыКлиентСервер.СформироватьСтруктуруДанныхОПользователе(СтруктураДанных);
		ЗадачаДокумента= ПолучитьЗадачуДокумента();
		СтруктураДанных.Вставить("КлючИнициализацииДанных",ЗадачаДокумента);
		СтруктураДанных.Вставить("ТипЗадачи",Объект.ТипЗадачи);
		СтруктураДанных.Вставить("ТипОбработкиДанных","ЗаписатьДанныеРасхожденияПМУ");
		СтруктураДанных.Вставить("РасхожденияПМУ",РезультатЗапроса);
		СтруктураДанных=ОбработчикиЗапросаСервера.ЗапроситьДанные(СтруктураДанных,"Acceptance");
		Если СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(СтруктураДанных,"ДанныеЗаписаны") Тогда 
			Отказ=Истина;
		КонецЕсли;	
	КонецЕсли;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры
#КонецОбласти

