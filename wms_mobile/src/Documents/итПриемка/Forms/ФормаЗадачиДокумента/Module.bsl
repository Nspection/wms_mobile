#Область ОбработчикиСобытий
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
Если Параметры.Свойство("ИдЗадачи") тогда
	ИдЗадачи=Параметры.ИдЗадачи;
	ПолучитьДанныеИдЗачи();
	ПомарочныйУчет=Объект.ПомарочныйУчет;
	ГуидПму=Объект.Ссылка.УникальныйИдентификатор();
	Если ПомарочныйУчет Тогда
		 СопоставитьДанныеПомарочногоУчетаССоставомУпаковки();
    КонецЕсли;
	ПолучитьСоставУпаковки();
	Если ТипЗадачи = Перечисления.итWMSТипыЗадачТСД.ПриемкаКакЕсть тогда
		Элементы.СоставУпаквокиДобавить.Видимость=Истина;
		Элементы.СоставУпаквокиУдалить.Видимость=Истина;
	иначе
		Элементы.СоставУпаквокиДобавить.Видимость=Ложь;
		Элементы.СоставУпаквокиУдалить.Видимость=Ложь;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ЯчейкаПолучательПредставление) и не ЗначениеЗаполнено(ЯчейкаПолучательПредставление) тогда
		ЯчейкаПолучатель=Объект.ЯчейкаПолучатель;
		ЯчейкаПолучательПредставление=Объект.ЯчейкаПолучательПредставление;
	КонецЕсли;
	Если Параметры.Свойство("СчитываниеМарок") Тогда 
		ЗаписьДанныхАгрегацииУпаковок(ИдентификаторУпаковки,);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбщийМодульКлиентскойЧасти.ПереопределенияТригераПолучениеШтрихКодаПриОткрытии(ЭтаФорма);
	ВидимостьДоступностьЭлементов();
КонецПроцедуры
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	ОбщийМодульКлиентскойЧасти.ПереопределенияТригераПолучениеШтрихКодаПриЗакрытии(ЭтаФорма);
КонецПроцедуры
&НаКлиенте
Процедура СоставУпаквокиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если ПомарочныйУчет Тогда 
		ОткрытьФорму("Документ.итПриемка.Форма.ФормаПросмотраСтрокиНМ",новый Структура("НоменклатураПредставление,"
		+"КоличествоФакт,ИдентификаторУпаковки,СерияНоменклатурыПредставление",ТекущийЭлемент.ТекущиеДанные.НоменклатураПредставление,
		ТекущийЭлемент.ТекущиеДанные.КоличествоФакт,ИдентификаторУпаковки,ТекущийЭлемент.ТекущиеДанные.СерияНоменклатурыПредставление),ЭтаФорма);
	иначе
		ОткрытьФорму("Документ.итПриемка.Форма.ФормаСтрокиЗадачиДокумента",Новый Структура("ИдЗадачи,ИдСтроки,Объект",ИдЗадачи,Элемент.ТекущиеДанные.ИдСтроки,Объект),ЭтаФорма);
	КонецЕсли;
	ТригерПриемаСканераШтрихКода=Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы= "ОбщаяФорма.СканированиеЯчейки" тогда
		ЯчейкаПолучатель =ВыбранноеЗначение.Ячейка;
		ЯчейкаПолучательПредставление = ВыбранноеЗначение.ЯчейкаПредставление;
	КонецЕсли;
	Если ИсточникВыбора.ИмяФормы= "Документ.итПриемка.Форма.ФормаСтрокиЗадачиДокумента"  тогда
		МассивСтрок=СоставУпаквоки.НайтиСтроки(новый Структура("ИдСтроки",ВыбранноеЗначение.ИдСтроки));
		для Каждого стр из МассивСтрок цикл
			ЗаполнитьЗначенияСвойств(стр,ВыбранноеЗначение);
		КонецЦикла;
	КонецЕсли;
	Если ИсточникВыбора.ИмяФормы="Документ.итПриемка.Форма.ФормаСканированияКонтрольнойМарки" тогда
		КонтрольнаяМарка=ВыбранноеЗначение.КонтрольнаяМарка;
		ИнтервалМарки=ВыбранноеЗначение.Интервал;
		МаркаЗакреплена=Истина;
		СохранитьДанныеКонтрольнойМаркиИИнтервала();
	КонецЕсли;
	Если ИсточникВыбора.ИмяФормы="Документ.итПриемка.Форма.ФормаКомментарияПриемки" тогда
		Комментарий=ВыбранноеЗначение;
		СохранитьКомментарий();
		Если ВыбранноеЗначение<>"" тогда
			Элементы.КомментарийКоманда.ЦветФона=WebЦвета.Желтый;
		КонецЕсли;	
	КонецЕсли;
	Если ИсточникВыбора.ИмяФормы="Документ.итПриемка.Форма.ФормаАгрегацииМарки" тогда
		ЗаписьДанныхАгрегацииМарки(ВыбранноеЗначение);
	КонецЕсли;	
КонецПроцедуры
&НаКлиенте
Процедура ЯчейкаПолучательПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ОткрытьФорму("ОбщаяФорма.СканированиеЯчейки",Новый Структура("ПолеПолучательИдентификатор,ПолеПолучательПредставление","ЯчейкаПолучатель","ЯчейкаПолучательПредставление"),ЭтаФорма);
	ТригерПриемаСканераШтрихКода=Ложь;
КонецПроцедуры
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
Если ИмяСобытия="ОбработчикШтрихКода"  и ТригерПриемаСканераШтрихКода тогда
		Если Параметр=404 и Источник="ОшибкаЧтения" тогда
			ОбщийМодульКлиентскойЧасти.СообщитьЧерезФорму("Штрих код некорректен");
			Возврат
		КонецЕсли;	
		ОбработчикПолученияДанныхШтрихКода(Параметр);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд
&НаКлиенте
Процедура Сканировать(Команда)
ОткрытьФорму("Документ.итПриемка.Форма.ФормаСканированияКонтрольнойМарки",новый Структура("ПомарочныйУчет,Объект,ИдентификаторУпаковки",ПомарочныйУчет,ИдЗадачи,ИдентификаторУпаковки),ЭтаФорма);
ТригерПриемаСканераШтрихКода=Ложь;
КонецПроцедуры
&НаКлиенте
Процедура Очистить(Команда)
ОчиститьДанныеКонтрольнойМаркиИИнтервала();
КонтрольнаяМарка="";
ИнтервалМарки="";
МаркаЗакреплена=Ложь;
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	ЭтаФорма.Закрыть();
КонецПроцедуры
&НаКлиенте
Процедура Выполнено(Команда)
	//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"+#ПриемкаФормаЗадачиДокумента Выполнено");
	Если ЯчейкаПолучательПредставление="" тогда
		Сообщить("не указана ячейка эстокады");
		Возврат
	КонецЕсли;	
	Ошибка=Ложь;
	ТекстСообщения="";
	для Каждого стр из СоставУпаквоки цикл
		Если стр.КоличествоФакт=0 тогда
			Ошибка=Истина;
			ТекстСообщения=ТекстСообщения+"
			|для строки с Номенклатурой "+ стр.НоменклатураПредставление+" не заполнены фактические данные";
		КонецЕсли;
	КонецЦикла;
	Если ПомарочныйУчет тогда
		СопоставитьДанныеПомарочногоУчетаССоставомУпаковки();
		ПолучитьСоставУпаковки();
		//СверитьКоличественныеДанныеПомарочногоУчета(Ошибка,ТекстСообщения);
		Если не МаркаЗакреплена тогда
			Если СоставУпаквоки.Количество()>0 тогда
			Ошибка=Истина;
			ТекстСообщения= ТекстСообщения+" 
			|При помарочном учете запрщено игнорировать сканирование контрольной марки";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если  Ошибка тогда 
			ОбщийМодульКлиентскойЧасти.СообщитьЧерезФорму(ТекстСообщения);
			Возврат
		
	иначе
		Если ИнициализироватьЗадачуВыполнено() тогда
				ЭтаФорма.Закрыть();
				ОбщийМодульКлиентскойЧасти.ОповещениеДинамическихСписковОткрытыхФорм();
		КонецЕсли;	
	КонецЕсли;	
	//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"-#ПриемкаФормаЗадачиДокумента Выполнено");
КонецПроцедуры
&НаСервере
Функция ИнициализироватьЗадачуВыполнено()
	СтруктураДанных =новый Структура;
	СлужебныеФункцииИПроцедурыКлиентСервер.СформироватьСтруктуруДанныхОПользователе(СтруктураДанных);
	СтруктураДанных.Вставить("КлючИнициализацииДанных",ИдЗадачи);
	СтруктураДанных.Вставить("ТипЗадачи",ТипЗадачи);
	СтруктураДанных.Вставить("ТипИнициализации","Задача");
	СтруктураДанных.Вставить("СостояниеИнициализации",Перечисления.итWMSСостоянияЗадачТСД.Выполнена);
	СтруктураДанных.Вставить("Инициализация",Ложь);
	СтруктураДанных.Вставить("ФиксацияЗадачи",Ложь);
	СтруктураДанных.Вставить("ТипОбработкиДанных","ВнесениеИзмененийВДокумент");
	СтруктураДанных.Вставить("ЯчейкаПолучатель",ЯчейкаПолучатель);
	СтруктураДанных.Вставить("КарантинПаллеты",КарантинПаллеты);
	СтруктураДанных.Вставить("КонтрольнаяМарка",КонтрольнаяМарка);
	СтруктураДанных.Вставить("ИнтервалМарки",ИнтервалМарки);
	СтруктураДанных.Вставить("Комментарий",Комментарий);
	СтруктураДанных.Вставить("Данные",СоставУпаквоки.Выгрузить());
	Если ПомарочныйУчет Тогда 
		СтруктураДанных.Вставить("АгрегацияМарок",ПолучитьАгрегациюМарокЗадачи());
	КонецЕсли;
	СтруктураДанных=ОбработчикиЗапросаСервера.ЗапроситьДанные(СтруктураДанных,"Acceptance");
	СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(СтруктураДанных,"Инициализация");
	МодульРаспределенияДанных.ОбработчикВходящихДанных(СтруктураДанных);
	
	Возврат  СтруктураДанных.Инициализация;
	
	
	//СтруктураОтвета.Вставить("Состояние",Состояние);
	//Возврат ОбработчикДанныхОбщиеФункцииИПроцедуры.ИнициализацияЗадачиНаСервере(СтруктураОтвета,"Задача",Перечисления.итWMSСостоянияЗадачТСД.Выполнена);
КонецФункции
&НаКлиенте
Процедура Удалить(Команда)
	Если ТекущийЭлемент.Имя="СоставУпаквоки" тогда
		ИдентификаторОбработки=ТекущийЭлемент.ТекущиеДанные.ПолучитьИдентификатор();
		Строка=СоставУпаквоки.НайтиПоИдентификатору(ИдентификаторОбработки);
		УдалитьНаСервере(ИдентификаторОбработки);
		СоставУпаквоки.Удалить(Строка);
	КонецЕсли;
КонецПроцедуры
&НаСервере
Процедура УдалитьНаСервере(Идентификатор)
	Строка=СоставУпаквоки.НайтиПоИдентификатору(Идентификатор);
	НаборЗаписей=РегистрыСведений.ИтСтрокиЗадачНаТСД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдЗадачи.Установить(ИдЗадачи);
	НаборЗаписей.Отбор.ИдСтроки.Установить(Строка.ИдСтроки);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
КонецПроцедуры
&НаКлиенте
Процедура Добавить(Команда)
	//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"+#ПриемкаФормаЗадачиДокумента Добавить строку");
	ИдентификаторНовойСтроки=Неопределено;
	ДобавитьНаСервере(ИдентификаторНовойСтроки);
	Если ИдентификаторНовойСтроки<>Неопределено тогда
		Элементы.СоставУпаквоки.ТекущаяСтрока=ИдентификаторНовойСтроки;
	КонецЕсли;
	//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"-#ПриемкаФормаЗадачиДокумента Добавить строку");
КонецПроцедуры
&НаСервере
Процедура ДобавитьНаСервере(ИдентификаторНовойСтроки)
	НоваяСтрока=СоставУпаквоки.Добавить();
	НоваяСтрока.ИдСтроки=новый УникальныйИдентификатор;
	ИдентификаторНовойСтроки=НоваяСтрока.ПолучитьИдентификатор();
	НаборЗаписей=РегистрыСведений.ИтСтрокиЗадачНаТСД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдЗадачи.Установить(ИдЗадачи);
	НаборЗаписей.Отбор.ИдСтроки.Установить(НоваяСтрока.ИдСтроки);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	Запись=НаборЗаписей.Добавить();
	Запись.ИдЗадачи=ИдЗадачи;
	Запись.ИдСтроки=НоваяСтрока.ИдСтроки;
	НаборЗаписей.Записать();
КонецПроцедуры
&НаКлиенте
Процедура УстановитьКарантинПаллеты(Команда)
	Оповещние = новый ОписаниеОповещения("УстановитьКарантинПаллетыОповещение",ЭтаФорма);
	ПоказатьВопрос(Оповещние,"Вы точно хотите установить режим карантина для паллеты?",РежимДиалогаВопрос.ДаНет);
КонецПроцедуры
&НаКлиенте
Процедура УстановитьКарантинПаллетыОповещение(Результат,Параметры) Экспорт 
	Если Результат=КодВозвратаДиалога.Нет тогда
		Возврат
	КонецЕсли;	
	УстановитьКарантинПаллетыНаСервере();
	ВидимостьДоступностьЭлементов();
КонецПроцедуры
&НаСервере
Процедура УстановитьКарантинПаллетыНаСервере()
	КарантинПаллеты=Истина;
	НаборЗаписей=РегистрыСведений.ИтЗадачиНаТСД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдЗадачи.Установить(ИдЗадачи);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество()=0 тогда
		Сообщить("текущая задача отсутсвтует на тсд, перезайдите в раздел мои задачи");
	КонецЕсли;	
	для Каждого стр из НаборЗаписей цикл
		ДанныеХранилища=стр.ДанныеДокументаТСД.Получить();
		Если ТипЗнч(ДанныеХранилища)<>Тип("Структура") тогда
			стр.ДанныеДокументаТСД=новый ХранилищеЗначения(новый Структура("КарантинПаллеты",Истина));
		иначе
			ДанныеХранилища.Вставить("КарантинПаллеты",Истина);
			стр.ДанныеДокументаТСД=новый ХранилищеЗначения(ДанныеХранилища);
		КонецЕсли;
	КонецЦикла;
	НаборЗаписей.Записать();
КонецПроцедуры

&НаКлиенте
Процедура СнятьРежимКарантинаСПаллеты(Команда)
	Оповещние = новый ОписаниеОповещения("СнятьРежимКарантинаСПаллетыОповещение",ЭтаФорма);
	ПоказатьВопрос(Оповещние,"Вы точно хотите снять режим карантина для паллеты?",РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры
&НаКлиенте
Процедура СнятьРежимКарантинаСПаллетыОповещение(Результат,Параметры)Экспорт 
	Если Результат=КодВозвратаДиалога.Нет тогда
		Возврат
	КонецЕсли;	
	СнятьРежимКарантинаСПаллетыСервер();
	ВидимостьДоступностьЭлементов();
КонецПроцедуры
&НаСервере
Процедура СнятьРежимКарантинаСПаллетыСервер()
	КарантинПаллеты=Ложь;
	НаборЗаписей=РегистрыСведений.ИтЗадачиНаТСД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдЗадачи.Установить(ИдЗадачи);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество()=0 тогда
		Сообщить("текущая задача отсутсвтует на тсд, перезайдите в раздел мои задачи");
	КонецЕсли;	
	для Каждого стр из НаборЗаписей цикл
		ДанныеХранилища=стр.ДанныеДокументаТСД.Получить();
		Если ТипЗнч(ДанныеХранилища)<>Тип("Структура") тогда
			стр.ДанныеДокументаТСД=новый ХранилищеЗначения(новый Структура("КарантинПаллеты",Ложь));
		иначе
			ДанныеХранилища.Вставить("КарантинПаллеты",Ложь);
			стр.ДанныеДокументаТСД=новый ХранилищеЗначения(ДанныеХранилища);
		КонецЕсли;
	КонецЦикла;
	НаборЗаписей.Записать();
КонецПроцедуры
&НаКлиенте
Процедура Комментарий(Команда)
ОткрытьФорму("Документ.итПриемка.Форма.ФормаКомментарияПриемки",новый Структура("ИдЗадачи,ОбъектДокумента",ИдЗадачи,Объект),ЭтаФорма);
ТригерПриемаСканераШтрихКода=Ложь;
КонецПроцедуры
&НаСервере
Процедура ОчиститьДанныеПМУНаСервере()
НаборЗаписей=РегистрыСведений.итДанныеПомарочногоУчета.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Ключ.Установить(ИдЗадачи);
НаборЗаписей.Прочитать();
НаборЗаписей.Очистить();
НаборЗаписей.Записать();
СопоставитьДанныеПомарочногоУчетаССоставомУпаковки();
ПолучитьСоставУпаковки();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеПМУ(Команда)
ОчиститьДанныеПМУНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Процедура - Получить данные ид зачи
// Получает данные задачи по реквизиты ИдЗадачи и переносит их на реквизиты формы
&НаСервере
Процедура ПолучитьДанныеИдЗачи()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИтЗадачиНаТСД.ДокументОснование КАК Объект,
	|	ИтЗадачиНаТСД.ТипЗадачи КАК ТипЗадачи,
	|	ИтЗадачиНаТСД.ИдЗадачи КАК ИдЗадачи,
	|	ИтЗадачиНаТСД.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ИтЗадачиНаТСД.ЯчейкаОтправитель КАК ЯчейкаОтправитель,
	|	ИтЗадачиНаТСД.ЯчейкаОтправительПредставление КАК ЯчейкаОтправительПредставление,
	|	ИтЗадачиНаТСД.ЯчейкаПолучатель КАК ЯчейкаПолучатель,
	|	ИтЗадачиНаТСД.ЯчейкаПолучательПредставление КАК ЯчейкаПолучательПредставление,
	|	ИтЗадачиНаТСД.Состояние КАК Состояние,
	|	ИтЗадачиНаТСД.ДополнительныеДанные КАК ДополнительныеДанные,
	|	ИтЗадачиНаТСД.ДанныеДокументаТСД КАК ДанныеДокументаТСД
	|ИЗ
	|	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
	|ГДЕ
	|	ИтЗадачиНаТСД.ИдЗадачи = &ИдЗадачи";
	
	Запрос.УстановитьПараметр("ИдЗадачи", ИдЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма,ВыборкаДетальныеЗаписи);
		ДанныеХранилища=ВыборкаДетальныеЗаписи.ДанныеДокументаТСД.Получить();
		Если ТипЗнч(ДанныеХранилища)=Тип("Структура") тогда
			ЗаполнитьЗначенияСвойств(ЭтаФорма,ДанныеХранилища);
			Если ДанныеХранилища.Свойство("КонтрольнаяМарка") тогда
				МаркаЗакреплена=Истина;
			КонецЕсли;	
		КонецЕсли;
		ДополнительныеДанные=ВыборкаДетальныеЗаписи.ДополнительныеДанные.Получить();
		Если ТипЗнч(ДополнительныеДанные)=Тип("Структура") тогда
			Если ДополнительныеДанные.Свойство("Комментарий") тогда
				Если ДополнительныеДанные.Комментарий<>"" тогда
					Элементы.КомментарийКоманда.ЦветФона=WebЦвета.Желтый;
					Комментарий=ДополнительныеДанные.Комментарий;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
КонецПроцедуры
// Процедура - Получить состав упаковки
// Получает данные строк задачи по реквизиты ИдЗадачи и переносит их на реквизиты формы
&НаСервере
Процедура ПолучитьСоставУпаковки()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИтСтрокиЗадачНаТСД.ИдЗадачи КАК ИдЗадачи,
	|	ИтСтрокиЗадачНаТСД.ИдСтроки КАК ИдСтроки,
	|	ИтСтрокиЗадачНаТСД.Номенклатура КАК Номенклатура,
	|	ИтСтрокиЗадачНаТСД.НоменклатураПредставление КАК НоменклатураПредставление,
	|	ИтСтрокиЗадачНаТСД.ДатаРозлива КАК ДатаРозлива,
	|	ИтСтрокиЗадачНаТСД.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ИтСтрокиЗадачНаТСД.СерияНоменклатурыПредставление КАК СерияНоменклатурыПредставление,
	|	ИтСтрокиЗадачНаТСД.Количество КАК КоличествоПлан,
	|	ИтСтрокиЗадачНаТСД.ДанныеДокументаТСД КАК ДанныеДокументаТСД
	|ИЗ
	|	РегистрСведений.ИтСтрокиЗадачНаТСД КАК ИтСтрокиЗадачНаТСД
	|ГДЕ
	|	ИтСтрокиЗадачНаТСД.ИдЗадачи = &ИдЗадачи";
	
	Запрос.УстановитьПараметр("ИдЗадачи", ИдЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	СоставУпаквоки.Очистить();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока=СоставУпаквоки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаДетальныеЗаписи);
		ЗначениеХранилища=ВыборкаДетальныеЗаписи.ДанныеДокументаТСД.Получить();
		Если  ЗначениеХранилища<>Неопределено тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ЗначениеХранилища);
		КонецЕсли;	  
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры
&НаКлиенте
Процедура ВидимостьДоступностьЭлементов()
	Если КарантинПаллеты тогда
		Элементы.СнятьРежимКарантинаСПаллеты.Видимость=Истина;
		Элементы.УстановитьКарантинПаллеты.Видимость=Ложь;
		Элементы.ГруппаФонаОтображения.ЦветФона=новый Цвет(255, 0, 0);
	иначе
		Элементы.СнятьРежимКарантинаСПаллеты.Видимость=Ложь;
		Элементы.УстановитьКарантинПаллеты.Видимость=Истина;
		Элементы.ГруппаФонаОтображения.ЦветФона=новый Цвет();
	КонецЕсли;
	Если ПомарочныйУчет Тогда 
		Элементы.СоставУпаквокиДобавить.Видимость=Ложь;
		Элементы.СоставУпаквокиУдалить.Видимость=Ложь;
		Элементы.СоставУпаквокиОчиститьДанныеПМУ.Видимость=Истина;
	иначе
		Элементы.СоставУпаквокиОчиститьДанныеПМУ.Видимость=Ложь;
		Элементы.ИнформативнаяНадпись.Видимость=Ложь;
	КонецЕсли;	
КонецПроцедуры
// Процедура - Сохранить данные контрольной марки и интервала
// сохраняет данные отсканированной марки в регистр сведений итЗадачиТСД
&НаСервере
Процедура СохранитьДанныеКонтрольнойМаркиИИнтервала()
	НабораЗаписей=РегистрыСведений.ИтЗадачиНаТСД.СоздатьНаборЗаписей();
	НабораЗаписей.Отбор.ИдЗадачи.Установить(ИдЗадачи);
	НабораЗаписей.Прочитать();
	для Каждого стр из НабораЗаписей цикл
		ДанныеТСД=стр.ДанныеДокументаТСД.Получить();
		Если ТипЗнч(ДанныеТСД)<>Тип("Структура") тогда
			ДанныеТСД=новый Структура;
		КонецЕсли;
		ДанныеТСД.Вставить("КонтрольнаяМарка",КонтрольнаяМарка);
		ДанныеТСД.Вставить("ИнтервалМарки",ИнтервалМарки);
		стр.ДанныеДокументаТСД=новый ХранилищеЗначения(ДанныеТСД);
	КонецЦикла;
	НабораЗаписей.Записать();
КонецПроцедуры

&НаСервере
Процедура СохранитьКомментарий()
НаборЗаписей=РегистрыСведений.ИтЗадачиНаТСД.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.ИдЗадачи.Установить(ИдЗадачи);
НаборЗаписей.Отбор.ДокументОснование.Установить(Объект.Ссылка);
НаборЗаписей.Прочитать();
для Каждого Запись из НаборЗаписей Цикл 
	ДополнительныеДанные=Запись.ДополнительныеДанные.Получить();
	Если ТипЗнч(ДополнительныеДанные)=Тип("Структура") тогда
		ДополнительныеДанные.Вставить("Комментарий",Комментарий);
	иначе
		ДополнительныеДанные=новый Структура("Комментарий",Комментарий);
	КонецЕсли;
	Запись.ДополнительныеДанные=новый ХранилищеЗначения(ДополнительныеДанные);
КонецЦикла;
НаборЗаписей.Записать();

КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеКонтрольнойМаркиИИнтервала()
	НабораЗаписей=РегистрыСведений.ИтЗадачиНаТСД.СоздатьНаборЗаписей();
	НабораЗаписей.Отбор.ИдЗадачи.Установить(ИдЗадачи);
	НабораЗаписей.Прочитать();
	для Каждого стр из НабораЗаписей цикл
		ДанныеТСД=стр.ДанныеДокументаТСД.Получить();
		Если ТипЗнч(ДанныеТСД)<>Тип("Структура") тогда
			ДанныеТСД=новый Структура;
		КонецЕсли;
		Если ДанныеТСД.Свойство("КонтрольнаяМарка") тогда
			ДанныеТСД.Удалить("КонтрольнаяМарка");
		КонецЕсли;
		Если ДанныеТСД.Свойство("ИнтервалМарки") тогда
			ДанныеТСД.Удалить("ИнтервалМарки");
		КонецЕсли;	

		//ДанныеТСД.Вставить("КонтрольнаяМарка",КонтрольнаяМарка);
		стр.ДанныеДокументаТСД=новый ХранилищеЗначения(ДанныеТСД);
	КонецЦикла;
	НабораЗаписей.Записать();
КонецПроцедуры
&НаСервере
Процедура СверитьКоличественныеДанныеПомарочногоУчета(Ошибка,ТекстСообщения)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	КоличествоВУпаковкеФакт = 0;
	для Каждого стр из СоставУпаквоки цикл
		КоличествоВУпаковкеФакт=КоличествоВУпаковкеФакт+стр.КоличествоФакт;
	КонецЦикла;	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итДанныеПомарочногоУчета.SSCC КАК SSCC,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ итДанныеПомарочногоУчета.Марка) КАК Марка
		|ИЗ
		|	РегистрСведений.итДанныеПомарочногоУчета КАК итДанныеПомарочногоУчета
		|ГДЕ
		|	итДанныеПомарочногоУчета.SSCC = &SSCC
		|	И итДанныеПомарочногоУчета.Ключ = &Ключ
		|
		|СГРУППИРОВАТЬ ПО
		|	итДанныеПомарочногоУчета.SSCC";
	
	Запрос.УстановитьПараметр("SSCC", ИдентификаторУпаковки);
	Запрос.УстановитьПараметр("Ключ", Объект.Ссылка.УникальныйИдентификатор());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Если ВыборкаДетальныеЗаписи.Марка<>КоличествоВУпаковкеФакт тогда
			Ошибка=Истина;
			ТекстСообщения= ТекстСообщения+"
			|Согласно помарочному учету в паллете должно быть "+ВыборкаДетальныеЗаписи.Марка+" а фактически "+КоличествоВУпаковкеФакт;
		КонецЕсли;
	иначе
		
		Если не КоличествоВУпаковкеФакт=0 Тогда 
			Ошибка=Истина;
			ТекстСообщения=ТекстСообщения+"
			|Нет данных в помарочном учете по SSCC";
		КонецЕсли;
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	КонецПроцедуры

&НаКлиенте	
Процедура ОбработчикПолученияДанныхШтрихКода(ШтрихКод)
	//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"+#ПриемкаФормаЗадачиДокумента обработка штрих кода");
	Отказ=Ложь;
	СлужебныеФункцииИПроцедурыКлиентСервер.ПроверитьSSCCНаЛеквидность(ШтрихКод,Отказ,Ложь);
	Если не Отказ Тогда
		ЗаписьДанныхАгрегацииУпаковок(ШтрихКод,);
		Возврат;
	КонецЕсли;
	Отказ=Ложь;
	СлужебныеФункцииИПроцедурыКлиентСервер.ПроверитьGTINНаЛеквидность(ШтрихКод,Отказ,Ложь);
	Если не Отказ Тогда
		ЗаписьДанныхАгрегацииУпаковок(,ШтрихКод);
		Возврат;
	КонецЕсли;
	ОбработчикДанныхМарки(ШтрихКод);
	//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(ИдЗадачи,"-#ПриемкаФормаЗадачиДокумента обработка штрих кода");

КонецПроцедуры
&НаКлиенте
Процедура ОбработчикДанныхМарки(Марка)
	ОткрытьФорму("Документ.итПриемка.Форма.ФормаАгрегацииМарки",новый Структура("ДанныеМарки",новый Структура("Марка",Марка)),ЭтаФорма);
КонецПроцедуры
&НаСервере
Процедура ЗаписьДанныхАгрегацииУпаковок(SSCC="",GTIN="")
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИтЗадачиНаТСД.ИдЗадачи КАК ИдЗадачи
		|ПОМЕСТИТЬ ВтДанныеЗадач
		|ИЗ
		|	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
		|ГДЕ
		|	ИтЗадачиНаТСД.ДокументОснование = &ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	итДанныеПомарочногоУчета.Марка КАК Марка
		|ПОМЕСТИТЬ ВтМаркиЗадач
		|ИЗ
		|	ВтДанныеЗадач КАК ВтДанныеЗадач
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итДанныеПомарочногоУчета КАК итДанныеПомарочногоУчета
		|		ПО ВтДанныеЗадач.ИдЗадачи = итДанныеПомарочногоУчета.Ключ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	итДанныеПомарочногоУчета.Марка КАК Марка,
		|	итДанныеПомарочногоУчета.SSCC КАК SSCC,
		|	итДанныеПомарочногоУчета.GTIN КАК GTIN,
		|	итДанныеПомарочногоУчета.Номенклатура КАК Номенклатура,
		|	итДанныеПомарочногоУчета.СерияНоменклатуры КАК СерияНоменклатуры,
		|	итДанныеПомарочногоУчета.ДатаРозлива КАК ДатаРозлива,
		|	итДанныеПомарочногоУчета.НоменклатураПредставление КАК НоменклатураПредставление,
		|	итДанныеПомарочногоУчета.СерияНоменклатурыПредставление КАК СерияНоменклатурыПредставление,
		|	итДанныеПомарочногоУчета.ПризнакОбработки КАК ПризнакОбработки
		|ПОМЕСТИТЬ ВтМаркиДокумента
		|ИЗ
		|	РегистрСведений.итДанныеПомарочногоУчета КАК итДанныеПомарочногоУчета
		|ГДЕ
		|	итДанныеПомарочногоУчета.Ключ = &Ключ
		|	И ВЫБОР
		|			КОГДА &GTIN <> """"
		|				ТОГДА итДанныеПомарочногоУчета.GTIN = &GTIN
		|			ИНАЧЕ итДанныеПомарочногоУчета.SSCC = &SSCC
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтМаркиДокумента.Марка КАК Марка,
		|	ВтМаркиДокумента.SSCC КАК SSCC,
		|	ВтМаркиДокумента.GTIN КАК GTIN,
		|	ВтМаркиДокумента.Номенклатура КАК Номенклатура,
		|	ВтМаркиДокумента.СерияНоменклатуры КАК СерияНоменклатуры,
		|	ВтМаркиДокумента.ДатаРозлива КАК ДатаРозлива,
		|	ВтМаркиДокумента.НоменклатураПредставление КАК НоменклатураПредставление,
		|	ВтМаркиДокумента.СерияНоменклатурыПредставление КАК СерияНоменклатурыПредставление,
		|	ВЫБОР
		|		КОГДА ВтМаркиЗадач.Марка ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПризнакОбработки
		|ПОМЕСТИТЬ ВтИтоговыеДанные
		|ИЗ
		|	ВтМаркиДокумента КАК ВтМаркиДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтМаркиЗадач КАК ВтМаркиЗадач
		|		ПО ВтМаркиДокумента.Марка = ВтМаркиЗадач.Марка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтИтоговыеДанные.Марка КАК Марка,
		|	ВтИтоговыеДанные.SSCC КАК SSCC,
		|	ВтИтоговыеДанные.GTIN КАК GTIN,
		|	ВтИтоговыеДанные.Номенклатура КАК Номенклатура,
		|	ВтИтоговыеДанные.СерияНоменклатуры КАК СерияНоменклатуры,
		|	ВтИтоговыеДанные.ДатаРозлива КАК ДатаРозлива,
		|	ВтИтоговыеДанные.НоменклатураПредставление КАК НоменклатураПредставление,
		|	ВтИтоговыеДанные.СерияНоменклатурыПредставление КАК СерияНоменклатурыПредставление,
		|	ВтИтоговыеДанные.ПризнакОбработки КАК ПризнакОбработки
		|ИЗ
		|	ВтИтоговыеДанные КАК ВтИтоговыеДанные
		|ГДЕ
		|	НЕ ВтИтоговыеДанные.ПризнакОбработки";
	
	Запрос.УстановитьПараметр("GTIN", GTIN);
	Запрос.УстановитьПараметр("SSCC", SSCC);
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	Запрос.УстановитьПараметр("Ключ", ГуидПму);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	НаборЗаписей=РегистрыСведений.итДанныеПомарочногоУчета.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Ключ.Установить(ИдЗадачи);
	НаборЗаписей.Отбор.Марка.Установить(ВыборкаДетальныеЗаписи.Марка);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НоваяЗапись=НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяЗапись,ВыборкаДетальныеЗаписи);
	НоваяЗапись.SSCC=ИдентификаторУпаковки;
	НоваяЗапись.Ключ=ИдЗадачи;	
	НаборЗаписей.Записать();
	КонецЦикла;
	СопоставитьДанныеПомарочногоУчетаССоставомУпаковки();
	ПолучитьСоставУпаковки();	
	КонецПроцедуры


&НаСервере
Процедура ЗаписьДанныхАгрегацииМарки(Данные)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИтЗадачиНаТСД.ИдЗадачи КАК ИдЗадачи
	|ПОМЕСТИТЬ ВтИдЗадач
	|ИЗ
	|	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
	|ГДЕ
	|	ИтЗадачиНаТСД.ДокументОснование = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итДанныеПомарочногоУчета.Марка КАК Марка,
	|	итДанныеПомарочногоУчета.SSCC КАК SSCC
	|ПОМЕСТИТЬ ОтсканированныеДанныеМарки
	|ИЗ
	|	ВтИдЗадач КАК ВтИдЗадач
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итДанныеПомарочногоУчета КАК итДанныеПомарочногоУчета
	|		ПО ВтИдЗадач.ИдЗадачи = итДанныеПомарочногоУчета.Ключ
	|			И (итДанныеПомарочногоУчета.Марка = &Марка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итДанныеПомарочногоУчета.Ключ КАК Ключ,
	|	итДанныеПомарочногоУчета.Марка КАК Марка,
	|	итДанныеПомарочногоУчета.SSCC КАК SSCC,
	|	итДанныеПомарочногоУчета.GTIN КАК GTIN,
	|	итДанныеПомарочногоУчета.Номенклатура КАК Номенклатура,
	|	итДанныеПомарочногоУчета.СерияНоменклатуры КАК СерияНоменклатуры,
	|	итДанныеПомарочногоУчета.ДатаРозлива КАК ДатаРозлива,
	|	итДанныеПомарочногоУчета.НоменклатураПредставление КАК НоменклатураПредставление,
	|	итДанныеПомарочногоУчета.СерияНоменклатурыПредставление КАК СерияНоменклатурыПредставление
	|ПОМЕСТИТЬ ВтДанныеМарки
	|ИЗ
	|	РегистрСведений.итДанныеПомарочногоУчета КАК итДанныеПомарочногоУчета
	|ГДЕ
	|	итДанныеПомарочногоУчета.Ключ = &Ключ
	|	И итДанныеПомарочногоУчета.Марка = &Марка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеМарки.Ключ КАК Ключ,
	|	ВтДанныеМарки.Марка КАК Марка,
	|	ВтДанныеМарки.SSCC КАК SSCC,
	|	ВтДанныеМарки.GTIN КАК GTIN,
	|	ВтДанныеМарки.Номенклатура КАК Номенклатура,
	|	ВтДанныеМарки.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ВтДанныеМарки.ДатаРозлива КАК ДатаРозлива,
	|	ВтДанныеМарки.НоменклатураПредставление КАК НоменклатураПредставление,
	|	ВтДанныеМарки.СерияНоменклатурыПредставление КАК СерияНоменклатурыПредставление,
	|	ВЫБОР
	|		КОГДА ОтсканированныеДанныеМарки.SSCC ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПризнакОбработки,
	|	ОтсканированныеДанныеМарки.SSCC КАК SSCCУчета
	|ИЗ
	|	ВтДанныеМарки КАК ВтДанныеМарки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОтсканированныеДанныеМарки КАК ОтсканированныеДанныеМарки
	|		ПО ВтДанныеМарки.Марка = ОтсканированныеДанныеМарки.Марка";
	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	Запрос.УстановитьПараметр("Марка", Данные.Марка);
	Запрос.УстановитьПараметр("Ключ", ГуидПму);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если  РезультатЗапроса.Пустой() Тогда 
		Сообщить("данные марки не найдены");
		Возврат;
	КонецЕсли;	
	ВыборкаДетальнойЗаписи=РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальнойЗаписи.Следующий() Цикл
		НаборЗаписей=РегистрыСведений.итДанныеПомарочногоУчета.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Ключ.Установить(ИдЗадачи);
		НаборЗаписей.Отбор.Марка.Установить(ВыборкаДетальнойЗаписи.Марка);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		Если ВыборкаДетальнойЗаписи.ПризнакОбработки Тогда 
			Сообщить("Марка принадлежит SSCC "+ВыборкаДетальнойЗаписи.SSCCУчета);
			Возврат;
		КонецЕсли;	
		НоваяЗапись=НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись,ВыборкаДетальнойЗаписи);
		НоваяЗапись.GTIN=Данные.GTINАгрегации;
		НоваяЗапись.SSCC=ИдентификаторУпаковки;
		НоваяЗапись.Ключ=ИдЗадачи;	
	КонецЦикла;
	НаборЗаписей.Записать();	
	СопоставитьДанныеПомарочногоУчетаССоставомУпаковки();
	ПолучитьСоставУпаковки();
КонецПроцедуры

&НаСервере
Процедура СопоставитьДанныеПомарочногоУчетаССоставомУпаковки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итДанныеПомарочногоУчета.Номенклатура КАК Номенклатура,
		|	итДанныеПомарочногоУчета.СерияНоменклатуры КАК СерияНоменклатуры,
		|	итДанныеПомарочногоУчета.ДатаРозлива КАК ДатаРозлива,
		|	итДанныеПомарочногоУчета.НоменклатураПредставление КАК НоменклатураПредставление,
		|	итДанныеПомарочногоУчета.СерияНоменклатурыПредставление КАК СерияНоменклатурыПредставление,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ итДанныеПомарочногоУчета.Марка) КАК Количество,
		|	итДанныеПомарочногоУчета.Ключ КАК ИдЗадачи
		|ПОМЕСТИТЬ ВтДанныеПомарочногоУчета
		|ИЗ
		|	РегистрСведений.итДанныеПомарочногоУчета КАК итДанныеПомарочногоУчета
		|ГДЕ
		|	итДанныеПомарочногоУчета.Ключ = &Ключ
		|
		|СГРУППИРОВАТЬ ПО
		|	итДанныеПомарочногоУчета.Номенклатура,
		|	итДанныеПомарочногоУчета.СерияНоменклатуры,
		|	итДанныеПомарочногоУчета.ДатаРозлива,
		|	итДанныеПомарочногоУчета.НоменклатураПредставление,
		|	итДанныеПомарочногоУчета.СерияНоменклатурыПредставление,
		|	итДанныеПомарочногоУчета.Ключ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ИтСтрокиЗадачНаТСД.ИдСтроки) КАК ИдСтроки,
		|	ВтДанныеПомарочногоУчета.Номенклатура КАК Номенклатура,
		|	ВтДанныеПомарочногоУчета.СерияНоменклатуры КАК СерияНоменклатуры,
		|	ВтДанныеПомарочногоУчета.ДатаРозлива КАК ДатаРозлива,
		|	ВтДанныеПомарочногоУчета.НоменклатураПредставление КАК НоменклатураПредставление,
		|	ВтДанныеПомарочногоУчета.СерияНоменклатурыПредставление КАК СерияНоменклатурыПредставление,
		|	ВтДанныеПомарочногоУчета.ИдЗадачи КАК ИдЗадачи,
		|	ВтДанныеПомарочногоУчета.Количество КАК Количество
		|ПОМЕСТИТЬ ВтДанныеСИдСтроки
		|ИЗ
		|	ВтДанныеПомарочногоУчета КАК ВтДанныеПомарочногоУчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИтСтрокиЗадачНаТСД КАК ИтСтрокиЗадачНаТСД
		|		ПО ВтДанныеПомарочногоУчета.ИдЗадачи = ИтСтрокиЗадачНаТСД.ИдЗадачи
		|			И ВтДанныеПомарочногоУчета.Номенклатура = ИтСтрокиЗадачНаТСД.Номенклатура
		|			И (ВЫБОР
		|				КОГДА ИтСтрокиЗадачНаТСД.СерияНоменклатурыПредставление = """"
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ВтДанныеПомарочногоУчета.СерияНоменклатуры = ИтСтрокиЗадачНаТСД.СерияНоменклатуры
		|			КОНЕЦ)
		|			И ВтДанныеПомарочногоУчета.ДатаРозлива = ИтСтрокиЗадачНаТСД.ДатаРозлива
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтДанныеПомарочногоУчета.Номенклатура,
		|	ВтДанныеПомарочногоУчета.СерияНоменклатуры,
		|	ВтДанныеПомарочногоУчета.ДатаРозлива,
		|	ВтДанныеПомарочногоУчета.НоменклатураПредставление,
		|	ВтДанныеПомарочногоУчета.СерияНоменклатурыПредставление,
		|	ВтДанныеПомарочногоУчета.ИдЗадачи,
		|	ВтДанныеПомарочногоУчета.Количество
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеСИдСтроки.ИдСтроки КАК ИдСтроки,
		|	ВтДанныеСИдСтроки.Номенклатура КАК Номенклатура,
		|	ВтДанныеСИдСтроки.СерияНоменклатуры КАК СерияНоменклатуры,
		|	ВтДанныеСИдСтроки.ДатаРозлива КАК ДатаРозлива,
		|	ВтДанныеСИдСтроки.НоменклатураПредставление КАК НоменклатураПредставление,
		|	ВтДанныеСИдСтроки.СерияНоменклатурыПредставление КАК СерияНоменклатурыПредставление,
		|	ВтДанныеСИдСтроки.ИдЗадачи КАК ИдЗадачи,
		|	ВтДанныеСИдСтроки.Количество КАК Количество
		|ИЗ
		|	ВтДанныеСИдСтроки КАК ВтДанныеСИдСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Вз.ИдСтроки КАК ИдСтроки
		|ИЗ
		|	(ВЫБРАТЬ
		|		ИтСтрокиЗадачНаТСД.ИдСтроки КАК ИдСтроки
		|	ИЗ
		|		РегистрСведений.ИтСтрокиЗадачНаТСД КАК ИтСтрокиЗадачНаТСД
		|	ГДЕ
		|		ИтСтрокиЗадачНаТСД.ИдЗадачи = &Ключ
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ИтСтрокиЗадачНаТСД.ИдСтроки) КАК Вз
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ИтСтрокиЗадачНаТСД.ИдСтроки КАК ИдСтроки
		|		ИЗ
		|			ВтДанныеПомарочногоУчета КАК ВтДанныеПомарочногоУчета
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИтСтрокиЗадачНаТСД КАК ИтСтрокиЗадачНаТСД
		|				ПО ВтДанныеПомарочногоУчета.Номенклатура = ИтСтрокиЗадачНаТСД.Номенклатура
		|					И ВтДанныеПомарочногоУчета.ИдЗадачи = ИтСтрокиЗадачНаТСД.ИдЗадачи
		|					И (ВЫБОР
		|						КОГДА ИтСтрокиЗадачНаТСД.СерияНоменклатурыПредставление = """"
		|							ТОГДА ИСТИНА
		|						ИНАЧЕ ВтДанныеПомарочногоУчета.СерияНоменклатуры = ИтСтрокиЗадачНаТСД.СерияНоменклатуры
		|					КОНЕЦ)
		|					И ВтДанныеПомарочногоУчета.ДатаРозлива = ИтСтрокиЗадачНаТСД.ДатаРозлива
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ИтСтрокиЗадачНаТСД.ИдСтроки) КАК ВложенныйЗапрос
		|		ПО Вз.ИдСтроки = ВложенныйЗапрос.ИдСтроки
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ВложенныйЗапрос.ИдСтроки ЕСТЬ NULL
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("Ключ", ИдЗадачи);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаДетальныеЗаписи = МассивРезультатов[2].Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.ИдСтроки=null тогда
			ИдентификаторСтроки=Неопределено;
			ДобавитьНаСервере(ИдентификаторСтроки);
			ИдентификаторСтроки=СоставУпаквоки.НайтиПоИдентификатору(ИдентификаторСтроки).ИдСтроки;
		иначе
			ИдентификаторСтроки=ВыборкаДетальныеЗаписи.ИдСтроки;
		КонецЕсли;
		НаборЗаписей=РегистрыСведений.ИтСтрокиЗадачНаТСД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдЗадачи.Установить(ИдЗадачи);
		НаборЗаписей.Отбор.ИдСтроки.Установить(ИдентификаторСтроки);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			НаборЗаписей.Добавить();
		КонецЕсли;
		Для Каждого стр из НаборЗаписей цикл
			ЗаполнитьЗначенияСвойств(стр,ВыборкаДетальныеЗаписи,,"Количество,ИдСтроки");
			стр.ИдСтроки= ИдентификаторСтроки;
			Если Объект.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.ПриемкаКакЕсть Тогда 
				стр.Количество=ВыборкаДетальныеЗаписи.Количество;
			КонецЕсли;
			стр.ДанныеДокументаТСД=новый ХранилищеЗначения(Новый Структура("КоличествоФакт",ВыборкаДетальныеЗаписи.Количество))
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	ВыборкаУдаленияДанных=МассивРезультатов[3].Выбрать();
	Пока ВыборкаУдаленияДанных.Следующий() Цикл
		НаборЗаписей=РегистрыСведений.ИтСтрокиЗадачНаТСД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдЗадачи.Установить(ИдЗадачи);
		НаборЗаписей.Отбор.ИдСтроки.Установить(ВыборкаУдаленияДанных.ИдСтроки);
		НаборЗаписей.Прочитать();
		Если Объект.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.ПриемкаКакЕсть Тогда
			НаборЗаписей.Очистить();
		иначе
			ПланРавенНулю=Истина;
			Для Каждого стр из НаборЗаписей цикл
				Если стр.Количество<>0 Тогда 
					ПланРавенНулю=Ложь;
				КонецЕсли;	
				стр.ДанныеДокументаТСД=новый ХранилищеЗначения(Новый Структура("КоличествоФакт",0))
			КонецЦикла;	
			Если ПланРавенНулю Тогда 
				НаборЗаписей.Очистить();
            КонецЕсли;
		КонецЕсли;
		НаборЗаписей.Записать();
	КонецЦикла;
		
	КонецПроцедуры
&НаСервере
Функция ПолучитьАгрегациюМарокЗадачи()	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итДанныеПомарочногоУчета.Марка КАК Марка,
		|	итДанныеПомарочногоУчета.SSCC КАК SSCC,
		|	итДанныеПомарочногоУчета.GTIN КАК GTIN,
		|	итДанныеПомарочногоУчета.Номенклатура КАК Номенклатура,
		|	итДанныеПомарочногоУчета.СерияНоменклатуры КАК СерияНоменклатуры,
		|	итДанныеПомарочногоУчета.ДатаРозлива КАК ДатаРозлива,
		|	итДанныеПомарочногоУчета.НоменклатураПредставление КАК НоменклатураПредставление,
		|	итДанныеПомарочногоУчета.СерияНоменклатурыПредставление КАК СерияНоменклатурыПредставление
		|ПОМЕСТИТЬ ВтДанныеЗадачи
		|ИЗ
		|	РегистрСведений.итДанныеПомарочногоУчета КАК итДанныеПомарочногоУчета
		|ГДЕ
		|	итДанныеПомарочногоУчета.Ключ = &Ключ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	итДанныеПомарочногоУчета.Марка КАК Марка,
		|	итДанныеПомарочногоУчета.SSCC КАК SSCC,
		|	итДанныеПомарочногоУчета.GTIN КАК GTIN,
		|	итДанныеПомарочногоУчета.Номенклатура КАК Номенклатура,
		|	итДанныеПомарочногоУчета.СерияНоменклатуры КАК СерияНоменклатуры,
		|	итДанныеПомарочногоУчета.ДатаРозлива КАК ДатаРозлива,
		|	итДанныеПомарочногоУчета.НоменклатураПредставление КАК НоменклатураПредставление,
		|	итДанныеПомарочногоУчета.СерияНоменклатурыПредставление КАК СерияНоменклатурыПредставление
		|ПОМЕСТИТЬ ВтДанныеДокумента
		|ИЗ
		|	РегистрСведений.итДанныеПомарочногоУчета КАК итДанныеПомарочногоУчета
		|ГДЕ
		|	итДанныеПомарочногоУчета.Ключ = &КлючДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеЗадачи.Марка КАК Марка,
		|	ВтДанныеЗадачи.SSCC КАК SSCC,
		|	ВтДанныеЗадачи.GTIN КАК GTIN,
		|	ВтДанныеЗадачи.Номенклатура КАК Номенклатура,
		|	ВтДанныеЗадачи.СерияНоменклатуры КАК СерияНоменклатуры,
		|	ВтДанныеЗадачи.ДатаРозлива КАК ДатаРозлива,
		|	ВтДанныеЗадачи.НоменклатураПредставление КАК НоменклатураПредставление,
		|	ВтДанныеЗадачи.СерияНоменклатурыПредставление КАК СерияНоменклатурыПредставление,
		|	ВтДанныеДокумента.SSCC КАК SSCCДоАгрегации,
		|	ВтДанныеДокумента.GTIN КАК GTINДоАгрегации
		|ПОМЕСТИТЬ ВтДанныеДляСравнения
		|ИЗ
		|	ВтДанныеЗадачи КАК ВтДанныеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеДокумента КАК ВтДанныеДокумента
		|		ПО ВтДанныеЗадачи.Марка = ВтДанныеДокумента.Марка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеДляСравнения.Марка КАК Марка,
		|	ВтДанныеДляСравнения.SSCC КАК SSCC,
		|	ВтДанныеДляСравнения.GTIN КАК GTIN,
		|	ВтДанныеДляСравнения.Номенклатура КАК Номенклатура,
		|	ВтДанныеДляСравнения.СерияНоменклатуры КАК СерияНоменклатуры,
		|	ВтДанныеДляСравнения.ДатаРозлива КАК ДатаРозлива,
		|	ВтДанныеДляСравнения.НоменклатураПредставление КАК НоменклатураПредставление,
		|	ВтДанныеДляСравнения.СерияНоменклатурыПредставление КАК СерияНоменклатурыПредставление
		|ИЗ
		|	ВтДанныеДляСравнения КАК ВтДанныеДляСравнения
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ВтДанныеДляСравнения.SSCC <> ВтДанныеДляСравнения.SSCCДоАгрегации
		|				ТОГДА ИСТИНА
		|			КОГДА ВтДанныеДляСравнения.GTIN <> ВтДанныеДляСравнения.GTINДоАгрегации
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("Ключ", ИдЗадачи);
	Запрос.УстановитьПараметр("КлючДокумента",Объект.Ссылка.УникальныйИдентификатор());
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
    Возврат РезультатЗапроса;			
КонецФункции



	

#КонецОбласти
