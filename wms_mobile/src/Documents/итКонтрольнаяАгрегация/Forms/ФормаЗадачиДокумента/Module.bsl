#Область ОбработчикиСобытий
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если не Параметры.Свойство("ИдЗадачи") тогда
		Возврат
	КонецЕсли;	
	ИдЗадачи=Параметры.ИдЗадачи;
	ПолучитьДанныеИдЗачи();
	ПолучитьСоставУпаковки();
	
		КлючЗаписиЧтенияДанныхПМУ=ИдЗадачи;	
		КлючЧтенияДанныхПМУпоНаборке=Объект.Ссылка.УникальныйИдентификатор();


		//Объект=Параметры.Документ.Ссылка;
	//ЗаполнитьСлужебныеТаблицы();
	Если СоставУпаквоки.Количество()=0 Тогда
		ШтрихКодОбработан=Ложь;
		ПолучениеДанныхПоШтрихКодуSSCC_GTIN(ИдентификаторУпаковки,ШтрихКодОбработан);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбщийМодульКлиентскойЧасти.ПереопределенияТригераПолучениеШтрихКодаПриОткрытии(ЭтаФорма);
	АгрегироватьОтдельныеМарки=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	ОбщийМодульКлиентскойЧасти.ПереопределенияТригераПолучениеШтрихКодаПриЗакрытии(ЭтаФорма);
КонецПроцедуры
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия="ОбработчикШтрихКода"  и ТригерПриемаСканераШтрихКода тогда
		Если Параметр=404 и Источник="ОшибкаЧтения" тогда
			ОбщийМодульКлиентскойЧасти.СообщитьЧерезФорму("Штрих код некорректен");
			Возврат
		КонецЕсли;	
		ПолучениеДанныхПоШтрихКодуКлиент(Параметр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы="Документ.итКонтрольнаяАгрегация.Форма.ФормаАгрегацииМарки" тогда
		Если ПроверитьНаличиеМаркиВРеестреДанных(ВыбранноеЗначение) тогда
			Возврат
		КонецЕсли;	
		ДобавитьМаркуНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	Если ИсточникВыбора.ИмяФормы="Документ.итКонтрольнаяАгрегация.Форма.ФормаСканированияКонтрольнойМарки" тогда
	МаркаЗакреплена=Истина;
	СохранитьДанныеЗакрепленияМаркиНаСервере();
	Выполнено("");
	КонецЕсли;

КонецПроцедуры
&НаКлиенте
Процедура СоставУпаквокиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ОткрытьФорму("Документ.итКонтрольнаяАгрегация.Форма.ФормаПросмотраСтрокиНМ",новый Структура("НоменклатураПредставление,"
	+"КоличествоФакт,ИдентификаторУпаковки,СерияНоменклатурыПредставление",ТекущийЭлемент.ТекущиеДанные.НоменклатураПредставление,
	ТекущийЭлемент.ТекущиеДанные.Количество,ИдентификаторУпаковки,ТекущийЭлемент.ТекущиеДанные.СерияНоменклатурыПредставление),ЭтаФорма);
	ТригерПриемаСканераШтрихКода=Ложь;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд
&НаКлиенте
Процедура Выполнено(Команда)
	Если не МаркаЗакреплена и СоставУпаквоки.Количество()>0 Тогда 
	ОткрытьФорму("Документ.итКонтрольнаяАгрегация.Форма.ФормаСканированияКонтрольнойМарки",новый Структура("ПомарочныйУчет,Объект,ИдентификаторУпаковки",Истина,Объект,ИдентификаторУпаковки),ЭтаФорма);
	ТригерПриемаСканераШтрихКода=Ложь;
	Возврат
	КонецЕсли;

	Если ИнициализироватьЗадачуВыполнено() тогда
		ЭтаФорма.Закрыть();
		ОбщийМодульКлиентскойЧасти.ОповещениеДинамическихСписковОткрытыхФорм();
	КонецЕсли;	
	
КонецПроцедуры
&НаСервере
Функция ИнициализироватьЗадачуВыполнено()
	СтруктураДанных =новый Структура;
	СлужебныеФункцииИПроцедурыКлиентСервер.СформироватьСтруктуруДанныхОПользователе(СтруктураДанных);
	СтруктураДанных.Вставить("КлючИнициализацииДанных",ИдЗадачи);
	СтруктураДанных.Вставить("ТипЗадачи",ТипЗадачи);
	СтруктураДанных.Вставить("ТипИнициализации","Задача");
	СтруктураДанных.Вставить("СостояниеИнициализации",Перечисления.итWMSСостоянияЗадачТСД.Выполнена);
	СтруктураДанных.Вставить("Инициализация",Ложь);
	СтруктураДанных.Вставить("ФиксацияЗадачи",Ложь);
	СтруктураДанных.Вставить("ТипОбработкиДанных","ВнесениеИзмененийВДокумент");
	СтруктураДанных.Вставить("Данные",СоставУпаквоки.Выгрузить());
	СтруктураДанных=ОбработчикиЗапросаСервера.ЗапроситьДанные(СтруктураДанных,"ControlAggregation");
	Если СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(СтруктураДанных,"Инициализация") тогда
		Возврат Ложь;
	КонецЕсли;	
	МодульРаспределенияДанных.ОбработчикВходящихДанных(СтруктураДанных);
	
	Возврат  СтруктураДанных.Инициализация;
	
	
	//СтруктураОтвета.Вставить("Состояние",Состояние);
	//Возврат ОбработчикДанныхОбщиеФункцииИПроцедуры.ИнициализацияЗадачиНаСервере(СтруктураОтвета,"Задача",Перечисления.итWMSСостоянияЗадачТСД.Выполнена);
КонецФункции
&НаКлиенте
Процедура Очистить(Команда)
	ОчиститьНаСервере();
	СоставУпаквоки.Очистить();
КонецПроцедуры
&НаСервере
Процедура ОчиститьНаСервере()
	//НаборЗаписей=РегистрыСведений.ИтСтрокиЗадачНаТСД.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.ИдЗадачи.Установить(ИдЗадачи);
	//НаборЗаписей.Прочитать();
	//МассивДанныхКУдалению=новый Массив;
	
	
	НачатьТранзакцию();
	Попытка
		ОбъектДляИзменения=Объект.ПолучитьОбъект();
		
		для Каждого стр из СоставУпаквоки цикл
			Если ПроверитьФорматДанныхПомарочногоУчета(стр) тогда
				для Каждого СтрокаДанных из	стр.ДанныеПомарочногоУчета.МассивДанныхПомарочногоУчетаСтроки цикл
					НаборЗаписейПомарочногоУчета=РегистрыСведений.итДанныеПомарочногоУчета.СоздатьНаборЗаписей();
					НаборЗаписейПомарочногоУчета.Отбор.Ключ.Установить(КлючЗаписиЧтенияДанныхПМУ);
					НаборЗаписейПомарочногоУчета.Отбор.Марка.Установить(СтрокаДанных.Марка);
					НаборЗаписейПомарочногоУчета.Прочитать();
					НаборЗаписейПомарочногоУчета.Очистить();
					НаборЗаписейПомарочногоУчета.Записать();
					//
					//МассивСтрокМарокКУдалению=ОбъектДляИзменения.СканированныеМарки.НайтиСтроки(Новый Структура("Марка",СтрокаДанных.Марка));
					//для Каждого СтрМаркиКУдалению из МассивСтрокМарокКУдалению цикл
					//	ОбъектДляИзменения.СканированныеМарки.Удалить(СтрМаркиКУдалению);
					//КонецЦикла;				
				КонецЦикла;
			КонецЕсли;
			//// очистить учетные данные документа
			МассивСтрокДанныхСканирования=ОбъектДляИзменения.ДанныеСканированияДокумента.НайтиСтроки(новый Структура("Номенклатура,СерияНоменклатуры",стр.Номенклатура,стр.СерияНоменклатуры) );
			Если МассивСтрокДанныхСканирования.Количество()>1 тогда
				ВызватьИсключение "ошибка данных строк" ;
			КонецЕсли;
			стрДанныхСканирования= МассивСтрокДанныхСканирования[0];
			стрДанныхСканирования.Количество=стрДанныхСканирования.Количество-стр.Количество;
			Если стрДанныхСканирования.Количество<=0 тогда
				ОбъектДляИзменения.ДанныеСканированияДокумента.Удалить(стрДанныхСканирования);
			КонецЕсли;	
			//КонецЦикла;
		КонецЦикла;
		НаборЗаписей=РегистрыСведений.ИтСтрокиЗадачНаТСД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдЗадачи.Установить(ИдЗадачи);
		НаборЗаписей.Прочитать();
		
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
		ОбъектДляИзменения.Записать();
	Исключение
		ОтменитьТранзакцию();
		Сообщить("Произошел сбой в системе");
		СоставУпаквоки.Очистить();
		ПолучитьСоставУпаковки();
	КонецПопытки;
	ЗафиксироватьТранзакцию();
	
	
КонецПроцедуры
&НаКлиенте
Процедура Назад(Команда)
	ЭтаФорма.Закрыть();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаКлиенте
Процедура ПолучениеДанныхПоШтрихКодуКлиент(ШтрихКод)
	ШтрихКодОбработан=Ложь;
	ПолучениеДанныхПоШтрихКодуSSCC_GTIN(ШтрихКод,ШтрихКодОбработан);
	Если не ШтрихКодОбработан тогда
		ДанныеМарки=НайтиМаркуНаСервере(ШтрихКод,ШтрихКодОбработан);
		Если СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(ДанныеМарки,"ДанныеМарки") тогда
			Возврат
		КонецЕсли;
		Если не ЗначениеАгрегированиеПоНаборке(Объект) Тогда 
			Если  ПроверитьНаличиеМаркиВРеестреДанных(ДанныеМарки.ДанныеМарки) тогда
				Возврат
			КонецЕсли;	
		КонецЕсли;
		Если не АгрегироватьОтдельныеМарки тогда
			ДобавитьМаркуНаСервере(ДанныеМарки.ДанныеМарки);
		иначе
			ОткрытьФорму("Документ.итКонтрольнаяАгрегация.Форма.ФормаАгрегацииМарки",ДанныеМарки,ЭтаФорма);
			ТригерПриемаСканераШтрихКода=Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
&НаСервере
Процедура ПолучениеДанныхПоШтрихКодуSSCC_GTIN(ШтрихКод,ШтрихКодОбработан)
	НачатьТранзакцию();
	Попытка
		Если СтрДлина(ШтрихКод)=26 тогда
			ОбработчикШтрхкода26Символов(ШтрихКод,ШтрихКодОбработан);
		КонецЕсли;
		Если СтрДлина(ШтрихКод)=20 или СтрДлина(ШтрихКод)=18 тогда
			ОбработчикSSCC(ШтрихКод,ШтрихКодОбработан);
		КонецЕсли;
		Если ШтрихКодОбработан тогда
			для Каждого стр из СоставУпаквоки цикл
				НаборЗаписей=РегистрыСведений.ИтСтрокиЗадачНаТСД.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ИдСтроки.Установить(стр.ИдСтроки);
				НаборЗаписей.Отбор.ИдЗадачи.Установить(ИдЗадачи);
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Количество()=0 тогда
					Запись=НаборЗаписей.Добавить();
				иначе
					Запись=НаборЗаписей[0];
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(Запись,стр);
				Запись.ИдЗадачи=ИдЗадачи;
				Запись.ДанныеДокументаТСД=новый ХранилищеЗначения(новый Структура("ДанныеПомарочногоУчета",стр.ДанныеПомарочногоУчета));
				НаборЗаписей.Записать();
			КонецЦикла;
		КонецЕсли;
	Исключение
		ОтменитьТранзакцию();
		Сообщить("Произошел сбой в системе");
		СоставУпаквоки.Очистить();
		ПолучитьСоставУпаковки();
	КонецПопытки;
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаСервере
Процедура ОбработчикШтрхкода26Символов(ШтрихКод,ШтрихКодОбработан)
	ТаблицаДанныхДобавления=Неопределено;
	ТипЛогистическойЕденицы=Сред(ШтрихКод,13,1);
	Попытка
		ТипЛогистическойЕденицы=Число(ТипЛогистическойЕденицы);
	Исключение
		Сообщить("Не возможно определить тип логистической еденицы");
	КонецПопытки;
	
	Если ТипЛогистическойЕденицы=2 или ТипЛогистическойЕденицы=4  тогда
		СтруктураДанных=ЗапроситьДанныеПоМаркамУпаковкинаСервере(,ШтрихКод);
		Если СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(СтруктураДанных,"ТаблицаДанныхПомарочногоУчета") тогда
			Возврат
		КонецЕсли;
		Если СтруктураДанных.ТаблицаДанныхПомарочногоУчета.Количество()=0 тогда
			Возврат
		КонецЕсли;
		ТаблицаДанныхДобавления=СтруктураДанных.ТаблицаДанныхПомарочногоУчета; 
	КонецЕсли;
	Если ТипЛогистическойЕденицы=1 или ТипЛогистическойЕденицы=3 тогда
		СтруктураДанных=ЗапроситьДанныеПоМаркамУпаковкинаСервере(ШтрихКод);
		Если СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(СтруктураДанных,"ТаблицаДанныхПомарочногоУчета") тогда
			Возврат
		КонецЕсли;
		Если СтруктураДанных.ТаблицаДанныхПомарочногоУчета.Количество()=0 тогда
			Возврат
		КонецЕсли;
		ТаблицаДанныхДобавления=СтруктураДанных.ТаблицаДанныхПомарочногоУчета; 
	КонецЕсли;	
	Если ТаблицаДанныхДобавления=Неопределено тогда
		Сообщить("данных по "+ШтрихКод+" нет");
		Возврат
	КонецЕсли;	
	ЗаполненияДанныхПоGTINSSCC(ТаблицаДанныхДобавления);
	ШтрихКодОбработан=Истина;
КонецПроцедуры
&НаСервере
Процедура ОбработчикSSCC(ШтрихКод,ШтрихКодОбработан)
	ТаблицаДанныхДобавления=Неопределено;
	SSCCБезКонтрольнойЦифры=Лев(ШтрихКод,СтрДлина(ШтрихКод)-1);
	КонтрольнаяЦифраВSSCC=Прав(ШтрихКод,1);
	ДанныеРасчетаКонтрольнойЦифры=ПолучитьКонтрольнуюЦифруШтрихКода(SSCCБезКонтрольнойЦифры);
	Если  СокрЛП(НРег(КонтрольнаяЦифраВSSCC))=СокрЛП(НРег(ДанныеРасчетаКонтрольнойЦифры)) или СтрДлина(ШтрихКод)=18 тогда
		//ТаблицаДанныхДобавления=Документы.итКонтрольнаяАгрегация.РезультатЗапросаПоSSCC_GTIN(Объект.Ссылка,,ШтрихКод);
		СтруктураДанных=ЗапроситьДанныеПоМаркамУпаковкинаСервере(,ШтрихКод);
		Если СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(СтруктураДанных,"ТаблицаДанныхПомарочногоУчета") тогда
			Возврат
		КонецЕсли;
		Если СтруктураДанных.ТаблицаДанныхПомарочногоУчета.Количество()=0 тогда
			Возврат
		КонецЕсли;
		ТаблицаДанныхДобавления=СтруктураДанных.ТаблицаДанныхПомарочногоУчета; 
	КонецЕсли;	
	Если ТаблицаДанныхДобавления=Неопределено тогда
		Сообщить("данных по "+ШтрихКод+" нет");
		Возврат
	КонецЕсли;	
	ЗаполненияДанныхПоGTINSSCC(ТаблицаДанныхДобавления);
	ШтрихКодОбработан=Истина;
КонецПроцедуры
&НаСервере
Функция ЗапроситьДанныеПоМаркамУпаковкинаСервере(GTIN="",SSCC="")
	СтруктураДанных =новый Структура;
	Если Объект.АгрегированиеПоНаборке Тогда
		Если GTIN="" тогда
			ПолучитьДанныеМарокSSCCGTINИзБазыТерминала(SSCC,,СтруктураДанных);
		Иначе 
			ПолучитьДанныеМарокSSCCGTINИзБазыТерминала(,GTIN,СтруктураДанных);
		КонецЕсли;	
	иначе
		СлужебныеФункцииИПроцедурыКлиентСервер.СформироватьСтруктуруДанныхОПользователе(СтруктураДанных);
		СтруктураДанных.Вставить("КлючИнициализацииДанных",Объект.ГУИД);
		СтруктураДанных.Вставить("ТипЗадачи",ТипЗадачи);
		СтруктураДанных.Вставить("ТипОбработкиДанных","ПолучениеДанныхSSCCGTIN");
		Если GTIN="" тогда
			СтруктураДанных.Вставить("SSCC",SSCC);
		Иначе 
			СтруктураДанных.Вставить("GTIN",GTIN);
		КонецЕсли;
		СтруктураДанных=ОбработчикиЗапросаСервера.ЗапроситьДанные(СтруктураДанных,"ControlAggregation");
	КонецЕсли;
	Возврат  СтруктураДанных;
КонецФункции
&НаСервере
Процедура ПолучитьДанныеМарокSSCCGTINИзБазыТерминала(SSCC="",GTIN="",СтруктураДанных)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИтЗадачиНаТСД.ИдЗадачи
	|ПОМЕСТИТЬ ИдЗадачДокумента
	|ИЗ
	|	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
	|ГДЕ
	|	ИтЗадачиНаТСД.ДокументОснование = &ДокументОснование
	|СГРУППИРОВАТЬ ПО
	|	ИтЗадачиНаТСД.ИдЗадачи
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итДанныеПомарочногоУчета.Марка
	|ПОМЕСТИТЬ СканированныеМаркиДокумента
	|ИЗ
	|	ИдЗадачДокумента КАК ИдЗадачДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итДанныеПомарочногоУчета КАК итДанныеПомарочногоУчета
	|		ПО ИдЗадачДокумента.ИдЗадачи = итДанныеПомарочногоУчета.Ключ
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итДанныеПомарочногоУчета.Ключ КАК Ключ,
	|	итДанныеПомарочногоУчета.Марка КАК Марка,
	|	итДанныеПомарочногоУчета.SSCC КАК SSCC,
	|	итДанныеПомарочногоУчета.GTIN КАК GTIN,
	|	итДанныеПомарочногоУчета.Номенклатура КАК Номенклатура,
	|	итДанныеПомарочногоУчета.СерияНоменклатуры КАК СерияНоменклатуры,
	|	итДанныеПомарочногоУчета.ДатаРозлива КАК ДатаРозлива,
	|	итДанныеПомарочногоУчета.НоменклатураПредставление КАК НоменклатураПредставление,
	|	итДанныеПомарочногоУчета.СерияНоменклатурыПредставление КАК СерияНоменклатурыПредставление,
	|	ВЫБОР
	|		КОГДА СканированныеМаркиДокумента.Марка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПризнакОбработки
	|ПОМЕСТИТЬ МаркиСПризнакомОбработки
	|ИЗ
	|	РегистрСведений.итДанныеПомарочногоУчета КАК итДанныеПомарочногоУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ СканированныеМаркиДокумента КАК СканированныеМаркиДокумента
	|		ПО итДанныеПомарочногоУчета.Марка = СканированныеМаркиДокумента.Марка
	|ГДЕ
	|	итДанныеПомарочногоУчета.Ключ = &Ключ
	|	И ВЫБОР
	|		КОГДА &GTIN = """"
	|			ТОГДА итДанныеПомарочногоУчета.SSCC = &SSCC
	|		ИНАЧЕ итДанныеПомарочногоУчета.GTIN = &GTIN
	|	КОНЕЦ
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаркиСПризнакомОбработки.Ключ,
	|	МаркиСПризнакомОбработки.Марка,
	|	МаркиСПризнакомОбработки.SSCC,
	|	МаркиСПризнакомОбработки.GTIN,
	|	МаркиСПризнакомОбработки.Номенклатура КАК Номенклатура,
	|	МаркиСПризнакомОбработки.СерияНоменклатуры КАК СерияНоменклатуры,
	|	МаркиСПризнакомОбработки.ДатаРозлива КАК ДатаРозлива,
	|	МаркиСПризнакомОбработки.НоменклатураПредставление КАК НоменклатураПредставление,
	|	МаркиСПризнакомОбработки.СерияНоменклатурыПредставление КАК СерияНоменклатурыПредставление,
	|	МаркиСПризнакомОбработки.ПризнакОбработки
	|ИЗ
	|	МаркиСПризнакомОбработки КАК МаркиСПризнакомОбработки
	|ГДЕ
	|	НЕ МаркиСПризнакомОбработки.ПризнакОбработки
	|ИТОГИ
	|	МАКСИМУМ(НоменклатураПредставление) КАК НоменклатураПредставление,
	|	МАКСИМУМ(СерияНоменклатурыПредставление) КАК СерияНоменклатурыПредставление,
	|	МАКСИМУМ(ДатаРозлива) КАК ДатаРозлива
	|ПО
	|	Номенклатура,
	|	СерияНоменклатуры";
	
	Запрос.УстановитьПараметр("GTIN", GTIN);
	Запрос.УстановитьПараметр("SSCC", SSCC);
	Запрос.УстановитьПараметр("Ключ", КлючЧтенияДанныхПМУпоНаборке);
	Запрос.УстановитьПараметр("ДокументОснование",Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаДанныхПомарочногоУчета=новый ТаблицаЗначений;
	ТаблицаДанныхПомарочногоУчета.Колонки.Добавить("СерияНоменклатуры",новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаДанныхПомарочногоУчета.Колонки.Добавить("Номенклатура",новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаДанныхПомарочногоУчета.Колонки.Добавить("СерияНоменклатурыПредставление",Новый ОписаниеТипов("Строка",,,,новый КвалификаторыСтроки(150)));
	ТаблицаДанныхПомарочногоУчета.Колонки.Добавить("НоменклатураПредставление",Новый ОписаниеТипов("Строка",,,,новый КвалификаторыСтроки(150)));
	ТаблицаДанныхПомарочногоУчета.Колонки.Добавить("Количество",новый ОписаниеТипов("Число",,,новый КвалификаторыЧисла(15,3)));
	ТаблицаДанныхПомарочногоУчета.Колонки.Добавить("ДетализацияПоМаркам",новый ОписаниеТипов("ТаблицаЗначений"));
	
	Если РезультатЗапроса.Пустой() тогда
		СтруктураДанных.Вставить("ТаблицаДанныхПомарочногоУчета",ТаблицаДанныхПомарочногоУчета);
		Возврат
	КонецЕсли;	
	
	
	ВыборкаНоменклатуры = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНоменклатуры.Следующий() Цикл
		ВыборкаПоСерии=ВыборкаНоменклатуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		пока ВыборкаПоСерии.Следующий() цикл
			НоваяЗаписьДанныхПомарочногоУчета=ТаблицаДанныхПомарочногоУчета.Добавить();
			//ЗаполнитьЗначенияСвойств(НоваяЗаписьДанныхПомарочногоУчета,ВыборкаДетальныеЗаписи);
			НоваяЗаписьДанныхПомарочногоУчета.СерияНоменклатуры=ВыборкаПоСерии.СерияНоменклатуры;
			НоваяЗаписьДанныхПомарочногоУчета.Номенклатура=ВыборкаПоСерии.Номенклатура;
			НоваяЗаписьДанныхПомарочногоУчета.СерияНоменклатурыПредставление=ВыборкаПоСерии.СерияНоменклатурыПредставление;
			НоваяЗаписьДанныхПомарочногоУчета.НоменклатураПредставление=ВыборкаПоСерии.НоменклатураПредставление;
			
			ДетализацияПоМаркам= новый ТаблицаЗначений;
			ДетализацияПоМаркам.Колонки.Добавить("GTIN",новый ОписаниеТипов("Строка",,,,новый КвалификаторыСтроки(172)));
			ДетализацияПоМаркам.Колонки.Добавить("SSCC",Новый ОписаниеТипов("Строка",,,,новый КвалификаторыСтроки(172)));
			ДетализацияПоМаркам.Колонки.Добавить("Марка",новый ОписаниеТипов("Строка",,,,новый КвалификаторыСтроки(172)));
			
			ВыборкаДетальныеЗаписи=ВыборкаПоСерии.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() цикл
				ЗаполнитьЗначенияСвойств(ДетализацияПоМаркам.Добавить(),ВыборкаДетальныеЗаписи);
			КонецЦикла;
			НоваяЗаписьДанныхПомарочногоУчета.ДетализацияПоМаркам= ДетализацияПоМаркам;
			
		КонецЦикла;
	КонецЦикла;
	СтруктураДанных.Вставить("ТаблицаДанныхПомарочногоУчета",ТаблицаДанныхПомарочногоУчета);
	КонецПроцедуры
&НаСервере
Процедура ЗаполненияДанныхПоGTINSSCC(ТаблицаДанныхДобавления)
	ОбъектДляИзменения=Объект.ПолучитьОбъект();
	для Каждого стр из ТаблицаДанныхДобавления цикл
		////// запись в таблицу отображения СоставУпаквоки и таблицы сопровождающихся данных СканированнеМарки и Сканированные GTINSSCC
		МассивСтрок=СоставУпаквоки.НайтиСтроки(новый Структура("Номенклатура,СерияНоменклатуры",стр.Номенклатура,стр.СерияНоменклатуры));
		Если МассивСтрок.Количество()>1 тогда
			Сообщить("Исключительная ошибка");
			Возврат
		КонецЕсли;
		Если  МассивСтрок.Количество()=0 тогда
			СтрокаСоставаУпаковки= СоставУпаквоки.Добавить();
			СтрокаСоставаУпаковки.ИдСтроки=новый УникальныйИдентификатор;
		иначе
			СтрокаСоставаУпаковки=МассивСтрок[0];
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаСоставаУпаковки,стр,,"Количество");
		МассивСтрокСканированияДокумента=ОбъектДляИзменения.ДанныеСканированияДокумента.НайтиСтроки(Новый Структура("Номенклатура,СерияНоменклатуры",стр.Номенклатура,стр.СерияНоменклатуры));
		Если  МассивСтрокСканированияДокумента.Количество()=0 тогда
			СтрокаСканированияДокумента= ОбъектДляИзменения.ДанныеСканированияДокумента.Добавить();
		иначе
			СтрокаСканированияДокумента=МассивСтрокСканированияДокумента[0];
		КонецЕсли;	
		ЗаполнитьЗначенияСвойств(СтрокаСканированияДокумента,стр,,"Количество");
		СеркаДанныхПоМаркамСБуферомДанныхНаТСД(стр.ДетализацияПоМаркам);
		для Каждого ЭлементПомарочногоУчета из стр.ДетализацияПоМаркам цикл
			//////////ДОбавление данных по маркам и количеству для текущей строки 
			Если ПроверитьФорматДанныхПомарочногоУчета(СтрокаСоставаУпаковки) тогда 
				МассивДанныхПомарочногоУчетаСтроки=СтрокаСоставаУпаковки.ДанныеПомарочногоУчета.МассивДанныхПомарочногоУчетаСтроки;
				МассивДанныхПомарочногоУчетаСтроки.Добавить(ЗадатьСтруктураДанныхПомарочногоУчета(ЭлементПомарочногоУчета.Марка,ЭлементПомарочногоУчета.GTIN));
			иначе
				МассивДанныхПомарочногоУчетаСтроки= новый Массив;
				МассивДанныхПомарочногоУчетаСтроки.Добавить(ЗадатьСтруктураДанныхПомарочногоУчета(ЭлементПомарочногоУчета.Марка,ЭлементПомарочногоУчета.GTIN));
				СтрокаСоставаУпаковки.ДанныеПомарочногоУчета=новый Структура("МассивДанныхПомарочногоУчетаСтроки",МассивДанныхПомарочногоУчетаСтроки);
			КонецЕсли;
			СтрокаСоставаУпаковки.Количество=  СтрокаСоставаУпаковки.Количество+1;
			/////////////////////////////////////////////////////////////////////////////////////////////////////
			/////////Фиксация помарочного учета в общих итогах по документу
			НаборЗаписейПомарочногоУчета=РегистрыСведений.итДанныеПомарочногоУчета.СоздатьНаборЗаписей();
			НаборЗаписейПомарочногоУчета.Отбор.Ключ.Установить(КлючЗаписиЧтенияДанныхПМУ);
			НаборЗаписейПомарочногоУчета.Отбор.Марка.Установить(ЭлементПомарочногоУчета.Марка);
			НаборЗаписейПомарочногоУчета.Прочитать();
			НаборЗаписейПомарочногоУчета.Очистить();
			СтрокаСканированныхМарок=НаборЗаписейПомарочногоУчета.Добавить(); //ОбъектДляИзменения.СканированныеМарки.Добавить();
			СтрокаСканированныхМарок.Ключ=КлючЗаписиЧтенияДанныхПМУ;
			ЗаполнитьЗначенияСвойств(СтрокаСканированныхМарок,стр);
			ЗаполнитьЗначенияСвойств(СтрокаСканированныхМарок,ЭлементПомарочногоУчета);
			///Исправление 19.10.18
			СтрокаСканированныхМарок.SSCC=ИдентификаторУпаковки;
			///
			НаборЗаписейПомарочногоУчета.Записать();
			//////////////////////////////////

			///////////////////////////////////////////////////////////////////////////////
			///////Итоговая запись в общем количество по текущей серии и номенклатуре
			СтрокаСканированияДокумента.Количество= СтрокаСканированияДокумента.Количество+1;
			/////////////////////////////////////////////////////////////////////////////////
		КонецЦикла;
	КонецЦикла;
	ОбъектДляИзменения.Записать();
	
КонецПроцедуры
&НаСервере
Функция ПроверитьНаличиеМаркиВРеестреДанных(ДанныеМарки)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИтЗадачиНаТСД.ИдЗадачи
	|ПОМЕСТИТЬ ИдЗадачиДокумента
	|ИЗ
	|	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
	|ГДЕ
	|	ИтЗадачиНаТСД.ДокументОснование = &ДокументОснование
	|СГРУППИРОВАТЬ ПО
	|	ИтЗадачиНаТСД.ИдЗадачи
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итДанныеПомарочногоУчета.Марка,
	|	итДанныеПомарочногоУчета.SSCC,
	|	итДанныеПомарочногоУчета.GTIN
	|ПОМЕСТИТЬ ДанныеМарокДокумента
	|ИЗ
	|	ИдЗадачиДокумента КАК ИдЗадачиДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итДанныеПомарочногоУчета КАК итДанныеПомарочногоУчета
	|		ПО ИдЗадачиДокумента.ИдЗадачи = итДанныеПомарочногоУчета.Ключ
	|СГРУППИРОВАТЬ ПО
	|	итДанныеПомарочногоУчета.Марка,
	|	итДанныеПомарочногоУчета.SSCC,
	|	итДанныеПомарочногоУчета.GTIN
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеМарокДокумента.Марка,
	|	ДанныеМарокДокумента.SSCC,
	|	ДанныеМарокДокумента.GTIN
	|ИЗ
	|	ДанныеМарокДокумента КАК ДанныеМарокДокумента
	|ГДЕ
	|	ДанныеМарокДокумента.Марка = &Марка";
	
	//Запрос.УстановитьПараметр("GTIN", ДанныеМарки.Упаковка);
	Запрос.УстановитьПараметр("Марка",ДанныеМарки.Марка);
	Запрос.УстановитьПараметр("ДокументОснование",Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат Ложь;
	иначе
		Выборка=РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() цикл
			Сообщить("Марка уже числится в отсканированном SSCC "+Выборка.SSCC+" за коробкой "+ Выборка.GTIN);
			КонецЦикла;
		Возврат Истина;
	КонецЕсли;	
	
КонецФункции
&НаСервере
Процедура ДобавитьМаркуНаСервере(ДанныеМарки)
	НачатьТранзакцию();
	Попытка
		ОбъектДляИзменения=Объект.ПолучитьОбъект();
		GTINАгрегации="";
		Если ДанныеМарки.Свойство("GTINАгрегации") тогда
			GTINАгрегации=ДанныеМарки.GTINАгрегации;
		КонецЕсли;	
		//для Каждого стр из ТаблицаДанныхДобавления цикл
		////// запись в таблицу отображения СоставУпаквоки и таблицы сопровождающихся данных СканированнеМарки и Сканированные GTINSSCC
		МассивСтрок=СоставУпаквоки.НайтиСтроки(новый Структура("Номенклатура,СерияНоменклатуры",ДанныеМарки.Номенклатура,ДанныеМарки.СерияНоменклатуры));
		Если МассивСтрок.Количество()>1 тогда
			Сообщить("Исключительная ошибка");
			Возврат
		КонецЕсли;
		Если  МассивСтрок.Количество()=0 тогда
			СтрокаСоставаУпаковки= СоставУпаквоки.Добавить();
			СтрокаСоставаУпаковки.ИдСтроки=новый УникальныйИдентификатор;
		иначе
			СтрокаСоставаУпаковки=МассивСтрок[0];
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаСоставаУпаковки,ДанныеМарки);
		Если ПроверитьФорматДанныхПомарочногоУчета(СтрокаСоставаУпаковки) тогда 
			МассивДанныхПомарочногоУчетаСтроки=СтрокаСоставаУпаковки.ДанныеПомарочногоУчета.МассивДанныхПомарочногоУчетаСтроки;
			МассивДанныхПомарочногоУчетаСтроки.Добавить(ЗадатьСтруктураДанныхПомарочногоУчета(ДанныеМарки.Марка,GTINАгрегации));
		иначе
			МассивДанныхПомарочногоУчетаСтроки= новый Массив;
			МассивДанныхПомарочногоУчетаСтроки.Добавить(ЗадатьСтруктураДанныхПомарочногоУчета(ДанныеМарки.Марка,GTINАгрегации));
			СтрокаСоставаУпаковки.ДанныеПомарочногоУчета=новый Структура("МассивДанныхПомарочногоУчетаСтроки",МассивДанныхПомарочногоУчетаСтроки);
		КонецЕсли;
		СтрокаСоставаУпаковки.Количество=  СтрокаСоставаУпаковки.Количество+1 ;
		НаборЗаписейПомарочногоУчета=РегистрыСведений.итДанныеПомарочногоУчета.СоздатьНаборЗаписей();
		НаборЗаписейПомарочногоУчета.Отбор.Ключ.Установить(КлючЗаписиЧтенияДанныхПМУ);
		НаборЗаписейПомарочногоУчета.Отбор.Марка.Установить(ДанныеМарки.Марка);
		НаборЗаписейПомарочногоУчета.Прочитать();
		НаборЗаписейПомарочногоУчета.Очистить();
		СтрокаСканированныхМарок=НаборЗаписейПомарочногоУчета.Добавить(); //ОбъектДляИзменения.СканированныеМарки.Добавить();
		СтрокаСканированныхМарок.Ключ=КлючЗаписиЧтенияДанныхПМУ;
		ЗаполнитьЗначенияСвойств(СтрокаСканированныхМарок,ДанныеМарки);
		СтрокаСканированныхМарок.GTIN=GTINАгрегации;
		СтрокаСканированныхМарок.SSCC=ИдентификаторУпаковки;
		НаборЗаписейПомарочногоУчета.Записать();
		///////////////////////////////

		////////////////////////////////
		МассивСтрокСканированияДокумента=ОбъектДляИзменения.ДанныеСканированияДокумента.НайтиСтроки(Новый Структура("Номенклатура,СерияНоменклатуры",ДанныеМарки.Номенклатура,ДанныеМарки.СерияНоменклатуры));
		Если  МассивСтрокСканированияДокумента.Количество()=0 тогда
			СтрокаСканированияДокумента= ОбъектДляИзменения.ДанныеСканированияДокумента.Добавить();
		иначе
			СтрокаСканированияДокумента=МассивСтрокСканированияДокумента[0];
		КонецЕсли;	
		ЗаполнитьЗначенияСвойств(СтрокаСканированияДокумента,ДанныеМарки);
		СтрокаСканированияДокумента.Количество= СтрокаСканированияДокумента.Количество+1;
		///Запись в регистр
		НаборЗаписейСтрокиЗадачи= РегистрыСведений.ИтСтрокиЗадачНаТСД.СоздатьНаборЗаписей();
		НаборЗаписейСтрокиЗадачи.Отбор.ИдЗадачи.Установить(ИдЗадачи);
		НаборЗаписейСтрокиЗадачи.Отбор.ИдСтроки.Установить(СтрокаСоставаУпаковки.ИдСтроки);
		НаборЗаписейСтрокиЗадачи.Прочитать();
		Если НаборЗаписейСтрокиЗадачи.Количество()=0 тогда
			Запись=НаборЗаписейСтрокиЗадачи.Добавить();	
		иначе
			Запись=НаборЗаписейСтрокиЗадачи[0];
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Запись,СтрокаСоставаУпаковки);
		Запись.ИдЗадачи=ИдЗадачи;
		Запись.ДанныеДокументаТСД=новый ХранилищеЗначения(новый Структура("ДанныеПомарочногоУчета",СтрокаСоставаУпаковки.ДанныеПомарочногоУчета));
		НаборЗаписейСтрокиЗадачи.Записать();
		//КонецЦикла;
		ОбъектДляИзменения.Записать();
	Исключение
		ОтменитьТранзакцию();
		Сообщить("Произошел сбой в системе");
		СоставУпаквоки.Очистить();
		ПолучитьСоставУпаковки();	
	КонецПопытки;
	ЗафиксироватьТранзакцию();
КонецПроцедуры

&НаСервере	
Функция НайтиМаркуНаСервере(ШтрихКод,ШтрихКодОбработан)
	СтруктураДанных =новый Структура;
	Если  Объект.АгрегированиеПоНаборке Тогда 
		ПолучениеДанныхМаркиПоБазеТСД(ШтрихКод,СтруктураДанных);
	иначе	
	СлужебныеФункцииИПроцедурыКлиентСервер.СформироватьСтруктуруДанныхОПользователе(СтруктураДанных);
	СтруктураДанных.Вставить("КлючИнициализацииДанных",Объект.ГУИД);
	СтруктураДанных.Вставить("ТипЗадачи",ТипЗадачи);
	СтруктураДанных.Вставить("ТипОбработкиДанных","ПолучениеДанныхОтдельнойМарки");
	СтруктураДанных.Вставить("ШтрихКодМарки",ШтрихКод);
	СтруктураДанных=ОбработчикиЗапросаСервера.ЗапроситьДанные(СтруктураДанных,"ControlAggregation");
	КонецЕсли;
	
	Возврат  СтруктураДанных;
	
	
	
КонецФункции
&НаСервере
Процедура ПолучениеДанныхМаркиПоБазеТСД(ШтрихКод,СтруктураДанных)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итДанныеПомарочногоУчета.Ключ КАК Ключ,
	|	итДанныеПомарочногоУчета.Марка КАК Марка,
	|	итДанныеПомарочногоУчета.SSCC КАК SSCC,
	|	итДанныеПомарочногоУчета.GTIN КАК GTIN,
	|	итДанныеПомарочногоУчета.Номенклатура КАК Номенклатура,
	|	итДанныеПомарочногоУчета.СерияНоменклатуры КАК СерияНоменклатуры,
	|	итДанныеПомарочногоУчета.ДатаРозлива КАК ДатаРозлива,
	|	итДанныеПомарочногоУчета.НоменклатураПредставление КАК НоменклатураПредставление,
	|	итДанныеПомарочногоУчета.СерияНоменклатурыПредставление КАК СерияНоменклатурыПредставление,
	|	итДанныеПомарочногоУчета.ПризнакОбработки КАК ПризнакОбработки
	|ПОМЕСТИТЬ ВтМарка
	|ИЗ
	|	РегистрСведений.итДанныеПомарочногоУчета КАК итДанныеПомарочногоУчета
	|ГДЕ
	|	итДанныеПомарочногоУчета.Марка = &Марка
	|	И итДанныеПомарочногоУчета.Ключ = &Ключ
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтЗадачиНаТСД.ИдЗадачи КАК ИдЗадачи
	|ПОМЕСТИТЬ ЗадачиДокумента
	|ИЗ
	|	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
	|ГДЕ
	|	ИтЗадачиНаТСД.ДокументОснование = &ДокументОснование
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итДанныеПомарочногоУчета.Марка КАК Марка,
	|	итДанныеПомарочногоУчета.SSCC КАК SSCC
	|ПОМЕСТИТЬ МаркиЗадач
	|ИЗ
	|	ЗадачиДокумента КАК ЗадачиДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итДанныеПомарочногоУчета КАК итДанныеПомарочногоУчета
	|		ПО ЗадачиДокумента.ИдЗадачи = итДанныеПомарочногоУчета.Ключ
	|ГДЕ
	|	итДанныеПомарочногоУчета.Марка = &Марка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтМарка.Ключ КАК Ключ,
	|	ВтМарка.Марка КАК Марка,
	|	ВтМарка.SSCC КАК SSCC,
	|	ВтМарка.GTIN КАК GTIN,
	|	ВтМарка.Номенклатура КАК Номенклатура,
	|	ВтМарка.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ВтМарка.ДатаРозлива КАК ДатаРозлива,
	|	ВтМарка.НоменклатураПредставление КАК НоменклатураПредставление,
	|	ВтМарка.СерияНоменклатурыПредставление КАК СерияНоменклатурыПредставление,
	|	ВЫБОР
	|		КОГДА МаркиЗадач.Марка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПризнакОбработки,
	|	ЕСТЬNULL(МаркиЗадач.SSCC, """") КАК SSCCПринадлежности
	|ИЗ
	|	ВтМарка КАК ВтМарка
	|		ЛЕВОЕ СОЕДИНЕНИЕ МаркиЗадач КАК МаркиЗадач
	|		ПО ВтМарка.Марка = МаркиЗадач.Марка";
	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	Запрос.УстановитьПараметр("Ключ", КлючЧтенияДанныхПМУпоНаборке);
	Запрос.УстановитьПараметр("Марка", ШтрихКод);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		СтруктураДанных.Вставить("Статус",404);
		СтруктураДанных.Вставить("ОписаниеОшибки","нет данных по штрих-коду");
		Возврат
	КонецЕсли;
	ВыборкаДетальныеЗаписи=РезультатЗапроса.Выбрать();
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Если ВыборкаДетальныеЗаписи.ПризнакОбработки Тогда 
			СтруктураДанных.Вставить("Статус",404);
			СтруктураДанных.Вставить("ОписаниеОшибки","Марка числиться за SSCC "+ВыборкаДетальныеЗаписи.SSCCПринадлежности);
			Возврат
		КонецЕсли;
		СтруктудаДанныеМарки=новый Структура;
		СтруктудаДанныеМарки.Вставить("Марка",ВыборкаДетальныеЗаписи.Марка);
		СтруктудаДанныеМарки.Вставить("Упаковка",ВыборкаДетальныеЗаписи.GTIN);
		СтруктудаДанныеМарки.Вставить("СерияНоменклатуры",ВыборкаДетальныеЗаписи.СерияНоменклатуры);
		СтруктудаДанныеМарки.Вставить("СерияНоменклатурыПредставление",ВыборкаДетальныеЗаписи.СерияНоменклатурыПредставление);
		СтруктудаДанныеМарки.Вставить("Номенклатура",ВыборкаДетальныеЗаписи.Номенклатура);
		СтруктудаДанныеМарки.Вставить("НоменклатураПредставление",ВыборкаДетальныеЗаписи.НоменклатураПредставление);
		СтруктураДанных.Вставить("ДанныеМарки",СтруктудаДанныеМарки);	
	КонецЕсли;
	
	
	
	КонецПроцедуры
&НаСервере	
Функция ПолучитьКонтрольнуюЦифруШтрихКода(ШтрихКод)Экспорт
	ДлинаШтрихКода=СтрДлина(ШтрихКод);
	СуммаНеЧетных=ПолучитьСуммуЦифрНаНечетныхМестах(ДлинаШтрихКода,ШтрихКод);
	СуммаЧетных=ПосчитатьСуммуЦифрНаЧетныхМестах(ДлинаШтрихКода,ШтрихКод);
	СтрокаИтого=Строка(СуммаНеЧетных+СуммаЧетных);
	ЕденицаСуммы=Прав(СтрокаИтого,1);
	Если Число(ЕденицаСуммы) = 0 тогда
		Возврат "0" 
	иначе
		Возврат Строка(10-Число(ЕденицаСуммы));
	КонецЕсли;	
КонецФункции
&НаСервере
Функция ПосчитатьСуммуЦифрНаЧетныхМестах(ДлинаШтрихКода,ШтрихКод)
	Если ДлинаШтрихКода<2 тогда
		Возврат 0
	КонецЕсли;
	Сумма=0;
	ТочкаОтсчета=ДлинаШтрихКода;
	Если  Окр(ДлинаШтрихКода/2,0,РежимОкругления.Окр15как20) <> ДлинаШтрихКода/2 тогда
		ЧетноеКоличествоСимволов=Ложь;
	иначе
		ЧетноеКоличествоСимволов=Истина;
	КонецЕсли;	
	
	для n=1 по ДлинаШтрихКода цикл
		Если ТочкаОтсчета-n=0 и не ЧетноеКоличествоСимволов Тогда 
			Прервать;
		КонецЕсли;	
		Сумма=Сумма+Число(Сред(ШтрихКод,ТочкаОтсчета-n,1));
		Если (n+1)>ДлинаШтрихКода тогда
			Прервать;
		КонецЕсли;		
		n=n+1;
	КонецЦикла;
	
	Возврат Сумма;
	
КонецФункции
&НаСервере	
Функция ПолучитьСуммуЦифрНаНечетныхМестах(ДлинаШтрихКода,ШтрихКод)
	Сумма=0;
	ТочкаОтсчета=ДлинаШтрихКода+1;
	Если  Окр(ДлинаШтрихКода/2,0,РежимОкругления.Окр15как20) <> ДлинаШтрихКода/2 тогда
		ЧетноеКоличествоСимволов=Ложь;
	иначе
		ЧетноеКоличествоСимволов=Истина;
	КонецЕсли;	

	для n=1 по ДлинаШтрихКода цикл
		Если ТочкаОтсчета-n=0 и  ЧетноеКоличествоСимволов Тогда 
			Прервать;
		КонецЕсли;
		Сумма=Сумма+Число(Сред(ШтрихКод,ТочкаОтсчета-n,1));
		Если (n+1)>ДлинаШтрихКода тогда
			Прервать;
		КонецЕсли;	
		n=n+1;
	КонецЦикла;
	Сумма=Сумма*3;
	Возврат Сумма;
КонецФункции
&НаСервере
Процедура ПолучитьДанныеИдЗачи()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИтЗадачиНаТСД.ДокументОснование КАК Объект,
	|	ИтЗадачиНаТСД.ТипЗадачи КАК ТипЗадачи,
	|	ИтЗадачиНаТСД.ИдЗадачи КАК ИдЗадачи,
	|	ИтЗадачиНаТСД.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ИтЗадачиНаТСД.ЯчейкаОтправитель КАК ЯчейкаОтправитель,
	|	ИтЗадачиНаТСД.ЯчейкаОтправительПредставление КАК ЯчейкаОтправительПредставление,
	|	ИтЗадачиНаТСД.ЯчейкаПолучатель КАК ЯчейкаПолучатель,
	|	ИтЗадачиНаТСД.ЯчейкаПолучательПредставление КАК ЯчейкаПолучательПредставление,
	|	ИтЗадачиНаТСД.Состояние КАК Состояние,
	|	ИтЗадачиНаТСД.ДополнительныеДанные КАК ДополнительныеДанные,
	|	ИтЗадачиНаТСД.ДанныеДокументаТСД КАК ДанныеДокументаТСД
	|ИЗ
	|	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
	|ГДЕ
	|	ИтЗадачиНаТСД.ИдЗадачи = &ИдЗадачи";
	
	Запрос.УстановитьПараметр("ИдЗадачи", ИдЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма,ВыборкаДетальныеЗаписи);
		ДанныеХранилища=ВыборкаДетальныеЗаписи.ДанныеДокументаТСД.Получить();
		Если ТипЗнч(ДанныеХранилища)=Тип("Структура") тогда
			ЗаполнитьЗначенияСвойств(ЭтаФорма,ДанныеХранилища);
		КонецЕсли;	
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
КонецПроцедуры
&НаСервере
Процедура ПолучитьСоставУпаковки()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИтСтрокиЗадачНаТСД.ИдЗадачи КАК ИдЗадачи,
	|	ИтСтрокиЗадачНаТСД.ИдСтроки КАК ИдСтроки,
	|	ИтСтрокиЗадачНаТСД.Номенклатура КАК Номенклатура,
	|	ИтСтрокиЗадачНаТСД.НоменклатураПредставление КАК НоменклатураПредставление,
	|	ИтСтрокиЗадачНаТСД.ДатаРозлива КАК ДатаРозлива,
	|	ИтСтрокиЗадачНаТСД.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ИтСтрокиЗадачНаТСД.СерияНоменклатурыПредставление КАК СерияНоменклатурыПредставление,
	|	ИтСтрокиЗадачНаТСД.Количество КАК Количество,
	|	ИтСтрокиЗадачНаТСД.ДанныеДокументаТСД КАК ДанныеДокументаТСД
	|ИЗ
	|	РегистрСведений.ИтСтрокиЗадачНаТСД КАК ИтСтрокиЗадачНаТСД
	|ГДЕ
	|	ИтСтрокиЗадачНаТСД.ИдЗадачи = &ИдЗадачи";
	
	Запрос.УстановитьПараметр("ИдЗадачи", ИдЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока=СоставУпаквоки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаДетальныеЗаписи);
		ЗначениеХранилища=ВыборкаДетальныеЗаписи.ДанныеДокументаТСД.Получить();
		Если  ЗначениеХранилища<>Неопределено тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ЗначениеХранилища);	  
			Если ЗначениеХранилища.Свойство("ДанныеПомарочногоУчета") тогда
				НоваяСтрока.ДанныеПомарочногоУчета=ЗначениеХранилища.ДанныеПомарочногоУчета;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры
&НаСервере
Функция ПроверитьФорматДанныхПомарочногоУчета(СтрокаСоставаУпаковки)
	Если ТипЗнч(СтрокаСоставаУпаковки.ДанныеПомарочногоУчета)=тип("Структура") тогда
		Если СтрокаСоставаУпаковки.ДанныеПомарочногоУчета.Свойство("МассивДанныхПомарочногоУчетаСтроки") тогда
			Возврат Истина ;	
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
КонецФункции
&НаСервере
Функция ЗадатьСтруктураДанныхПомарочногоУчета(Марка="",GTIN="")
	СтруктураХраненияДанных = новый Структура;
	СтруктураХраненияДанных.Вставить("Марка",Марка);
	СтруктураХраненияДанных.Вставить("GTIN",GTIN);
	Возврат СтруктураХраненияДанных;	
КонецФункции
&НаСервере
Процедура СеркаДанныхПоМаркамСБуферомДанныхНаТСД(ДетализацияПоМаркам)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДетализацияПоМаркам.GTIN КАК GTIN,
		|	ДетализацияПоМаркам.SSCC КАК SSCC,
		|	ДетализацияПоМаркам.Марка КАК Марка
		|ПОМЕСТИТЬ ДетализацияПоМаркамВТ
		|ИЗ
		|	&ДетализацияПоМаркам КАК ДетализацияПоМаркам
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИтЗадачиНаТСД.ИдЗадачи
		|ПОМЕСТИТЬ ВтЗадачиДокумента
		|ИЗ
		|	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
		|ГДЕ
		|	ИтЗадачиНаТСД.ДокументОснование = &ДокументОснование
		|СГРУППИРОВАТЬ ПО
		|	ИтЗадачиНаТСД.ИдЗадачи
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	итДанныеПомарочногоУчета.Марка
		|ПОМЕСТИТЬ МаркиДокумента
		|ИЗ
		|	ВтЗадачиДокумента КАК ВтЗадачиДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итДанныеПомарочногоУчета КАК итДанныеПомарочногоУчета
		|		ПО ВтЗадачиДокумента.ИдЗадачи = итДанныеПомарочногоУчета.Ключ
		|СГРУППИРОВАТЬ ПО
		|	итДанныеПомарочногоУчета.Марка
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДетализацияПоМаркамВТ.GTIN,
		|	ДетализацияПоМаркамВТ.SSCC,
		|	ДетализацияПоМаркамВТ.Марка
		|ИЗ
		|	ДетализацияПоМаркамВТ КАК ДетализацияПоМаркамВТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ МаркиДокумента КАК МаркиДокумента
		|		ПО ДетализацияПоМаркамВТ.Марка = МаркиДокумента.Марка
		|ГДЕ
		|	ВЫБОР
		|		КОГДА МаркиДокумента.Марка ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ";
	
		Запрос.УстановитьПараметр("ДетализацияПоМаркам",ДетализацияПоМаркам);
		Запрос.УстановитьПараметр("ДокументОснование",Объект.Ссылка);
		ДетализацияПоМаркам = Запрос.Выполнить().Выгрузить();
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
	КонецПроцедуры
&НаСервере
Процедура СохранитьДанныеЗакрепленияМаркиНаСервере()
НаборЗаписей=РегистрыСведений.ИтЗадачиНаТСД.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.ИдЗадачи.Установить(ИдЗадачи);
НаборЗаписей.Отбор.ДокументОснование.Установить(Объект.Ссылка);
НаборЗаписей.Прочитать();
для Каждого стр из НаборЗаписей цикл
	ДанныеХранилища=стр.ДанныеДокументаТСД.Получить();
	Если ТипЗнч(ДанныеХранилища)=Тип("Структура") тогда
		ДанныеХранилища.Вставить("МаркаЗакреплена",МаркаЗакреплена);
	иначе
		ДанныеХранилища=новый Структура("МаркаЗакреплена",МаркаЗакреплена);
	КонецЕсли;
	стр.ДанныеДокументаТСД=новый ХранилищеЗначения(ДанныеХранилища);
КонецЦикла;
НаборЗаписей.Записать();
	КонецПроцедуры
&НаСервереБезКонтекста	
Функция ЗначениеАгрегированиеПоНаборке(СылкаОбъекта)
	Возврат СылкаОбъекта.АгрегированиеПоНаборке;
	КонецФункции

#КонецОбласти


#Область КонсервированныйКод
//	&НаСервере
//Процедура ЗаполненияДанныхПоGTINSSCC(ТаблицаДанныхДобавления)
//	ОбъектДляИзменения=Объект.ПолучитьОбъект();
//	для Каждого стр из ТаблицаДанныхДобавления цикл
//		////// запись в таблицу отображения СоставУпаквоки и таблицы сопровождающихся данных СканированнеМарки и Сканированные GTINSSCC
//		МассивСтрок=СоставУпаквоки.НайтиСтроки(новый Структура("Номенклатура,СерияНоменклатуры",стр.Номенклатура,стр.СерияНоменклатуры));
//		Если МассивСтрок.Количество()>1 тогда
//			Сообщить("Исключительная ошибка");
//			Возврат
//		КонецЕсли;
//		Если  МассивСтрок.Количество()=0 тогда
//			СтрокаСоставаУпаковки= СоставУпаквоки.Добавить();
//			СтрокаСоставаУпаковки.ИдСтроки=новый УникальныйИдентификатор;
//		иначе
//			СтрокаСоставаУпаковки=МассивСтрок[0];
//		КонецЕсли;
//		ЗаполнитьЗначенияСвойств(СтрокаСоставаУпаковки,стр,,"Количество");
//		Если ПроверитьФорматДанныхПомарочногоУчета(СтрокаСоставаУпаковки) тогда 
//			МассивДанныхПомарочногоУчетаСтроки=СтрокаСоставаУпаковки.ДанныеПомарочногоУчета.МассивДанныхПомарочногоУчетаСтроки;
//			МассивДанныхПомарочногоУчетаСтроки.Добавить(ЗадатьСтруктураДанныхПомарочногоУчета(,стр.GTIN));
//		иначе
//			МассивДанныхПомарочногоУчетаСтроки= новый Массив;
//			МассивДанныхПомарочногоУчетаСтроки.Добавить(ЗадатьСтруктураДанныхПомарочногоУчета(,стр.GTIN));
//			СтрокаСоставаУпаковки.ДанныеПомарочногоУчета=новый Структура("МассивДанныхПомарочногоУчетаСтроки",МассивДанныхПомарочногоУчетаСтроки);
//		КонецЕсли;
//		СтрокаСоставаУпаковки.Количество=  СтрокаСоставаУпаковки.Количество+стр.Количество ;
//		СтрокаСканированныхGtinSSCC= ОбъектДляИзменения.СканированныеGTIN_SSCC.Добавить();
//		ЗаполнитьЗначенияСвойств(СтрокаСканированныхGtinSSCC,стр);
//		МассивСтрокСканированияДокумента=ОбъектДляИзменения.ДанныеСканированияДокумента.НайтиСтроки(Новый Структура("Номенклатура,СерияНоменклатуры",стр.Номенклатура,стр.СерияНоменклатуры));
//		Если  МассивСтрокСканированияДокумента.Количество()=0 тогда
//			СтрокаСканированияДокумента= ОбъектДляИзменения.ДанныеСканированияДокумента.Добавить();
//		иначе
//			СтрокаСканированияДокумента=МассивСтрокСканированияДокумента[0];
//		КонецЕсли;	
//		ЗаполнитьЗначенияСвойств(СтрокаСканированияДокумента,стр,,"Количество");
//		СтрокаСканированияДокумента.Количество= СтрокаСканированияДокумента.Количество+стр.Количество;
//		///Запись в регистр
//		//НаборЗаписейСтрокиЗадачи= РегистрыСведений.ИтСтрокиЗадачНаТСД.СоздатьНаборЗаписей();
//		//НаборЗаписейСтрокиЗадачи.Отбор.ИдЗадачи.Установить(ИдЗадачи);
//		//НаборЗаписейСтрокиЗадачи.Отбор.ИдСтроки.Установить(СтрокаСоставаУпаковки.ИдСтроки);
//		//НаборЗаписейСтрокиЗадачи.Прочитать();
//		//Если НаборЗаписейСтрокиЗадачи.Количество()=0 тогда
//		//	Запись=НаборЗаписейСтрокиЗадачи.Добавить();	
//		//иначе
//		//	Запись=НаборЗаписейСтрокиЗадачи[0];
//		//КонецЕсли;
//		//ЗаполнитьЗначенияСвойств(Запись,СтрокаСоставаУпаковки);
//		//Запись.ИдЗадачи=ИдЗадачи;
//		//Запись.ДанныеДокументаТСД=новый ХранилищеЗначения(новый Структура("ДанныеПомарочногоУчета",СтрокаСоставаУпаковки.ДанныеПомарочногоУчета));
//		//НаборЗаписейСтрокиЗадачи.Записать();
//	КонецЦикла;
//	ОбъектДляИзменения.Записать();
//КонецПроцедуры


#КонецОбласти
