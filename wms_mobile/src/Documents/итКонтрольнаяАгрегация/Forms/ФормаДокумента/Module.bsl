#Область ОбработчикиСобытий
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗадачиТСД.Параметры.УстановитьЗначениеПараметра("ДокументОснование",Объект.Ссылка);
	ЗадачиТСД.Параметры.УстановитьЗначениеПараметра("ТипЗадачи",Объект.ТипЗадачи);
КонецПроцедуры
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбщийМодульКлиентскойЧасти.ПереопределенияТригераПолучениеШтрихКодаПриОткрытии(ЭтаФорма);	
КонецПроцедуры
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	ОбщийМодульКлиентскойЧасти.ПереопределенияТригераПолучениеШтрихКодаПриЗакрытии(ЭтаФорма);
КонецПроцедуры
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия="ОбработчикШтрихКода"  и ТригерПриемаСканераШтрихКода тогда
		Если Параметр=404 и Источник="ОшибкаЧтения" тогда
			ОбщийМодульКлиентскойЧасти.СообщитьЧерезФорму("Штрих код некорректен");
			Возврат
		КонецЕсли;	
		 ОбработчкаПолученияДанныхШтрихКода(Параметр);
	 КонецЕсли;
	КонецПроцедуры	
&НаКлиенте
Процедура ЗадачиТСДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ИдентификаторУпаковки) тогда
		Оповещение = новый ОписаниеОповещения("ПечатьИдентификатораУпаковкиОповещение",ЭтаФорма,Элемент.ТекущиеДанные.ИдентификаторУпаковки);
		ПоказатьВопрос(Оповещение,"Хотите распечатать текущий идентификатор?",РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПечатьИдентификатораУпаковкиОповещение(Результат,Параметры) Экспорт
	Если Результат=КодВозвратаДиалога.Нет тогда
		Возврат
	КонецЕсли;	
	ОткрытьФорму("ОбщаяФорма.ВыборПринтераДляПечати",Новый Структура("ИдентификаторУпаковки",Параметры),ЭтаФорма);
	ТригерПриемаСканераШтрихКода=Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
КонецПроцедуры
//&НаКлиенте
//Процедура ЯчейкаПолучательПредставлениеНажатие(Элемент)
//	СтандартнаяОбработка=Ложь;
//	ОткрытьФорму("ОбщаяФорма.СканированиеЯчейки",Новый Структура("ПолеПолучательИдентификатор,ПолеПолучательПредставление","ЯчейкаПолучатель","ЯчейкаПолучательПредставление"),ЭтаФорма);
//	ТригерПриемаСканераШтрихКода=Ложь;
//КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд
&НаКлиенте
Процедура Назад(Команда)
	ЭтаФорма.Закрыть()
КонецПроцедуры
&НаКлиенте
Процедура ЗакончитьАгрегацию(Команда)
	СтруктураОтвета=ПолучитьДанныеПроверки();
	Если СтруктураОтвета.ТекстОшибки<>"" тогда
		ОбщийМодульКлиентскойЧасти.СообщитьЧерезФорму(СтруктураОтвета.ТекстОшибки);
		Возврат
	КонецЕсли;
	Если СтруктураОтвета.МассивРасхождений.Количество()=0 тогда
	Оповещение=новый ОписаниеОповещения("ЗакончитьАгрегациюОповещение",ЭтаФорма);
	ПоказатьВопрос(Оповещение,"ВЫ ХОТИТЕ ЗАВЕРШИТЬ Агрегацию??",РежимДиалогаВопрос.ДаНет);
иначе
	ОткрытьФорму("Документ.итКонтрольнаяАгрегация.Форма.ФормаРасхожденийАгрегации",СтруктураОтвета,ЭтаФорма);
	ТригерПриемаСканераШтрихКода=Ложь;
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ЗакончитьАгрегациюОповещение(Результат,Параметры)Экспорт
	Если Результат = КодВозвратаДиалога.Нет тогда
		Возврат
	КонецЕсли;
	Если ЗакончитьАгрегациюНаСервере() тогда
		ОбщийМодульКлиентскойЧасти.ОповещениеДинамическихСписковОткрытыхФорм();
		ЭтаФорма.Закрыть();
	КонецЕсли;	
КонецПроцедуры
&НаСервере
Функция  ЗакончитьАгрегациюНаСервере()
	СтруктураДанных =новый Структура;
	СлужебныеФункцииИПроцедурыКлиентСервер.СформироватьСтруктуруДанныхОПользователе(СтруктураДанных);
	ЗадачаДокумента= ПолучитьЗадачуДокумента();
	Если ЗадачаДокумента=Неопределено тогда
		Сообщить("По документу не обнаруженно данных");
		Возврат Ложь;
	КонецЕсли;	
	
	СтруктураДанных.Вставить("КлючИнициализацииДанных",ЗадачаДокумента);
	СтруктураДанных.Вставить("ТипЗадачи",Объект.ТипЗадачи);
	СтруктураДанных.Вставить("ТипИнициализации","Документ");
	СтруктураДанных.Вставить("СостояниеИнициализации",Перечисления.итWMSСостоянияЗадачТСД.Выполнена);
	СтруктураДанных.Вставить("Инициализация",Ложь);
	СтруктураДанных.Вставить("ФиксацияЗадачи",Истина);
	СтруктураДанных=ОбработчикиЗапросаСервера.ЗапроситьДанные(СтруктураДанных,"Initialization");
	СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(СтруктураДанных,"Инициализация");
	МодульРаспределенияДанных.ОбработчикВходящихДанных(СтруктураДанных);
	
	Возврат  СтруктураДанных.Инициализация;
	
КонецФункции
&НаКлиенте
Процедура ОтказатьсяОтЗадачи(Команда)
	Оповещение=новый ОписаниеОповещения("ОтказатьсяОтЗадачиОповещение",ЭтаФорма);
	ПоказатьВопрос(Оповещение,"Вы точно хотите отказаться от Задачи",РежимДиалогаВопрос.ДаНет);
КонецПроцедуры
&НаКлиенте
Процедура ОтказатьсяОтЗадачиОповещение(Результат,Параметры) Экспорт 
	Если Результат=КодВозвратаДиалога.Нет тогда
		Возврат
	КонецЕсли;	
	Если ОтказатьсяОтЗадачиНаСервере() тогда
		ОбщийМодульКлиентскойЧасти.ОповещениеДинамическихСписковОткрытыхФорм();
		ЭтаФорма.Закрыть();
	иначе
		ОбщийМодульКлиентскойЧасти.СообщитьЧерезФорму("не удачная попытка отказа от задачи, попробуйте еще раз, или подойтиде к оператору");
	КонецЕсли;	
КонецПроцедуры
&НаСервере
Функция  ОтказатьсяОтЗадачиНаСервере()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИтЗадачиНаТСД.ИдЗадачи КАК ИдЗадачи,
	|	ИтЗадачиНаТСД.ТипЗадачи КАК ТипЗадачи,
	|	ИтЗадачиНаТСД.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
	|ГДЕ
	|	ИтЗадачиНаТСД.ДокументОснование = &ДокументОснование
	|	И ИтЗадачиНаТСД.ТипЗадачи = &ТипЗадачи";
	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТипЗадачи", Объект.ТипЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	СтруктураОтказаЗадачи=новый Структура;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		для Каждого Колонка из РезультатЗапроса.Колонки цикл
			СтруктураОтказаЗадачи.Вставить(Колонка.Имя,ВыборкаДетальныеЗаписи[Колонка.Имя]);
		КонецЦикла;
	КонецЦикла;
	Возврат ОбработчикДанныхОбщиеФункцииИПроцедуры.ИнициализацияЗадачиНаСервере(СтруктураОтказаЗадачи,"ДокументОтказ",Перечисления.итWMSСостоянияЗадачТСД.КВыполнению);
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции
&НаКлиенте
Процедура НовыйSSCC(Команда)
	Оповещение=новый ОписаниеОповещения("НовыйSSCCОповещение",ЭтаФорма);
	ПоказатьВопрос(Оповещение,"Запросить новый SSCC на сервере?",РежимДиалогаВопрос.ДаНет);

КонецПроцедуры
&НаКлиенте
Процедура НовыйSSCCОповещение(Результат,Параметры)Экспорт 
	Если Результат=КодВозвратаДиалога.Нет тогда
		Возврат
	КонецЕсли;	
	НовыйSSCCНаСервере();
КонецПроцедуры

&НаСервере
Процедура НовыйSSCCНаСервере()
	СтруктураДанных=новый Структура;
	СлужебныеФункцииИПроцедурыКлиентСервер.СформироватьСтруктуруДанныхОПользователе(СтруктураДанных);
	СтруктураДанных.Вставить("ТипОбработкиДанных","НовыйSSCCКонтрольнаяАгрегация");
	СтруктураДанных.Вставить("КлючИнициализацииДанных",Объект.ГУИД);
	СтруктураДанных.Вставить("ТипЗадачи",Объект.ТипЗадачи);
	СтруктураДанных=ОбработчикиЗапросаСервера.ЗапроситьДанные(СтруктураДанных,"ControlAggregation");
	Если СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(СтруктураДанных) тогда
		Возврат
	КонецЕсли;	
	МодульРаспределенияДанных.ОбработчикВходящихДанных(СтруктураДанных);
	Элементы.ЗадачиТСД.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ПрисвоитьВнешнийSSCC(Команда)
	ОткрытьФорму("Документ.итКонтрольнаяАгрегация.Форма.СчитываниеВнешнегоSSCC",новый Структура("ОбъектДанных",Объект.Ссылка),ЭтаФорма);
	ТригерПриемаСканераШтрихКода=Ложь;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ИнфорацияОСтатусеДокумента()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ИтЗадачиНаТСД.Состояние = ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.Выполнена)
	|					ИЛИ ИтЗадачиНаТСД.Состояние = ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.Выполняется)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Статус
	|ИЗ
	|	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
	|ГДЕ
	|	ИтЗадачиНаТСД.ДокументОснование = &ДокументОснование
	|	И ИтЗадачиНаТСД.ТипЗадачи = &ТипЗадачи";
	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТипЗадачи", Объект.ТипЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		Если  ВыборкаДетальныеЗаписи.Статус=1 тогда
			Возврат Истина;
		иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции

&НаКлиенте
Процедура ВидимостьЭлементов()
	ВидимостьЭлементовНаСервере();
КонецПроцедуры
&НаСервере
Процедура  ВидимостьЭлементовНаСервере()
	Элементы.ФормаЗакончитьАгрегацию.Видимость=Исполняется;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчкаПолученияДанныхШтрихКода(ШтрихКод)
СтруктураОтвета=СлужебныеФункцииИПроцедурыКлиентСервер.ПолучитьДанныеИзИтЗадачиТСД(ШтрихКод,Объект.Ссылка);
ПредставлениеТипаЗадачи=СлужебныеФункцииИПроцедурыКлиентСервер.ПредставлениеТипаЗадачиТСД(Объект.ТипЗадачи);
Если СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(СтруктураОтвета,ПредставлениеТипаЗадачи) тогда
	Возврат
КонецЕсли;
Если ИнициализацияЗадачиНаСервере(СтруктураОтвета[ПредставлениеТипаЗадачи]) тогда
ОткрытьФорму("Документ.итКонтрольнаяАгрегация.Форма.ФормаЗадачиДокумента",СтруктураОтвета[ПредставлениеТипаЗадачи],ЭтаФорма);
ТригерПриемаСканераШтрихКода=Ложь;
иначе
ОбщийМодульКлиентскойЧасти.СообщитьЧерезФорму("Отказ инициализации Задач");
КонецЕсли;

КонецПроцедуры
&НаСервере
Функция  ИнициализацияЗадачиНаСервере(СтруктураОтвета)
	Если ИнфорацияОСтатусеДокумента() тогда
		Возврат ОбработчикДанныхОбщиеФункцииИПроцедуры.ИнициализацияЗадачиНаСервере(СтруктураОтвета,"Задача",Перечисления.итWMSСостоянияЗадачТСД.Выполняется);	
	иначе
		Возврат ОбработчикДанныхОбщиеФункцииИПроцедуры.ИнициализацияЗадачиНаСервере(СтруктураОтвета,"Документ",Перечисления.итWMSСостоянияЗадачТСД.Выполняется);		
	КонецЕсли;
КонецФункции


&НаСервере
Функция ПолучитьЗадачуДокумента()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИтЗадачиНаТСД.ИдЗадачи КАК ИдЗадачи
	|ИЗ
	|	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
	|ГДЕ
	|	ИтЗадачиНаТСД.ДокументОснование = &ДокументОснование
	|	И ИтЗадачиНаТСД.ТипЗадачи = &ТипЗадачи";
	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТипЗадачи", Объект.ТипЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		Возврат ВыборкаДетальныеЗаписи.ИдЗадачи;
	КонецЕсли;
	Возврат Неопределено;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции
&НаСервере
Функция ПолучитьДанныеПроверки()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	СтруктураОтвета=новый Структура;
	СтруктураОтвета.Вставить("ТекстОшибки","");

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИтЗадачиНаТСД.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
		|	ИтЗадачиНаТСД.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
		|ГДЕ
		|	ИтЗадачиНаТСД.ДокументОснование = &Ссылка
		|	И ИтЗадачиНаТСД.Состояние <> &Состояние
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|	ВложенныйЗапрос.НоменклатураПредставление КАК НоменклатураПредставление,
		|	ВложенныйЗапрос.СерияНоменклатуры КАК СерияНоменклатуры,
		|	ВложенныйЗапрос.СерияНоменклатурыПредставление КАК СерияНоменклатурыПредставление,
		|	СУММА(ВложенныйЗапрос.КоличествоПлан) КАК КоличествоПлан,
		|	СУММА(ВложенныйЗапрос.КоличествоФакт) КАК КоличествоФакт
		|ПОМЕСТИТЬ ГруппированныеДанные
		|ИЗ
		|	(ВЫБРАТЬ
		|		итКонтрольнаяАгрегацияДанныеДокументаКСканированию.Номенклатура КАК Номенклатура,
		|		итКонтрольнаяАгрегацияДанныеДокументаКСканированию.НоменклатураПредставление КАК НоменклатураПредставление,
		|		итКонтрольнаяАгрегацияДанныеДокументаКСканированию.СерияНоменклатуры КАК СерияНоменклатуры,
		|		итКонтрольнаяАгрегацияДанныеДокументаКСканированию.СерияНоменклатурыПредставление КАК СерияНоменклатурыПредставление,
		|		итКонтрольнаяАгрегацияДанныеДокументаКСканированию.Количество КАК КоличествоПлан,
		|		0 КАК КоличествоФакт
		|	ИЗ
		|		Документ.итКонтрольнаяАгрегация.ДанныеДокументаКСканированию КАК итКонтрольнаяАгрегацияДанныеДокументаКСканированию
		|	ГДЕ
		|		итКонтрольнаяАгрегацияДанныеДокументаКСканированию.Ссылка = &Ссылка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		итКонтрольнаяАгрегацияДанныеСканированияДокумента.Номенклатура,
		|		итКонтрольнаяАгрегацияДанныеСканированияДокумента.НоменклатураПредставление,
		|		итКонтрольнаяАгрегацияДанныеСканированияДокумента.СерияНоменклатуры,
		|		итКонтрольнаяАгрегацияДанныеСканированияДокумента.СерияНоменклатурыПредставление,
		|		0,
		|		итКонтрольнаяАгрегацияДанныеСканированияДокумента.Количество
		|	ИЗ
		|		Документ.итКонтрольнаяАгрегация.ДанныеСканированияДокумента КАК итКонтрольнаяАгрегацияДанныеСканированияДокумента
		|	ГДЕ
		|		итКонтрольнаяАгрегацияДанныеСканированияДокумента.Ссылка = &Ссылка) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.СерияНоменклатурыПредставление,
		|	ВложенныйЗапрос.СерияНоменклатуры,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.НоменклатураПредставление
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГруппированныеДанные.Номенклатура КАК Номенклатура,
		|	ГруппированныеДанные.НоменклатураПредставление КАК НоменклатураПредставление,
		|	ГруппированныеДанные.СерияНоменклатуры КАК СерияНоменклатуры,
		|	ГруппированныеДанные.СерияНоменклатурыПредставление КАК СерияНоменклатурыПредставление,
		|	ГруппированныеДанные.КоличествоПлан КАК КоличествоПлан,
		|	ГруппированныеДанные.КоличествоФакт КАК КоличествоФакт
		|ИЗ
		|	ГруппированныеДанные КАК ГруппированныеДанные
		|ГДЕ
		|	ГруппированныеДанные.КоличествоПлан <> ГруппированныеДанные.КоличествоФакт";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Состояние",Перечисления.итWMSСостоянияЗадачТСД.Выполнена);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ПроверкаНаКритическуюОшибку = МассивРезультатов[0].Выбрать();
	
	Пока ПроверкаНаКритическуюОшибку.Следующий() Цикл
	СтруктураОтвета.ТекстОшибки=СтруктураОтвета.ТекстОшибки+ "  SSCC "+ПроверкаНаКритическуюОшибку.ИдентификаторУпаковки + " не находится в состоянии выполнен";	
	КонецЦикла;
    РезультатРасхождений=МассивРезультатов[2];
	
	ВыборкаРасхождений=РезультатРасхождений.Выбрать();
	МассивРасхождений=новый Массив;
	Пока ВыборкаРасхождений.Следующий() Цикл
		СтруктураХраненияДанных=новый Структура;
		для Каждого Колонка из РезультатРасхождений.Колонки цикл
			СтруктураХраненияДанных.Вставить(Колонка.Имя,ВыборкаРасхождений[Колонка.имя]);
		КонецЦикла;
		МассивРасхождений.Добавить(СтруктураХраненияДанных);
	КонецЦикла;
	СтруктураОтвета.Вставить("МассивРасхождений",МассивРасхождений);
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Возврат СтруктураОтвета;
	КонецФункции
#КонецОбласти

#Область КонсервированныйКод

#КонецОбласти
