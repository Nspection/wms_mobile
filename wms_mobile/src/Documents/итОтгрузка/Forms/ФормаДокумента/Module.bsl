#Область ОбработчикиСобытий
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьДанныеЗадачи(Отказ);
	СписокВыбораПричнОтмены();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбработчикШтрихКода" и ТригерПриемаСканераШтрихКода тогда
		Если Параметр = 404 и Источник = "ОшибкаЧтения" тогда
			ОбщийМодульКлиентскойЧасти.СообщитьЧерезФорму("Штрих код некорректен");
			Возврат
		КонецЕсли;
		ОбработчкаПолученияДанныхШтрихКода(Параметр);
	КонецЕсли;
	//Если ИмяСобытия="ОбновлениеДанныхДинамическихСписков" и Источник=ОбщийМодульКлиентскойЧасти тогда
	//   Элементы.ЗадачиТСД.Обновить();
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбщийМодульКлиентскойЧасти.ПереопределенияТригераПолучениеШтрихКодаПриОткрытии(ЭтаФорма);
	Если СокрЛП(Элементы.ОсталосьДанные.Заголовок) = "0" Тогда
		Если ФиксацияВсехЗадачДокумента() Тогда
			ПодключитьОбработчикОжидания("ЗакрытиеФормыЧерезОжидаение", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	ОбщийМодульКлиентскойЧасти.ПереопределенияТригераПолучениеШтрихКодаПриЗакрытии(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура НеПоказыватьВыполненныеПриИзмененииНаСервере()
	ДанныеИдентификаторов.Параметры.УстановитьЗначениеПараметра("НеПоказыватьВыполненныеИОтмененные", НеПоказыватьВыполненныеИОтмененные);
КонецПроцедуры

&НаКлиенте
Процедура НеПоказыватьВыполненныеПриИзменении(Элемент)
	НеПоказыватьВыполненныеПриИзмененииНаСервере();
	Элементы.ДанныеИдентификаторов.Обновить();
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКоманд
&НаКлиенте
Процедура Назад(Команда)
	ЭтаФорма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьсяОтЗадачи(Команда)
	Оповещение = новый ОписаниеОповещения("ОтказатьсяОтЗадачиОповещение", ЭтаФорма);
	ПоказатьВопрос(Оповещение, "Вы точно хотите отказаться от Задачи", РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ОтказатьсяОтЗадачиОповещение(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет тогда
		Возврат
	КонецЕсли;
	Если ОтказатьсяОтЗадачиНаСервере() тогда
		ОбщийМодульКлиентскойЧасти.ОповещениеДинамическихСписковОткрытыхФорм();
		ЭтаФорма.Закрыть();
	иначе
		ОбщийМодульКлиентскойЧасти.СообщитьЧерезФорму("не удачная попытка отказа от задачи, попробуйте еще раз, или подойтиде к оператору");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ОтказатьсяОтЗадачиНаСервере()
//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИтЗадачиНаТСД.ИдЗадачи КАК ИдЗадачи,
		|	ИтЗадачиНаТСД.ТипЗадачи КАК ТипЗадачи,
		|	ИтЗадачиНаТСД.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
		|ГДЕ
		|	ИтЗадачиНаТСД.ДокументОснование = &ДокументОснование
		|	И ИтЗадачиНаТСД.ТипЗадачи = &ТипЗадачи";

	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТипЗадачи", Объект.ТипЗадачи);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	СтруктураОтказаЗадачи = новый Структура;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		для Каждого Колонка из РезультатЗапроса.Колонки цикл
			СтруктураОтказаЗадачи.Вставить(Колонка.Имя, ВыборкаДетальныеЗаписи[Колонка.Имя]);
		КонецЦикла;
	КонецЦикла;
	Возврат ОбработчикДанныхОбщиеФункцииИПроцедуры.ИнициализацияЗадачиНаСервере(СтруктураОтказаЗадачи, "ДокументОтказ", Перечисления.итWMSСостоянияЗадачТСД.КВыполнению);

	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
КонецФункции

&НаКлиенте
Процедура ЗадачаНеМожетБытьВыполнена(Команда)
	Если ПричинаОтменыЗадачи.Пустая() Тогда
		Сообщить("Укажите причины отмены задачи!");
		Возврат
	КонецЕсли;
	Оповещение = новый ОписаниеОповещения("ЗадачаНеМожетБытьВыполненаОповещение", ЭтаФорма);
	ПоказатьВопрос(Оповещение, "Оставшиеся паллеты будут отменены. Продолжить?", РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаНеМожетБытьВыполненаОповещение(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат
	КонецЕсли;
	Отказ = Ложь;
	АварийноеЗавершениеЗадачи(Отказ);
	ЗаполнитьДанныеЗадачиКлиентскийВызов();
КонецПроцедуры


&НаКлиенте
Процедура КраткаяИнформация(Команда)
	ОткрытьФорму("Документ.итОтгрузка.Форма.ФормаКраткогоСодержания",новый Структура("Ссылка",Объект.Ссылка),ЭтаФорма);
	ТригерПриемаСканераШтрихКода=Ложь;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаКлиенте
Функция ЗаполнитьДанныеЗадачиКлиентскийВызов() Экспорт
	Отказ = Ложь;
	НеВозвращатьТригер = Ложь;
	ЗаполнитьДанныеЗадачи(Отказ);
	Если СокрЛП(Элементы.ОсталосьДанные.Заголовок) = "0" Тогда
		Если ФиксацияВсехЗадачДокумента() Тогда
			НеВозвращатьТригер = Истина;
			ПодключитьОбработчикОжидания("ЗакрытиеФормыЧерезОжидаение", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
	Возврат НеВозвращатьТригер;
КонецФункции

&НаКлиенте
Процедура ЗакрытиеФормыЧерезОжидаение() Экспорт
	ЭтаФорма.Закрыть();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеЗадачи(Отказ)
	ТаблицаЗадачДляАнализа = ПолучитьТаблицуЗадачДляОбработки(Отказ);
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	ЗаполнитьДаннымиНаОснованииТаблицы(ТаблицаЗадачДляАнализа, Отказ);
	Элементы.ДанныеИдентификаторов.Обновить();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиНаОснованииТаблицы(ТаблицаЗадачДляАнализа, Отказ)
//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ИтЗадачиНаТСД.ДокументОснование КАК ДокументОснование,
		|	ИтЗадачиНаТСД.ТипЗадачи КАК ТипЗадачи,
		|	ИтЗадачиНаТСД.ИдЗадачиПредставление КАК ИдЗадачи,
		|	ИтЗадачиНаТСД.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
		|	ИтЗадачиНаТСД.ЯчейкаОтправительПредставление КАК ЯчейкаОтправительПредставление,
		|	ИтЗадачиНаТСД.ЯчейкаПолучательПредставление КАК ЯчейкаПолучательПредставление,
		|	ИтЗадачиНаТСД.Состояние КАК Состояние,
		|	ИтЗадачиНаТСД.ОчередностьПогрузки КАК ОчередностьПогрузки,
		|	ИтЗадачиНаТСД.Контрагент КАК Контрагент,
		|	ИтЗадачиНаТСД.ДатаНаборки КАК ДатаНаборки,
		|	ИтЗадачиНаТСД.НомерНаборки КАК НомерНаборки
		|ПОМЕСТИТЬ ВтДанныеДляАнализа
		|ИЗ
		|	&ТаблицаЗадачДляАнализа КАК ИтЗадачиНаТСД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеДляАнализа.ОчередностьПогрузки КАК ОчередностьПогрузки,
		|	ВтДанныеДляАнализа.ДокументОснование КАК ДокументОснование,
		|	ВтДанныеДляАнализа.Состояние КАК Состояние,
		|	ВтДанныеДляАнализа.ИдЗадачи КАК ИдЗадачи
		|ПОМЕСТИТЬ ОтборДанныхДляАнализа
		|ИЗ
		|	ВтДанныеДляАнализа КАК ВтДанныеДляАнализа
		|ГДЕ
		|	(ВтДанныеДляАнализа.Состояние = ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.КВыполнению)
		|			ИЛИ ВтДанныеДляАнализа.Состояние = ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.Выполняется))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ОтборДанныхДляАнализа.ОчередностьПогрузки) КАК ОчередностьПогрузки,
		|	ОтборДанныхДляАнализа.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ МинимальнаяАктивнаяОчередьПогрузки
		|ИЗ
		|	ОтборДанныхДляАнализа КАК ОтборДанныхДляАнализа
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтборДанныхДляАнализа.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МинимальнаяАктивнаяОчередьПогрузки.ОчередностьПогрузки КАК ОчередностьПогрузки,
		|	МинимальнаяАктивнаяОчередьПогрузки.ДокументОснование КАК ДокументОснование,
		|	МИНИМУМ(ВтДанныеДляАнализа.НомерНаборки) КАК НомерНаборки
		|ПОМЕСТИТЬ МинимальнаяАктивнаяОчередьПогрузкиПоНаборке
		|ИЗ
		|	МинимальнаяАктивнаяОчередьПогрузки КАК МинимальнаяАктивнаяОчередьПогрузки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеДляАнализа КАК ВтДанныеДляАнализа
		|		ПО МинимальнаяАктивнаяОчередьПогрузки.ОчередностьПогрузки = ВтДанныеДляАнализа.ОчередностьПогрузки
		|			И МинимальнаяАктивнаяОчередьПогрузки.ДокументОснование = ВтДанныеДляАнализа.ДокументОснование
		|			И (ВтДанныеДляАнализа.Состояние = ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.КВыполнению)
		|				ИЛИ ВтДанныеДляАнализа.Состояние = ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.Выполняется))
		|
		|СГРУППИРОВАТЬ ПО
		|	МинимальнаяАктивнаяОчередьПогрузки.ОчередностьПогрузки,
		|	МинимальнаяАктивнаяОчередьПогрузки.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеДляАнализа.ДокументОснование КАК ДокументОснование,
		|	ВтДанныеДляАнализа.ТипЗадачи КАК ТипЗадачи,
		|	ВтДанныеДляАнализа.ИдЗадачи КАК ИдЗадачи,
		|	ВтДанныеДляАнализа.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
		|	ВтДанныеДляАнализа.ЯчейкаОтправительПредставление КАК ЯчейкаОтправительПредставление,
		|	ВтДанныеДляАнализа.ЯчейкаПолучательПредставление КАК ЯчейкаПолучательПредставление,
		|	ВтДанныеДляАнализа.Состояние КАК Состояние,
		|	ВтДанныеДляАнализа.ОчередностьПогрузки КАК ОчередностьПогрузки,
		|	ВтДанныеДляАнализа.Контрагент КАК Контрагент,
		|	ВтДанныеДляАнализа.ДатаНаборки КАК ДатаНаборки,
		|	ВтДанныеДляАнализа.НомерНаборки КАК НомерНаборки
		|ПОМЕСТИТЬ ТекущиеДанныеКОтгрузке
		|ИЗ
		|	МинимальнаяАктивнаяОчередьПогрузкиПоНаборке КАК МинимальнаяАктивнаяОчередьПогрузкиПоНаборке
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеДляАнализа КАК ВтДанныеДляАнализа
		|		ПО МинимальнаяАктивнаяОчередьПогрузкиПоНаборке.ОчередностьПогрузки = ВтДанныеДляАнализа.ОчередностьПогрузки
		|			И МинимальнаяАктивнаяОчередьПогрузкиПоНаборке.ДокументОснование = ВтДанныеДляАнализа.ДокументОснование
		//|			И МинимальнаяАктивнаяОчередьПогрузкиПоНаборке.НомерНаборки = ВтДанныеДляАнализа.НомерНаборки        Был отбор по № наборки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеДляАнализа.ДокументОснование КАК ДокументОснование,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВтДанныеДляАнализа.ИдЗадачи) КАК ЗадачВсего
		|ПОМЕСТИТЬ ВсегоЗадачКотгрузке
		|ИЗ
		|	ВтДанныеДляАнализа КАК ВтДанныеДляАнализа
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтДанныеДляАнализа.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтборДанныхДляАнализа.ДокументОснование КАК ДокументОснование,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтборДанныхДляАнализа.ИдЗадачи) КАК ЗадачКОбработке
		|ПОМЕСТИТЬ ЗадачиКобработке
		|ИЗ
		|	ОтборДанныхДляАнализа КАК ОтборДанныхДляАнализа
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтборДанныхДляАнализа.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.ИдЗадачи) КАК КоличествоТекущихЗадачКОбработке,
		|	ВложенныйЗапрос.ДокументОснование КАК Документ
		|ПОМЕСТИТЬ ТекущиеЗадачиКОбработке
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТекущиеДанныеКОтгрузке.ИдЗадачи КАК ИдЗадачи,
		|		ТекущиеДанныеКОтгрузке.ДокументОснование КАК ДокументОснование
		|	ИЗ
		|		ТекущиеДанныеКОтгрузке КАК ТекущиеДанныеКОтгрузке
		|	ГДЕ
		|		(ТекущиеДанныеКОтгрузке.Состояние = ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.КВыполнению)
		|				ИЛИ ТекущиеДанныеКОтгрузке.Состояние = ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.Выполняется))
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ТекущиеДанныеКОтгрузке.ДокументОснование,
		|		ТекущиеДанныеКОтгрузке.ИдЗадачи) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТекущиеДанныеКОтгрузке.НомерНаборки КАК НомерНаборки,
		|	ТекущиеДанныеКОтгрузке.ДатаНаборки КАК ДатаНаборки,
		|	ТекущиеДанныеКОтгрузке.Контрагент КАК Контрагент,
		|	ТекущиеДанныеКОтгрузке.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ ТекущииНаборки
		|ИЗ
		|	ТекущиеДанныеКОтгрузке КАК ТекущиеДанныеКОтгрузке
		|
		|СГРУППИРОВАТЬ ПО
		|	ТекущиеДанныеКОтгрузке.НомерНаборки,
		|	ТекущиеДанныеКОтгрузке.ДатаНаборки,
		|	ТекущиеДанныеКОтгрузке.Контрагент,
		|	ТекущиеДанныеКОтгрузке.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТекущиеДанныеКОтгрузке.ИдЗадачи) КАК КоличествоВсегоТекущихЗадач,
		|	ТекущиеДанныеКОтгрузке.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ ВсегоКоличествоТекущихЗадач
		|ИЗ
		|	ТекущиеДанныеКОтгрузке КАК ТекущиеДанныеКОтгрузке
		|
		|СГРУППИРОВАТЬ ПО
		|	ТекущиеДанныеКОтгрузке.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсегоЗадачКотгрузке.ДокументОснование КАК ДокументОснование,
		|	ЕСТЬNULL(ВсегоЗадачКотгрузке.ЗадачВсего, 0) КАК ЗадачВсего,
		|	ЕСТЬNULL(ЗадачиКобработке.ЗадачКОбработке, 0) КАК ЗадачКОбработке
		|ИЗ
		|	ВсегоЗадачКотгрузке КАК ВсегоЗадачКотгрузке
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗадачиКобработке КАК ЗадачиКобработке
		|		ПО ВсегоЗадачКотгрузке.ДокументОснование = ЗадачиКобработке.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВсегоКоличествоТекущихЗадач.КоличествоВсегоТекущихЗадач, 0) КАК КоличествоВсегоТекущихЗадач,
		|	ТекущииНаборки.ДокументОснование КАК ДокументОснование,
		|	ТекущииНаборки.Контрагент КАК Контрагент,
		|	ТекущииНаборки.ДатаНаборки КАК ДатаНаборки,
		|	ТекущииНаборки.НомерНаборки КАК НомерНаборки,
		|	ЕСТЬNULL(ЗадачиКОбработке.КоличествоТекущихЗадачКОбработке, 0) КАК КоличествоТекущихЗадачКОбработке
		|ИЗ
		|	ТекущииНаборки КАК ТекущииНаборки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВсегоКоличествоТекущихЗадач КАК ВсегоКоличествоТекущихЗадач
		|		ПО ТекущииНаборки.ДокументОснование = ВсегоКоличествоТекущихЗадач.ДокументОснование
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТекущиеЗадачиКОбработке КАК ЗадачиКОбработке
		|		ПО ТекущииНаборки.ДокументОснование = ЗадачиКОбработке.Документ
		|ИТОГИ
		|	МАКСИМУМ(КоличествоВсегоТекущихЗадач),
		|	МАКСИМУМ(КоличествоТекущихЗадачКОбработке)
		|ПО
		|	ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТекущиеДанныеКОтгрузке.ИдЗадачи КАК ИдЗадачи,
		|	ТекущиеДанныеКОтгрузке.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
		|	ТекущиеДанныеКОтгрузке.Состояние КАК Состояние
		|ИЗ
		|	ТекущиеДанныеКОтгрузке КАК ТекущиеДанныеКОтгрузке";

	Запрос.УстановитьПараметр("ТаблицаЗадачДляАнализа", ТаблицаЗадачДляАнализа);

	МассивРезультатов = Запрос.ВыполнитьПакет();

	ВыборкаШапкиВсего = МассивРезультатов[10].Выбрать();
	ВыборкаШапкиТекущихДанных = МассивРезультатов[11].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаДетальныхЗаписей = МассивРезультатов[12].Выбрать();
	Если МассивРезультатов[10].Пустой() тогда
		Элементы.НадписьВсегоПаллетДанные.Заголовок = 0;
		Элементы.ОсталосьДанные.Заголовок = 0;
	КонецЕсли;
	Пока ВыборкаШапкиВсего.Следующий() цикл
		Элементы.НадписьВсегоПаллетДанные.Заголовок = ВыборкаШапкиВсего.ЗадачВсего;
		Элементы.ОсталосьДанные.Заголовок = ВыборкаШапкиВсего.ЗадачКОбработке;
	КонецЦикла;
	Если МассивРезультатов[11].Пустой() тогда
		Элементы.КоличествоВсегоДанные.Заголовок = 0;
		Элементы.КоличествоОсталосьДанные.Заголовок = 0;
		Элементы.НадписьНаборкаДата.Заголовок = "";
		Элементы.НадписьНаборкаНомер.Заголовок = "";
		Элементы.НадписьТекущийКАДанные.Заголовок = "";
	КонецЕсли;
	Пока ВыборкаШапкиТекущихДанных.Следующий() цикл
		Элементы.КоличествоВсегоДанные.Заголовок = ВыборкаШапкиТекущихДанных.КоличествоВсегоТекущихЗадач;
		Элементы.КоличествоОсталосьДанные.Заголовок = ВыборкаШапкиТекущихДанных.КоличествоТекущихЗадачКОбработке;
		ВыборкаДетальныхЗаписейШапки = ВыборкаШапкиТекущихДанных.Выбрать();
		ЭтоПервый = Истина;
		Пока ВыборкаДетальныхЗаписейШапки.Следующий() цикл
			Если ЭтоПервый Тогда
				Элементы.НадписьНаборкаДата.Заголовок = Формат(ВыборкаДетальныхЗаписейШапки.ДатаНаборки, "ДФ=dd.MM.yyyy");
				Элементы.НадписьНаборкаНомер.Заголовок = УдалитьЛидирующиеНули(ВыборкаДетальныхЗаписейШапки.НомерНаборки);
				Элементы.НадписьТекущийКАДанные.Заголовок = ВыборкаДетальныхЗаписейШапки.Контрагент;
			иначе
				Элементы.НадписьНаборкаДата.Заголовок = Элементы.НадписьНаборкаДата.Заголовок
					+ "
					|" + Формат(ВыборкаДетальныхЗаписейШапки.ДатаНаборки, "ДФ=dd.MM.yyyy");
				Элементы.НадписьНаборкаНомер.Заголовок = Элементы.НадписьНаборкаНомер.Заголовок
					+ "
					|" + УдалитьЛидирующиеНули(ВыборкаДетальныхЗаписейШапки.НомерНаборки);
				Элементы.НадписьТекущийКАДанные.Заголовок = Элементы.НадписьТекущийКАДанные.Заголовок
					+ "
					|" + ВыборкаДетальныхЗаписейШапки.Контрагент;
			КонецЕсли;
			ЭтоПервый = Ложь;
		КонецЦикла;
	КонецЦикла;
	ТаблицаЗадачКТекущейОбработке.Очистить();
	МассивИдентификаторовЗадачКотбору = новый Массив;
	Пока ВыборкаДетальныхЗаписей.Следующий() цикл
		НоваяСтрока = ТаблицаЗадачКТекущейОбработке.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныхЗаписей, , "ИдЗадачи");
		НоваяСтрока.ИдЗадачи = новый УникальныйИдентификатор(ВыборкаДетальныхЗаписей.ИдЗадачи);
		МассивИдентификаторовЗадачКотбору.Добавить(НоваяСтрока.ИдЗадачи);
	КонецЦикла;
	ДанныеИдентификаторов.Параметры.УстановитьЗначениеПараметра("СписокИдентификаторовЗадач", МассивИдентификаторовЗадачКотбору);
	ДанныеИдентификаторов.Параметры.УстановитьЗначениеПараметра("ДокументОснование", Объект.Ссылка);
	ДанныеИдентификаторов.Параметры.УстановитьЗначениеПараметра("НеПоказыватьВыполненныеИОтмененные", НеПоказыватьВыполненныеИОтмененные);

КонецПроцедуры

&НаСервере
Функция УдалитьЛидирующиеНули(Строка)
	ДлинаСтроки = СтрДлина(Строка);
	КоличествоЛидирующихНулей = 0;
	Для n = 1 по ДлинаСтроки цикл
		СимволСтроки = Сред(Строка, n, 1);
		Если СимволСтроки <> "0" Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	КоличествоЛидирующихНулей = n - 1;;
	ИтоговаяСтрока = Прав(Строка, ДлинаСтроки - КоличествоЛидирующихНулей);
	Возврат ИтоговаяСтрока;
КонецФункции

&НаСервере
Функция ПолучитьТаблицуЗадачДляОбработки(Отказ)
//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ИтЗадачиНаТСД.ДокументОснование КАК ДокументОснование,
		|	ИтЗадачиНаТСД.ТипЗадачи КАК ТипЗадачи,
		|	ИтЗадачиНаТСД.ИдЗадачи КАК ИдЗадачи,
		|	ИтЗадачиНаТСД.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
		|	ИтЗадачиНаТСД.ЯчейкаОтправитель КАК ЯчейкаОтправитель,
		|	ИтЗадачиНаТСД.ЯчейкаОтправительПредставление КАК ЯчейкаОтправительПредставление,
		|	ИтЗадачиНаТСД.ЯчейкаПолучатель КАК ЯчейкаПолучатель,
		|	ИтЗадачиНаТСД.ЯчейкаПолучательПредставление КАК ЯчейкаПолучательПредставление,
		|	ИтЗадачиНаТСД.ДополнительныеДанные КАК ДополнительныеДанные,
		|	ИтЗадачиНаТСД.Состояние КАК Состояние,
		|	ИтЗадачиНаТСД.ДанныеДокументаТСД КАК ДанныеДокументаТСД
		|ИЗ
		|	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
		|ГДЕ
		|	ИтЗадачиНаТСД.ДокументОснование = &ДокументОснование";

	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);

	ТаблицаЗадач = Запрос.Выполнить().Выгрузить();
	ТаблицаЗадач.Колонки.Добавить("ОчередностьПогрузки", новый ОписаниеТипов("число", , , новый КвалификаторыЧисла(3, 0)));
	ТаблицаЗадач.Колонки.Добавить("Контрагент", новый ОписаниеТипов("Строка", , , новый КвалификаторыСтроки(150)));
	ТаблицаЗадач.Колонки.Добавить("ДатаНаборки", новый ОписаниеТипов("Дата", , , новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаЗадач.Колонки.Добавить("НомерНаборки", новый ОписаниеТипов("Строка", , , новый КвалификаторыСтроки(15)));

	Для Каждого стр из ТаблицаЗадач цикл
		СтруктураДополнительныхДанныхЗадачи = стр.ДополнительныеДанные.Получить();
		Если ТипЗнч(СтруктураДополнительныхДанныхЗадачи) <> Тип("Структура") Тогда
			Отказ = Истина;
			Сообщить("не ферный формат данных задач ");
			Возврат Неопределено;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(стр, СтруктураДополнительныхДанныхЗадачи);
	КонецЦикла;
	СлужебныеФункцииИПроцедурыКлиентСервер.ПреобразоватьТаблицуСИдентификаторамиДляЧтенияЗапроса(ТаблицаЗадач);

	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Возврат ТаблицаЗадач;
КонецФункции

&НаКлиенте
Процедура ОбработчкаПолученияДанныхШтрихКода(Параметр)
/// Временный гвозь позволяющий завершить документ в 1 сканирование. 
	Если СканируемыйШкЭтоГуидДокумента(Параметр, Объект.Ссылка) Тогда
		Если ПометитьВсеЗадачиКакВыполненные() Тогда
			ЭтаФорма.Закрыть();
		КонецЕсли;
		Возврат;
	КонецЕсли;

	СтрокиКОбработке = ТаблицаЗадачКТекущейОбработке.НайтиСтроки(новый Структура("ИдентификаторУпаковки", Параметр));
	Если СтрокиКОбработке.Количество() = 0 Тогда
		Сообщить("Данные идентификатор не числиться в активной части задач");
		Возврат
	КонецЕсли;
	Для Каждого стр из СтрокиКОбработке цикл
		Если не СосотояниеЗадачиКВыполнению(стр.Состояние) Тогда
			Сообщить("Идентификатор числиться в активной части задач, но уже отгружен");
			Возврат
		КонецЕсли;
	КонецЦикла;
	ОткрытьФорму("Документ.итОтгрузка.Форма.ФормаЗадачиДокумента", новый Структура("Ключ,ИдЗадачи,ОткрытиеСчитыванием", Объект.Ссылка, СтрокиКОбработке[0].ИдЗадачи, Истина), ЭтаФорма);
	ТригерПриемаСканераШтрихКода = Ложь;
КонецПроцедуры


// Описание
// Функция завершает все задачи отгрузки
// состояние задач Выполнена
// Параметры:
// Возвращаемое значение:
// 	Булево - Ответ сервера ,о записи изменений
&НаСервере
Функция ПометитьВсеЗадачиКакВыполненные()
	Отказ = Ложь;
	УстановитьИдЗадачиИнициализации(Отказ);
	Если Отказ Тогда
		Сообщить("Ошибка инициализации");
		Возврат Ложь;
	КонецЕсли;
	СтруктураДанных = ПолучитьДанныеДляИнициализации();
	СтруктураДанных.Вставить("ФиксацияЗадачи", Истина);
	СтруктураИнициализации = СлужебныеФункцииИПроцедурыКлиентСервер.СформироватьСтруктуруИнициализацииДанных(СтруктураДанных, "Документ", Перечисления.итWMSСостоянияЗадачТСД.Выполнена);
	СтруктураИнициализации.Вставить("ТипОбработкиДанных", "ЗавернитьВ1Сканирование");
	СтруктураИнициализации = ОбработчикиЗапросаСервера.ЗапроситьДанные(СтруктураИнициализации, "Shipment");
	Если СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(СтруктураИнициализации, "Инициализация") тогда
		Сообщить("Ошибка инициализации на сервере");
		Возврат Ложь;
	КонецЕсли;
	МодульРаспределенияДанных.ОбработчикВходящихДанных(СтруктураИнициализации);
	Возврат СтруктураИнициализации.Инициализация;
КонецФункции

&НаСервереБезКонтекста
Функция СканируемыйШкЭтоГуидДокумента(Параметр, Ссылка)
	Если СокрЛП(Параметр) = СокрЛП(Ссылка.ГУИД) Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаСервере
Функция СосотояниеЗадачиКВыполнению(Состояние)
	Если Состояние = Перечисления.итWMSСостоянияЗадачТСД.КВыполнению
			или Состояние = Перечисления.итWMSСостоянияЗадачТСД.Выполняется Тогда
		Возврат Истина;
	иначе
		Возврат Ложь
	КонецЕсли;
КонецФункции

&НаСервере
Функция ФиксацияВсехЗадачДокумента()
	Отказ = Ложь;
	УстановитьИдЗадачиИнициализации(Отказ);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	СтруктураДанных = ПолучитьДанныеДляИнициализации();
	СтруктураДанных.Вставить("ФиксацияЗадачи", Истина);
	СтруктураИнициализации = СлужебныеФункцииИПроцедурыКлиентСервер.СформироватьСтруктуруИнициализацииДанных(СтруктураДанных, "Документ", Перечисления.итWMSСостоянияЗадачТСД.Выполнена);
	СтруктураИнициализации.Вставить("ТипОбработкиДанных", "ФиксацияЗадачДокумента");
	СтруктураИнициализации = ОбработчикиЗапросаСервера.ЗапроситьДанные(СтруктураИнициализации, "Shipment");
	Если СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(СтруктураИнициализации, "Инициализация") тогда
		Возврат Ложь;
	КонецЕсли;
	МодульРаспределенияДанных.ОбработчикВходящихДанных(СтруктураИнициализации);
	Возврат СтруктураИнициализации.Инициализация;
КонецФункции

&НаСервере
Процедура УстановитьИдЗадачиИнициализации(Отказ)
//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИтЗадачиНаТСД.ИдЗадачи КАК ИдЗадачи
		|ИЗ
		|	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
		|ГДЕ
		|	ИтЗадачиНаТСД.ДокументОснование = &ДокументОснование
		|	И ИтЗадачиНаТСД.ТипЗадачи = &ТипЗадачи";

	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТипЗадачи", Объект.ТипЗадачи);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Отказ = Истина;
		Сообщить("Нет данных задач для обработки");
	КонецЕсли;
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ИдЗадачиИнициализации = ВыборкаДетальныеЗаписи.ИдЗадачи;
	КонецЦикла;

	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеДляИнициализации()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИтЗадачиНаТСД.ИдЗадачи КАК ИдЗадачи,
		|	ИтЗадачиНаТСД.ТипЗадачи КАК ТипЗадачи,
		|	ИтЗадачиНаТСД.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
		|ГДЕ
		|	ИтЗадачиНаТСД.ИдЗадачи = &ИдЗадачи";

	Запрос.УстановитьПараметр("ИдЗадачи", ИдЗадачиИнициализации);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	СтруктураДанных = новый Структура;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		для Каждого Колонка из РезультатЗапроса.Колонки цикл
			СтруктураДанных.Вставить(Колонка.Имя, ВыборкаДетальныеЗаписи[Колонка.Имя]);
		КонецЦикла;
	КонецЦикла;
	Возврат СтруктураДанных;
КонецФункции

&НаСервере
Процедура СписокВыбораПричнОтмены()
	МассивСпискаВыбора = ПолучитьСписокВыбораПричнОтмены();
	для Каждого стр из МассивСпискаВыбора цикл
		Элементы.ПричинаОтменыЗадачи.СписокВыбора.Добавить(стр);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокВыбораПричнОтмены()
//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	итWMS_ПричиныОтменыЗадач.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.итWMS_ПричиныОтменыЗадач КАК итWMS_ПричиныОтменыЗадач";

	РезультатЗапроса = Запрос.Выполнить().Выгрузить();

	Возврат РезультатЗапроса.ВыгрузитьКолонку("Ссылка");
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
КонецФункции

&НаСервере
Процедура АварийноеЗавершениеЗадачи(Отказ)
//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ИтЗадачиНаТСД.ИдЗадачи КАК ИдЗадачи
		|ИЗ
		|	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
		|ГДЕ
		|	ИтЗадачиНаТСД.Состояние = ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.КВыполнению)
		|	И ИтЗадачиНаТСД.ДокументОснование = &ДокументОснование
		|	И ИтЗадачиНаТСД.ИдЗадачи В (&ИдЗадач)";

	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	Запрос.УстановитьПараметр("ИдЗадач", ТаблицаЗадачКТекущейОбработке.Выгрузить().ВыгрузитьКолонку("ИдЗадачи"));

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ИдЗадачиИнициализации = ВыборкаДетальныеЗаписи.ИдЗадачи;
		Если не ИнициализацияЗадачиОтменаНаСервере() Тогда
			Отказ = Истина;
			Сообщить("Ошибка отмены задач, перезайдите в документ и попробуйте заного");
			Возврат
		КонецЕсли;
	КонецЦикла;

	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
КонецПроцедуры

&НаСервере
Функция ИнициализацияЗадачиОтменаНаСервере()
	СтруктураДанных = ПолучитьДанныеДляИнициализации();
	СтруктураДанных.Вставить("ФиксацияЗадачи", Ложь);
	СтруктураИнициализации = СлужебныеФункцииИПроцедурыКлиентСервер.СформироватьСтруктуруИнициализацииДанных(СтруктураДанных, "Задача", Перечисления.итWMSСостоянияЗадачТСД.Отменена);
	//СтруктураИнициализации.Вставить("ТипОбработкиДанных", "ВнесениеИзмененийВДокумент");
	СтруктураИнициализации.Вставить("ТипОбработкиДанных","ЗаписатьДанныеТСД");
	СтруктураИнициализации.Вставить("ПричинаОтменыЗадачи", ПричинаОтменыЗадачи);
	СтруктураИнициализации = ОбработчикиЗапросаСервера.ЗапроситьДанные(СтруктураИнициализации, "Shipment");
	Если СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(СтруктураИнициализации, "Инициализация") тогда
		Возврат Ложь;
	КонецЕсли;
	МодульРаспределенияДанных.ОбработчикВходящихДанных(СтруктураИнициализации);
	Возврат СтруктураИнициализации.Инициализация;

	//Возврат ОбработчикДанныхОбщиеФункцииИПроцедуры.ИнициализацияЗадачиНаСервере(СтруктураДанных,"Задача",Перечисления.итWMSСостоянияЗадачТСД);
КонецФункции

#КонецОбласти
