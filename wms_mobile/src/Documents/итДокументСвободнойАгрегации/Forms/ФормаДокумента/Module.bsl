
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбщийМодульКлиентскойЧасти.ПереопределенияТригераПолучениеШтрихКодаПриОткрытии(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	ОбщийМодульКлиентскойЧасти.ПереопределенияТригераПолучениеШтрихКодаПриЗакрытии(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ДанныеАгрегации.Параметры.УстановитьЗначениеПараметра("Ссылка",Объект.Ссылка);
	Если Объект.ЯчейкаАгрегации<>СлужебныеФункцииИПроцедурыКлиентСервер.ПустойУникальныйИдентификатор() Тогда 
		Элементы.ЯчейкаАгрегацииПредставление.Заголовок=Объект.ЯчейкаАгрегацииьПредставление;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия="ОбработчикШтрихКода"  и ТригерПриемаСканераШтрихКода тогда
		Если Параметр=404 и Источник="ОшибкаЧтения" тогда
			ОбщийМодульКлиентскойЧасти.СообщитьЧерезФорму("Штрих код некорректен");
			Возврат
		КонецЕсли;
		ОбработчикШтрихКода(Параметр);
	КонецЕсли;
	
	
КонецПроцедуры
&НаКлиенте
Процедура ОбработчикШтрихКода(ШтрихКод)
	Если Найти(ШтрихКод,"#&@&%")>0 Тогда 
	Объект.Комментарий=ШтрихКод;
	ТригерПриемаСканераШтрихКодаДо=ТригерПриемаСканераШтрихКода;
	ЭтаФорма.Записать();
	ТригерПриемаСканераШтрихКода=ТригерПриемаСканераШтрихКодаДо;
	Иначе 
	НайтиSSCC(ШтрихКод);
	КонецЕсли;
	КонецПроцедуры
&НаКлиенте
Процедура НайтиSSCC(ШтрихКод)
	Если  НайтиSSCCНаСервере(ШтрихКод) тогда
		ОткрытьФорму("Документ.итДокументСвободнойАгрегации.Форма.ФормаSSCC",новый Структура("ОбъектДанных,SSCC",Объект.Ссылка,ШтрихКод),ЭтаФорма);
		ТригерПриемаСканераШтрихКода=Ложь;
	иначе
		Сообщить("SSCC не числится как зарегестрированный в системе");	
	КонецЕсли;
КонецПроцедуры
&НаСервере
Функция НайтиSSCCНаСервере(ШтрихКод)
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итДокументСвободнойАгрегацииДанныеАгрегации.SSCC КАК SSCC
		|ИЗ
		|	Документ.итДокументСвободнойАгрегации.ДанныеАгрегации КАК итДокументСвободнойАгрегацииДанныеАгрегации
		|ГДЕ
		|	итДокументСвободнойАгрегацииДанныеАгрегации.SSCC = &SSCC
		|	И итДокументСвободнойАгрегацииДанныеАгрегации.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("SSCC", ШтрихКод);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции

&НаКлиенте
Процедура ПрисвоитьНовыйSSCC(Команда)
	ОткрытьФорму("Документ.итДокументСвободнойАгрегации.Форма.СчитываниеВнешнегоSSCC",новый Структура("ОбъектДанных",Объект.Ссылка),ЭтаФорма);
	ТригерПриемаСканераШтрихКода=Ложь;
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	ЭтаФорма.Закрыть();
КонецПроцедуры

&НаСервере
Процедура ОтказатьсяОтДокументаНаСервере()
ОбъектДанных=Объект.Ссылка.ПолучитьОбъект();
ОбъектДанных.Удалить();
КонецПроцедуры
&НаКлиенте
Процедура ОтказатьсяОтДокументаОповещение(Результат,Параметры)Экспорт
	Если Результат=КодВозвратаДиалога.Нет тогда
		Возврат
	КонецЕсли;
	ОтказатьсяОтДокументаНаСервере();
	ОбщийМодульКлиентскойЧасти.ОповещениеДинамическихСписковОткрытыхФорм();
	ЭтаФорма.Закрыть();
	КонецПроцедуры
&НаКлиенте
Процедура ОтказатьсяОтДокумента(Команда)
	Оповещение = новый ОписаниеОповещения("ОтказатьсяОтДокументаОповещение",ЭтаФорма);
	ПоказатьВопрос(Оповещение,"Вы точно хотите удалить данные документа",РежимДиалогаВопрос.ДаНет);


КонецПроцедуры

&НаСервере
Функция ЗавершитьДокументНаСервере()
	СтруктураДанных=новый Структура;
	СлужебныеФункцииИПроцедурыКлиентСервер.СформироватьСтруктуруДанныхОПользователе(СтруктураДанных);
	СтруктураДанных.Вставить("КлючОперации","КонтрольнаяАгригацияМарок");
	//ОбъектДанных=Объект.Ссылка.ПолучитьОбъект();
	СтруктураДанных.Вставить("Данные",ПолучитьДанныеДокумента());
	СтруктураДанных.Вставить("Документ",Объект.Ссылка.УникальныйИдентификатор());
	СтруктураДанных.Вставить("Комментарий",Объект.Комментарий);
	СтруктураДанных.Вставить("ЯчейкаАгрегации",Объект.ЯчейкаАгрегации);
	СтруктураДанных=ОбработчикиЗапросаСервера.ЗапроситьДанные(СтруктураДанных,"ControlAgrigationMark");
	Если 	СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(СтруктураДанных,"ПодтверждениеЗаписи") тогда
		Возврат  Ложь;
	КонецЕсли;
	Возврат СтруктураДанных.ПодтверждениеЗаписи;	
	
КонецФункции
&НаСервере
Функция ПолучитьДанныеДокумента()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итДокументСвободнойАгрегацииДанныеАгрегации.SSCC КАК SSCC,
		|	итДокументСвободнойАгрегацииДанныеАгрегации.GTIN КАК GTIN,
		|	итДокументСвободнойАгрегацииДанныеАгрегации.Интервал КАК Интервал,
		|	итДокументСвободнойАгрегацииДанныеАгрегации.Марка КАК Марка,
		|	итДокументСвободнойАгрегацииДанныеАгрегации.Номенклатура КАК Номенклатура,
		|	итДокументСвободнойАгрегацииДанныеАгрегации.ДатаРозлива КАК ДатаРозлива
		|ИЗ
		|	Документ.итДокументСвободнойАгрегации.ДанныеАгрегации КАК итДокументСвободнойАгрегацииДанныеАгрегации
		|ГДЕ
		|	итДокументСвободнойАгрегацииДанныеАгрегации.Ссылка = &Ссылка
		|	И итДокументСвободнойАгрегацииДанныеАгрегации.Марка <> """"
		|
		|СГРУППИРОВАТЬ ПО
		|	итДокументСвободнойАгрегацииДанныеАгрегации.SSCC,
		|	итДокументСвободнойАгрегацииДанныеАгрегации.GTIN,
		|	итДокументСвободнойАгрегацииДанныеАгрегации.Интервал,
		|	итДокументСвободнойАгрегацииДанныеАгрегации.Марка,
		|	итДокументСвободнойАгрегацииДанныеАгрегации.Номенклатура,
		|	итДокументСвободнойАгрегацииДанныеАгрегации.ДатаРозлива";
	
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		Возврат РезультатЗапроса;	
	КонецФункции
&НаКлиенте
Процедура ЗавершитьДокументОповещение(Результат,Параметры)Экспорт
	Если Результат=КодВозвратаДиалога.Нет тогда
		Возврат
	КонецЕсли;	
	Если ЗавершитьДокументНаСервере()тогда
		ОтказатьсяОтДокументаНаСервере();
		ОбщийМодульКлиентскойЧасти.ОповещениеДинамическихСписковОткрытыхФорм();
		ЭтаФорма.Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьДокумент(Команда)
	Если Элементы.ЯчейкаАгрегацииПредставление="" Тогда 
		Сообщить("Заполните зону агрегации");
		Возврат
	КонецЕсли;	
	Оповещение = новый ОписаниеОповещения("ЗавершитьДокументОповещение",ЭтаФорма);
	ПоказатьВопрос(Оповещение,"Вы точно хотите завершить агрегирование",РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура ПрисвоитьЗонуАгрегацииНажатие(Элемент)
	СтандартнаяОбработка=Ложь;
	ОткрытьФорму("ОбщаяФорма.СканированиеЯчейки",Новый Структура("ПолеПолучательИдентификатор,ПолеПолучательПредставление","ЯчейкаАгрегации","ЯчейкаАгрегацииьПредставление"),ЭтаФорма);
	ТригерПриемаСканераШтрихКода=Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы= "ОбщаяФорма.СканированиеЯчейки" тогда
		Если не ЗначениеЗаполнено(ВыбранноеЗначение.Ячейка) тогда
			ЗаписьИзмененийНаСервере(ВыбранноеЗначение);
			Элементы.ЯчейкаАгрегацииПредставление.Заголовок="Присвоить зону агрегации";
		иначе
			ЗаписьИзмененийНаСервере(ВыбранноеЗначение);
            Элементы.ЯчейкаАгрегацииПредставление.Заголовок=ВыбранноеЗначение.ЯчейкаПредставление;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры
&НаСервере
Процедура ЗаписьИзмененийНаСервере(ВыбранноеЗначение)
ОбъектИзменения=Объект.Ссылка.ПолучитьОбъект();
Если не ЗначениеЗаполнено(ВыбранноеЗначение.Ячейка) тогда
	ОбъектИзменения.ЯчейкаАгрегации=СлужебныеФункцииИПроцедурыКлиентСервер.ПустойУникальныйИдентификатор();
	ОбъектИзменения.ЯчейкаАгрегацииьПредставление="";	
иначе	
	ОбъектИзменения.ЯчейкаАгрегации=ВыбранноеЗначение.Ячейка;
	ОбъектИзменения.ЯчейкаАгрегацииьПредставление=ВыбранноеЗначение.ЯчейкаПредставление;	
КонецЕсли;
ОбъектИзменения.Записать();
ЗначениеВРеквизитФормы(ОбъектИзменения,"Объект");
КонецПроцедуры


&НаКлиенте
Процедура МаксимальноеКоличествоВКоробеПриИзменении(Элемент)
    МаксимальноеКоличествоВКоробе=Объект.МаксимальноеКоличествоВКоробе;
	ТригерПриемаСканераШтрихКодаДо=ТригерПриемаСканераШтрихКода;
    ОбновитьДанныеФормы();
	ЭтаФорма.Записать();
	Объект.МаксимальноеКоличествоВКоробе=МаксимальноеКоличествоВКоробе;
	ТригерПриемаСканераШтрихКода=ТригерПриемаСканераШтрихКодаДо;
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеФормы()
	ОбъектДанных=Объект.Ссылка.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(ОбъектДанных,"Объект");
	Если Объект.ЯчейкаАгрегации<>СлужебныеФункцииИПроцедурыКлиентСервер.ПустойУникальныйИдентификатор() Тогда 
		Элементы.ЯчейкаАгрегацииПредставление.Заголовок=Объект.ЯчейкаАгрегацииьПредставление;
	КонецЕсли;	
	КонецПроцедуры


&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ТригерПриемаСканераШтрихКодаДо=ТригерПриемаСканераШтрихКода;
	Комментарий=Объект.Комментарий;
	ОбновитьДанныеФормы();
	Объект.Комментарий=Комментарий;
	ЭтаФорма.Записать();
	ТригерПриемаСканераШтрихКода=ТригерПриемаСканераШтрихКодаДо;
КонецПроцедуры

