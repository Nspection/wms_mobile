#Область ОбработчикиСобытий
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОбработчикиЗапросаСервера.ОбновитьСписокЗадачКРаспределению();
	ИнициализацияКартинок();
    СоздатьДеревоДанных();	
	АвтоОбновление=Ложь;
КонецПроцедуры
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбщийМодульКлиентскойЧасти.ПереопределенияТригераПолучениеШтрихКодаПриОткрытии(ЭтаФорма);	
	ПодключитьОбработчикОжидания("ОпросСервераБазыДанных",35,Истина);  
	ПодключитьОбработчикОжидания("ОбновлениеДанныхКлиентаПоТаймеру",30,Ложь);
	ВидимостьДоступностьКлиент();
КонецПроцедуры
&НаКлиенте
Процедура ДеревоЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Строка=ДеревоЗадач.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Строка.ИдЗадачи <> "" Тогда
		КлючЗаписи=ПоискИСозданиеКлючаЗаписиПоИдЗадачи(Строка.ИдЗадачи);
		Если КлючЗаписи=Неопределено Тогда 
			Сообщить("задача не найдена");
			Возврат
		КонецЕсли;	
		ОткрытьФорму("Обработка.ДиспетчерЗадач.Форма.ФормаВыбораДействий",новый Структура("КлючЗаписи",КлючЗаписи),ЭтаФорма);
		ТригерПриемаСканераШтрихКода=Ложь;
		Возврат
	КонецЕсли;
	Если Строка.ДокументОснование <> "" Тогда
		ИдЗадачиДляПоиска=ПолучитьДанныеИдЗадачиПоДокументу(Строка.ДокументОснование);
		Если ИдЗадачиДляПоиска=Неопределено Тогда 
			Сообщить("задача не найдена");
			Возврат
		КонецЕсли;
		КлючЗаписи=ПоискИСозданиеКлючаЗаписиПоИдЗадачи(ИдЗадачиДляПоиска);
		Если КлючЗаписи=Неопределено Тогда 
			Сообщить("задача не найдена");
			Возврат
		КонецЕсли;	
		ОткрытьФорму("Обработка.ДиспетчерЗадач.Форма.ФормаВыбораДействий",новый Структура("КлючЗаписи,ВыборДокумента",КлючЗаписи,Истина),ЭтаФорма);
		ТригерПриемаСканераШтрихКода=Ложь;
		Возврат
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	ОбщийМодульКлиентскойЧасти.ПереопределенияТригераПолучениеШтрихКодаПриЗакрытии(ЭтаФорма);	
КонецПроцедуры
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ИсточникВыбора)=Тип("УправляемаяФорма") Тогда 
		Если ИсточникВыбора.ИмяФормы="Обработка.ДиспетчерЗадач.Форма.ФормаПодстрокиПоиска" Тогда 
			ПодстрокаПоиска=ВыбранноеЗначение.Строка;
			ЭлементПоиска=ВыбранноеЗначение.ЭлементПоиска;
			ОбновлениеДереваЗадач();
		КонецЕсли;
	КонецЕсли;	
	КонецПроцедуры
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия="ОбновлениеДанныхДинамическихСписков" и Источник=ОбщийМодульКлиентскойЧасти тогда
		//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(,"+#ЗадачиКРаспределениюДерево ОбновлениеДанныхДинамическихСписков");
		ОбновлениеДереваЗадач();
		//СлужебныеФункцииИПроцедурыКлиентСервер.ДобавитьВЛог(,"-#ЗадачиКРаспределениюДерево ОбновлениеДанныхДинамическихСписков");
	КонецЕсли;
	Если ИмяСобытия="ОбработчикШтрихКода"  и ТригерПриемаСканераШтрихКода тогда
		Если Параметр=404 и Источник="ОшибкаЧтения" тогда
			ОбщийМодульКлиентскойЧасти.СообщитьЧерезФорму("Штрих код некорректен");
			Возврат
		КонецЕсли;	
		ПолучитьИнформациюОЗадачахПоШтрихКоду(Параметр)
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд
&НаКлиенте
Процедура Обновить(Команда)
	ОбработчикиЗапросаСервера.ОбновитьСписокЗадачКРаспределению();
	ОбновлениеДереваЗадач();
КонецПроцедуры
&НаКлиенте
Процедура НайтиДанные(Команда)
	ОткрытьФорму("Обработка.ДиспетчерЗадач.Форма.ФормаПодстрокиПоиска",,ЭтаФорма);
	ТригерПриемаСканераШтрихКода=Ложь;
КонецПроцедуры
&НаКлиенте
Процедура ОтменаПоиска(Команда)
	ПодстрокаПоиска="";
	ЭлементПоиска="";
	ОбновлениеДереваЗадач();
КонецПроцедуры
&НаКлиенте
Процедура АвтоОбновлениеВкл(Команда)
	АвтоОбновление=Истина;
	ВидимостьДоступностьКлиент();
КонецПроцедуры
&НаКлиенте
Процедура АвтоОбновлениеВыкл(Команда)
АвтоОбновление=Ложь;
ВидимостьДоступностьКлиент();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаКлиенте
Процедура ВидимостьДоступностьКлиент()
	Если АвтоОбновление Тогда 
		Элементы.ДеревоЗадачАвтоОбновлениеВкл.Видимость = Ложь;
		Элементы.ДеревоЗадачАвтоОбновлениеВыкл.Видимость=Истина;
	иначе
		Элементы.ДеревоЗадачАвтоОбновлениеВкл.Видимость = Истина;
		Элементы.ДеревоЗадачАвтоОбновлениеВыкл.Видимость=Ложь;
	КонецЕсли;	
	КонецПроцедуры
&НаСервере
Процедура ИнициализацияКартинок()
	СтруктураАдресаКартинок= новый Структура;
	СтруктураАдресаКартинок.Вставить("РазмещениеКартинка",ПоместитьВоВременноеХранилище(новый Картинка(БиблиотекаКартинок.РазмещениеКартинка.ПолучитьДвоичныеДанные()),ЭтаФорма.УникальныйИдентификатор));
	СтруктураАдресаКартинок.Вставить("ПроверкаКартинка",ПоместитьВоВременноеХранилище(новый Картинка(БиблиотекаКартинок.ПроверкаКартинка.ПолучитьДвоичныеДанные()),ЭтаФорма.УникальныйИдентификатор));
	СтруктураАдресаКартинок.Вставить("ПриемкаКартинка",ПоместитьВоВременноеХранилище(новый Картинка(БиблиотекаКартинок.ПриемкаКартинка.ПолучитьДвоичныеДанные()),ЭтаФорма.УникальныйИдентификатор));
	СтруктураАдресаКартинок.Вставить("ПеремещениеКартинка",ПоместитьВоВременноеХранилище(новый Картинка(БиблиотекаКартинок.ПеремещениеКартинка.ПолучитьДвоичныеДанные()),ЭтаФорма.УникальныйИдентификатор));
	СтруктураАдресаКартинок.Вставить("НаборкаКартинка",ПоместитьВоВременноеХранилище(новый Картинка(БиблиотекаКартинок.НаборкаКартинка.ПолучитьДвоичныеДанные()),ЭтаФорма.УникальныйИдентификатор));
	СтруктураАдресаКартинок.Вставить("КОАКартинка",ПоместитьВоВременноеХранилище(новый Картинка(БиблиотекаКартинок.КОАКартинка.ПолучитьДвоичныеДанные()),ЭтаФорма.УникальныйИдентификатор));
	СтруктураАдресаКартинок.Вставить("ИнвентаризацияКартинка",ПоместитьВоВременноеХранилище(новый Картинка(БиблиотекаКартинок.ИнвентаризацияКартинка.ПолучитьДвоичныеДанные()),ЭтаФорма.УникальныйИдентификатор));
	АдресБуфераКартинок = ПоместитьВоВременноеХранилище(СтруктураАдресаКартинок,ЭтаФорма.УникальныйИдентификатор);
	КонецПроцедуры
&НаСервере
Процедура СоздатьДеревоДанных()
	СтруктураАдресаКартинок=ПолучитьИзВременногоХранилища(АдресБуфераКартинок);

		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итЗадачиКРаспределению.ДокументОснование КАК ДокументОснование,
	|	итЗадачиКРаспределению.ТипЗадачи КАК ТипЗадачи,
	|	итЗадачиКРаспределению.ИдЗадачи КАК ИдЗадачи,
	|	итЗадачиКРаспределению.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	итЗадачиКРаспределению.ПредставлениеЗадачи КАК ПредставлениеЗадачи,
	|	итЗадачиКРаспределению.Состояние КАК Состояние,
	|	итЗадачиКРаспределению.ДополнительныеДанные КАК ДополнительныеДанные,
	|	итЗадачиКРаспределению.ДокументОснованиеПредставление КАК ДокументОснованиеПредставление
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	РегистрСведений.итЗадачиКРаспределению КАК итЗадачиКРаспределению
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.ДокументОснование КАК ДокументОснование,
	|	ВТ.ТипЗадачи КАК ТипЗадачи,
	|	ВТ.ИдЗадачи КАК ИдЗадачи,
	|	ВТ.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ВТ.ПредставлениеЗадачи КАК ПредставлениеЗадачи,
	|	ВТ.Состояние КАК Состояние,
	|	ВТ.ДополнительныеДанные КАК ДополнительныеДанные,
	|	ВТ.ДокументОснованиеПредставление КАК ДокументОснованиеПредставление
	|ИЗ
	|	ВТ КАК ВТ
	|ИТОГИ
	|	МАКСИМУМ(ПредставлениеЗадачи),
	|	МАКСИМУМ(ДокументОснованиеПредставление)
	|ПО
	|	ТипЗадачи,
	|	ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.ДокументОснование КАК ДокументОснование,
	|	ВТ.ТипЗадачи КАК ТипЗадачи,
	|	ВТ.ИдЗадачи КАК ИдЗадачи,
	|	ВТ.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ВТ.ПредставлениеЗадачи КАК ПредставлениеЗадачи,
	|	ВТ.Состояние КАК Состояние,
	|	ВТ.ДополнительныеДанные КАК ДополнительныеДанные,
	|	ВТ.ДокументОснованиеПредставление КАК ДокументОснованиеПредставление
	|ИЗ
	|	ВТ КАК ВТ";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ВыборкаЗаполненияДанныхАнализа=МассивРезультатов[2].Выбрать();
	ТаблицаАнализаДерева.Очистить();
	Пока ВыборкаЗаполненияДанныхАнализа.Следующий() Цикл
		НоваяСтрока=ТаблицаАнализаДерева.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаЗаполненияДанныхАнализа);
		НоваяСтрока.ИдЗадачи=Строка(ВыборкаЗаполненияДанныхАнализа.ИдЗадачи);
	КонецЦикла;
    ТаблицаОбновления=МассивРезультатов[2].Выгрузить();
	ВыборкаТипЗадачи = МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДеревоЗадач.ПолучитьЭлементы().Очистить();
	Пока ВыборкаТипЗадачи.Следующий() Цикл
		ЭлементыТипаЗадач=ДеревоЗадач.ПолучитьЭлементы();
		НоваяСтрокаТипаЗадач=ЭлементыТипаЗадач.Добавить();
		НоваяСтрокаТипаЗадач.ПредставлениеЗадачи=Строка(ВыборкаТипЗадачи.ТипЗадачи);
		НоваяСтрокаТипаЗадач.ТипЗадачи=ВыборкаТипЗадачи.ТипЗадачи;
		ЗаполнениеКартинки(СтруктураАдресаКартинок,НоваяСтрокаТипаЗадач,ВыборкаТипЗадачи);
		ВыборкаДокументОснование = ВыборкаТипЗадачи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ЭлементыДобавленияДокументаОснования=НоваяСтрокаТипаЗадач.ПолучитьЭлементы();
		Если ВыборкаТипЗадачи.ТипЗадачи =  Перечисления.итWMSТипыЗадачТСД.Наборка Тогда 
			НаборкаЗаполнениеДанныхДерева( ВыборкаДокументОснование,  ЭлементыДобавленияДокументаОснования, ТаблицаОбновления)
		иначе
			ТиповоеЗаполнениеДанныхДерева(ВыборкаДокументОснование, ЭлементыДобавленияДокументаОснования);
		КонецЕсли;

	КонецЦикла;
		//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецПроцедуры

&НаСервере
Процедура НаборкаЗаполнениеДанныхДерева(Знач ВыборкаДокументОснование, Знач ЭлементыДобавленияДокументаОснования,Знач ТаблицаОбновления,РежимОбновления=Ложь)
	СтруктураАдресаКартинок=ПолучитьИзВременногоХранилища(АдресБуфераКартинок);
	Пока ВыборкаДокументОснование.Следующий() Цикл
		ДатаОтгрузки=НайтиДатуОтгрузкиНаборки(ВыборкаДокументОснование,ТаблицаОбновления);
		НоваяСтрокаОснования=ПолучитьСтрокуДереваНаборкаДокументОснование(ВыборкаДокументОснование,РежимОбновления,ТаблицаОбновления,ЭлементыДобавленияДокументаОснования,ДатаОтгрузки);
		НоваяСтрокаОснования.ПредставлениеЗадачи=ВыборкаДокументОснование.ДокументОснованиеПредставление;
		НоваяСтрокаОснования.ТипЗадачи=ВыборкаДокументОснование.ТипЗадачи;
		НоваяСтрокаОснования.ДокументОснование=ВыборкаДокументОснование.ДокументОснование;
		НоваяСтрокаОснования.Данные=новый Структура("ДатаОтгрузки",ДатаОтгрузки);
		ЗаполнениеКартинки(СтруктураАдресаКартинок,НоваяСтрокаОснования,ВыборкаДокументОснование);
		ВыборкаДетальныеЗаписи = ВыборкаДокументОснование.Выбрать();
		ЭлементыДобавленияДетальнойЗаписи= НоваяСтрокаОснования.ПолучитьЭлементы();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НоваяСтрокаДетальнойЗаписи=ЭлементыДобавленияДетальнойЗаписи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДетальнойЗаписи,ВыборкаДетальныеЗаписи);
			НоваяСтрокаДетальнойЗаписи.ИдЗадачи=Строка(ВыборкаДетальныеЗаписи.ИдЗадачи);
			ЗаполнениеКартинки(СтруктураАдресаКартинок,НоваяСтрокаДетальнойЗаписи,ВыборкаДетальныеЗаписи);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ТиповоеЗаполнениеДанныхДерева(Знач ВыборкаДокументОснование, Знач ЭлементыДобавленияДокументаОснования,РежимОбновления=Ложь)
	СтруктураАдресаКартинок=ПолучитьИзВременногоХранилища(АдресБуфераКартинок);	
	Пока ВыборкаДокументОснование.Следующий() Цикл
		Если РежимОбновления Тогда 
			СтрокаДокумента=НайтиСтрочкуДерева(ЭлементыДобавленияДокументаОснования,новый Структура("ДокументОснование",ВыборкаДокументОснование.ДокументОснование));
			Если СтрокаДокумента=Неопределено Тогда 
				НоваяСтрокаОснования=ЭлементыДобавленияДокументаОснования.Добавить();
			иначе
				НоваяСтрокаОснования=СтрокаДокумента;
			КонецЕсли;
		иначе
			НоваяСтрокаОснования=ЭлементыДобавленияДокументаОснования.Добавить();
		КонецЕсли;
		НоваяСтрокаОснования.ПредставлениеЗадачи=ВыборкаДокументОснование.ДокументОснованиеПредставление;
		НоваяСтрокаОснования.ТипЗадачи=ВыборкаДокументОснование.ТипЗадачи;
		НоваяСтрокаОснования.ДокументОснование=ВыборкаДокументОснование.ДокументОснование;
		ЗаполнениеКартинки(СтруктураАдресаКартинок,НоваяСтрокаОснования,ВыборкаДокументОснование);
		
		ВыборкаДетальныеЗаписи = ВыборкаДокументОснование.Выбрать();
		ЭлементыДобавленияДетальнойЗаписи= НоваяСтрокаОснования.ПолучитьЭлементы();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НоваяСтрокаДетальнойЗаписи=ЭлементыДобавленияДетальнойЗаписи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДетальнойЗаписи,ВыборкаДетальныеЗаписи);
			НоваяСтрокаДетальнойЗаписи.ИдЗадачи=Строка(ВыборкаДетальныеЗаписи.ИдЗадачи);
			ЗаполнениеКартинки(СтруктураАдресаКартинок,НоваяСтрокаДетальнойЗаписи,ВыборкаДетальныеЗаписи);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры
&НаСервере
Процедура ЗаполнениеКартинки(СтруктураАдресаКартинок,СтрокаДанных,Выборка)
	Если Выборка.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.Наборка Тогда 
		СтрокаДанных.Картинка=СтруктураАдресаКартинок.НаборкаКартинка;
	ИначеЕсли  Выборка.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.Перемещение Тогда 
		СтрокаДанных.Картинка=СтруктураАдресаКартинок.ПеремещениеКартинка;
	ИначеЕсли Выборка.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.КонтрольнаяАгрегация Тогда 
		СтрокаДанных.Картинка=СтруктураАдресаКартинок.КОАКартинка;
	ИначеЕсли Выборка.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.Приемка или Выборка.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.ПриемкаКакЕсть  Тогда 
		СтрокаДанных.Картинка=СтруктураАдресаКартинок.ПриемкаКартинка;
	ИначеЕсли Выборка.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.Размещение Тогда  
		СтрокаДанных.Картинка=СтруктураАдресаКартинок.РазмещениеКартинка;
	ИначеЕсли Выборка.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.Инвентаризация Тогда   
		СтрокаДанных.Картинка=СтруктураАдресаКартинок.ИнвентаризацияКартинка;
	ИначеЕсли Выборка.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.Проверка Тогда 
		СтрокаДанных.Картинка=СтруктураАдресаКартинок.ПроверкаКартинка;
	КонецЕсли;
	КонецПроцедуры

&НаСервере
Процедура ОбновлениеДереваЗадач()
	ТаблицаОбновления=ПолучитьТаблицыСНовымиДанными();
	Запрос=новый Запрос;
	Запрос.Текст=ПолучитьТекстЗапросаОбновления();
	Запрос.УстановитьПараметр("ТаблицаАнализа",ТаблицаАнализаДерева.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаНовыхДанных",ТаблицаОбновления);
	МассивРезультатов=Запрос.ВыполнитьПакет();	
	УдалениеЗадачТСД(МассивРезультатов[6]);
	ДобавлениеНовыхЗадачТСД(МассивРезультатов[5],ТаблицаОбновления);
	ТаблицаАнализаДерева.Очистить();
	Для Каждого стр из ТаблицаОбновления цикл
		НоваяСтрока=ТаблицаАнализаДерева.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,стр);	
	КонецЦикла;
КонецПроцедуры
&НаСервере
Процедура ДобавлениеНовыхЗадачТСД(РезультатЗапроса,ТаблицаОбновления);
	СтруктураАдресаКартинок= ПолучитьИзВременногоХранилища(АдресБуфераКартинок);
	ЭлементыДерева=ДеревоЗадач.ПолучитьЭлементы();
	ВыборкаТипЗадачи=РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаТипЗадачи.Следующий() Цикл
		СтрокаТипаЗадач=НайтиСтрочкуДерева(ЭлементыДерева,новый Структура("ТипЗадачи",ВыборкаТипЗадачи.ТипЗадачи));
		Если СтрокаТипаЗадач = Неопределено Тогда 
		СтрокаТипаЗадач=ЭлементыДерева.Добавить();
		СтрокаТипаЗадач.ПредставлениеЗадачи=Строка(ВыборкаТипЗадачи.ТипЗадачи);
		СтрокаТипаЗадач.ТипЗадачи=ВыборкаТипЗадачи.ТипЗадачи;
		ЗаполнениеКартинки(СтруктураАдресаКартинок,СтрокаТипаЗадач,ВыборкаТипЗадачи);
		КонецЕсли;
		ЭлементыТипаЗадач=СтрокаТипаЗадач.ПолучитьЭлементы();
		ВыборкаДокументаОснования=ВыборкаТипЗадачи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если ВыборкаТипЗадачи.ТипЗадачи =  Перечисления.итWMSТипыЗадачТСД.Наборка Тогда 
			НаборкаЗаполнениеДанныхДерева(ВыборкаДокументаОснования,ЭлементыТипаЗадач, ТаблицаОбновления,Истина);
		иначе
			ТиповоеЗаполнениеДанныхДерева(ВыборкаДокументаОснования,ЭлементыТипаЗадач,Истина);
		КонецЕсли;
	КонецЦикла;

	КонецПроцедуры
&НаСервере
Функция НайтиДатуОтгрузкиНаборки(ВыборкаДокументОснование,ТаблицаОбновления)
	СтрокиДокумента=ТаблицаОбновления.НайтиСтроки(новый Структура("ДокументОснование",ВыборкаДокументОснование.ДокументОснование));
	Если СтрокиДокумента.Количество()=0 Тогда 
		Возврат Неопределено
	КонецЕсли;
	ДополнительныеДанные=СтрокиДокумента[0].ДополнительныеДанные.Получить();
	ДатаОтгрузки=ДополнительныеДанные.ДатаОтгрузки;
	Возврат ДатаОтгрузки;
	КонецФункции
&НаСервере	
Функция ПолучитьСтрокуДереваНаборкаДокументОснование(ВыборкаДокументОснование,РежимОбновления,ТаблицаОбновления,ЭлементыДобавленияДокументаОснования,ДатаОтгрузки)
	ПредыдущийИндекс=Неопределено;	
	Индекс=Неопределено;
	СтрокаДокумента=Неопределено;
	НоваяСтрокаОснования=Неопределено;
	Если РежимОбновления Тогда 
		СтрокаДокумента=НайтиСтрочкуДерева(ЭлементыДобавленияДокументаОснования,новый Структура("ДокументОснование",ВыборкаДокументОснование.ДокументОснование));
		Если СтрокаДокумента <> Неопределено Тогда 
			ПредыдущийИндекс=ЭлементыДобавленияДокументаОснования.Индекс(СтрокаДокумента);
		КонецЕсли;
	КонецЕсли;
	Для Каждого стр из  ЭлементыДобавленияДокументаОснования цикл
		Если стр.Данные.ДатаОтгрузки >ДатаОтгрузки Тогда 
			Индекс=ЭлементыДобавленияДокументаОснования.Индекс(стр);
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	ОбработчикУсловияДобавленияДанныхНаборка(Индекс, НоваяСтрокаОснования, ПредыдущийИндекс, РежимОбновления, СтрокаДокумента, ЭлементыДобавленияДокументаОснования);
	Возврат НоваяСтрокаОснования;
	КонецФункции	
&НаСервере
Процедура ОбработчикУсловияДобавленияДанныхНаборка(Индекс, НоваяСтрокаОснования,  ПредыдущийИндекс,  РежимОбновления, 
	СтрокаДокумента, ЭлементыДобавленияДокументаОснования)
		
		Если Индекс<>Неопределено Тогда 
			Если РежимОбновления Тогда 
				Если ПредыдущийИндекс <> Неопределено Тогда 
					Если ПредыдущийИндекс<>Индекс-1 Тогда 
						НоваяСтрокаОснования = ЭлементыДобавленияДокументаОснования.Вставить(Индекс);
						РекурсияПересозданияЭлементов(НоваяСтрокаОснования,СтрокаДокумента) ;
					иначе
						НоваяСтрокаОснования=СтрокаДокумента;
					КонецЕсли;
				иначе
					НоваяСтрокаОснования = ЭлементыДобавленияДокументаОснования.Вставить(Индекс);
				КонецЕсли;
			иначе
				НоваяСтрокаОснования = ЭлементыДобавленияДокументаОснования.Вставить(Индекс);
			КонецЕсли;
		иначе
			Если РежимОбновления Тогда 
				Если СтрокаДокумента<>Неопределено Тогда 
					НоваяСтрокаОснования=СтрокаДокумента;
				иначе
					НоваяСтрокаОснования=ЭлементыДобавленияДокументаОснования.Добавить();
				КонецЕсли;
			иначе
				НоваяСтрокаОснования=ЭлементыДобавленияДокументаОснования.Добавить();
			КонецЕсли;
		КонецЕсли;

КонецПроцедуры
&НаСервере
Процедура УдалениеЗадачТСД(РезультатЗапроса);
	ЭлементыДерева=ДеревоЗадач.ПолучитьЭлементы();
	ВыборкаТипЗадачи=РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаТипЗадачи.Следующий() Цикл
		СтрокаТипаЗадач=НайтиСтрочкуДерева(ЭлементыДерева,новый Структура("ТипЗадачи",ВыборкаТипЗадачи.ТипЗадачи));
		Если СтрокаТипаЗадач = Неопределено Тогда 
			ВызватьИсключение "Ошибка формирования дерева";
		КонецЕсли;
		ЭлементыТипаЗадач=СтрокаТипаЗадач.ПолучитьЭлементы();
		ВыборкаДокументаОснования=ВыборкаТипЗадачи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДокументаОснования.Следующий() Цикл
			СтрокаДокументаОснования=НайтиСтрочкуДерева(ЭлементыТипаЗадач,новый Структура("ДокументОснование",ВыборкаДокументаОснования.ДокументОснование));
			Если СтрокаДокументаОснования = Неопределено Тогда 
				ВызватьИсключение "Ошибка формирования дерева";
			КонецЕсли;
			ЭлементыДокументаОснования=СтрокаДокументаОснования.ПолучитьЭлементы();
			ВыборкаДетальныхЗаписей=ВыборкаДокументаОснования.Выбрать();
			Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
				СтрокаЗадачи=НайтиСтрочкуДерева(ЭлементыДокументаОснования,новый Структура("ИдЗадачи",ВыборкаДетальныхЗаписей.ИдЗадачи));
				Если СтрокаЗадачи = Неопределено Тогда 
					ВызватьИсключение "Ошибка формирования дерева";
				КонецЕсли;
				ЭлементыДокументаОснования.Удалить(СтрокаЗадачи);
			КонецЦикла;
			Если ЭлементыДокументаОснования.Количество()=0 Тогда 
				ЭлементыТипаЗадач.Удалить(СтрокаДокументаОснования);
			КонецЕсли;
		КонецЦикла;
		Если ЭлементыТипаЗадач.Количество()=0 Тогда 
			ЭлементыДерева.Удалить(СтрокаТипаЗадач);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры
&НаСервере
Функция  ПолучитьТаблицыСНовымиДанными()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	Если ПодстрокаПоиска<>"" Тогда 
		ИспользованиеПодстрокиПоиска=Истина;
	иначе
		ИспользованиеПодстрокиПоиска=Ложь;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итЗадачиКРаспределению.ДокументОснование КАК ДокументОснование,
	|	итЗадачиКРаспределению.ТипЗадачи КАК ТипЗадачи,
	|	итЗадачиКРаспределению.ИдЗадачи КАК ИдЗадачи,
	|	итЗадачиКРаспределению.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	итЗадачиКРаспределению.ПредставлениеЗадачи КАК ПредставлениеЗадачи,
	|	итЗадачиКРаспределению.Состояние КАК Состояние,
	|	итЗадачиКРаспределению.ДополнительныеДанные КАК ДополнительныеДанные,
	|	итЗадачиКРаспределению.ДокументОснованиеПредставление КАК ДокументОснованиеПредставление
	|ПОМЕСТИТЬ ВтДанныеКРаспределению
	|ИЗ
	|	РегистрСведений.итЗадачиКРаспределению КАК итЗадачиКРаспределению
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ИспользованиеПодстрокиПоиска
	|				ТОГДА ВЫБОР
	|						КОГДА &ЭлементПоиска = ""Документ""
	|							ТОГДА итЗадачиКРаспределению.ДокументОснованиеПредставление ПОДОБНО ""%"" + &ПодстрокаПоиска + ""%""
	|						ИНАЧЕ итЗадачиКРаспределению.ПредставлениеЗадачи ПОДОБНО ""%"" + &ПодстрокаПоиска + ""%""
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеКРаспределению.ДокументОснование КАК ДокументОснование,
	|	ВтДанныеКРаспределению.ТипЗадачи КАК ТипЗадачи,
	|	ВтДанныеКРаспределению.ИдЗадачи КАК ИдЗадачи,
	|	ВтДанныеКРаспределению.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ВтДанныеКРаспределению.ПредставлениеЗадачи КАК ПредставлениеЗадачи,
	|	ВтДанныеКРаспределению.Состояние КАК Состояние,
	|	ВтДанныеКРаспределению.ДополнительныеДанные КАК ДополнительныеДанные,
	|	ВтДанныеКРаспределению.ДокументОснованиеПредставление КАК ДокументОснованиеПредставление
	|ИЗ
	|	ВтДанныеКРаспределению КАК ВтДанныеКРаспределению";
	
	Запрос.УстановитьПараметр("ИспользованиеПодстрокиПоиска",ИспользованиеПодстрокиПоиска);
	Запрос.УстановитьПараметр("ПодстрокаПоиска",ПодстрокаПоиска);
	Запрос.УстановитьПараметр("ЭлементПоиска",ЭлементПоиска);
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаОбновления=ПолучитьТаблицуОбновления(РезультатЗапроса);
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока=ТаблицаОбновления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаДетальныеЗаписи);
		НоваяСтрока.ИдЗадачи=Строка(ВыборкаДетальныеЗаписи.ИдЗадачи);
	КонецЦикла;
	Возврат ТаблицаОбновления;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
КонецФункции

&НаСервере
Функция ПолучитьТаблицуОбновления(РезультатЗапроса)
	ТаблицаОбновления=новый ТаблицаЗначений;
	Для Каждого Колонка из РезультатЗапроса.Колонки цикл
		Если Колонка.Имя="ИдЗадачи" Тогда
			ТаблицаОбновления.Колонки.Добавить(Колонка.Имя,новый ОписаниеТипов("Строка",,,,новый КвалификаторыСтроки(36)));
		иначе
			ТаблицаОбновления.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения);
		КонецЕсли;
	КонецЦикла;
	Возврат ТаблицаОбновления;
КонецФункции

&НаСервере	
Функция  ПересоздатьЭлементСНовымПодчинением(СтарыйЭлемент,СтрокаНовогоПодчинения)
	НовыйЭлемент=СтрокаНовогоПодчинения.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйЭлемент,СтарыйЭлемент);
	Если СтарыйЭлемент.ПолучитьЭлементы().Количество()>0 Тогда 
		РекурсияПересозданияЭлементов(НовыйЭлемент,СтарыйЭлемент);
	КонецЕсли;
	Возврат НовыйЭлемент;
КонецФункции
&НаСервере	
Процедура РекурсияПересозданияЭлементов(НовыйЭлемент,СтарыйЭлемент)
	ЭлементыПодчинения=СтарыйЭлемент.ПолучитьЭлементы();
	Для Каждого стр из ЭлементыПодчинения цикл
		СтрокаНовогоЭлемента=НовыйЭлемент.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНовогоЭлемента,стр);
		Если ЭлементыПодчинения.ПолучитьЭлементы().Количество()>0 Тогда
			РекурсияПересозданияЭлементов(СтрокаНовогоЭлемента,стр);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция НайтиСтрочкуДерева(КолекцияЭлементов,СтруктураПоиска)
	СтрокаДерева=Неопределено;
	Для Каждого стр из КолекцияЭлементов цикл
		ВсеСошлись=Истина;
		Для Каждого Элемент из СтруктураПоиска Цикл 
			Если стр[Элемент.Ключ]<>Элемент.Значение Тогда 
				ВсеСошлись=Ложь;
			КонецЕсли;	
		КонецЦикла;
		Если ВсеСошлись Тогда 
			СтрокаДерева=стр;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат СтрокаДерева;
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапросаОбновления()
	Текст="ВЫБРАТЬ
	      |	ТаблицаАнализа.ДокументОснование КАК ДокументОснование,
	      |	ТаблицаАнализа.ТипЗадачи КАК ТипЗадачи,
	      |	ТаблицаАнализа.ИдЗадачи КАК ИдЗадачи,
	      |	ТаблицаАнализа.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	      |	ТаблицаАнализа.ПредставлениеЗадачи КАК ПредставлениеЗадачи,
	      |	ТаблицаАнализа.Состояние КАК Состояние,
	      |	ТаблицаАнализа.ДокументОснованиеПредставление КАК ДокументОснованиеПредставление
	      |ПОМЕСТИТЬ ВТАнализа
	      |ИЗ
	      |	&ТаблицаАнализа КАК ТаблицаАнализа
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	ТаблицаНовыхДанных.ДокументОснование КАК ДокументОснование,
	      |	ТаблицаНовыхДанных.ТипЗадачи КАК ТипЗадачи,
	      |	ТаблицаНовыхДанных.ИдЗадачи КАК ИдЗадачи,
	      |	ТаблицаНовыхДанных.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	      |	ТаблицаНовыхДанных.ПредставлениеЗадачи КАК ПредставлениеЗадачи,
	      |	ТаблицаНовыхДанных.Состояние КАК Состояние,
	      |	ТаблицаНовыхДанных.ДокументОснованиеПредставление КАК ДокументОснованиеПредставление
	      |ПОМЕСТИТЬ ВТНовыхДанных
	      |ИЗ
	      |	&ТаблицаНовыхДанных КАК ТаблицаНовыхДанных
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	ВТНовыхДанных.ИдЗадачи КАК ИдЗадачи
	      |ПОМЕСТИТЬ ВтИзмененныеЗадачи
	      |ИЗ
	      |	ВТНовыхДанных КАК ВТНовыхДанных
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТАнализа КАК ВТАнализа
	      |		ПО ВТНовыхДанных.ИдЗадачи = ВТАнализа.ИдЗадачи
	      |ГДЕ
	      |	ВЫБОР
	      |			КОГДА ВТНовыхДанных.ДокументОснование <> ВТАнализа.ДокументОснование
	      |				ТОГДА ИСТИНА
	      |			КОГДА ВТАнализа.ТипЗадачи <> ВТНовыхДанных.ТипЗадачи
	      |				ТОГДА ИСТИНА
	      |			КОГДА ВТНовыхДанных.ИдентификаторУпаковки <> ВТАнализа.ИдентификаторУпаковки
	      |				ТОГДА ИСТИНА
	      |			КОГДА ВТНовыхДанных.ПредставлениеЗадачи <> ВТАнализа.ПредставлениеЗадачи
	      |				ТОГДА ИСТИНА
	      |			КОГДА ВТАнализа.Состояние <> ВТНовыхДанных.Состояние
	      |				ТОГДА ИСТИНА
	      |			ИНАЧЕ ЛОЖЬ
	      |		КОНЕЦ
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	ВТНовыхДанных.ДокументОснование КАК ДокументОснование,
	      |	ВТНовыхДанных.ТипЗадачи КАК ТипЗадачи,
	      |	ВТНовыхДанных.ИдЗадачи КАК ИдЗадачи,
	      |	ВТНовыхДанных.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	      |	ВТНовыхДанных.ПредставлениеЗадачи КАК ПредставлениеЗадачи,
	      |	ВТНовыхДанных.Состояние КАК Состояние,
	      |	ВТНовыхДанных.ДокументОснованиеПредставление КАК ДокументОснованиеПредставление
	      |ПОМЕСТИТЬ НовыеЗадачи
	      |ИЗ
	      |	ВТНовыхДанных КАК ВТНовыхДанных
	      |ГДЕ
	      |	НЕ ВТНовыхДанных.ИдЗадачи В
	      |				(ВЫБРАТЬ
	      |					ВТАнализа.ИдЗадачи КАК ИдЗадачи
	      |				ИЗ
	      |					ВТАнализа КАК ВТАнализа
	      |				СГРУППИРОВАТЬ ПО
	      |					ВТАнализа.ИдЗадачи)
	      |
	      |ОБЪЕДИНИТЬ ВСЕ
	      |
	      |ВЫБРАТЬ
	      |	ВТНовыхДанных.ДокументОснование,
	      |	ВТНовыхДанных.ТипЗадачи,
	      |	ВТНовыхДанных.ИдЗадачи,
	      |	ВТНовыхДанных.ИдентификаторУпаковки,
	      |	ВТНовыхДанных.ПредставлениеЗадачи,
	      |	ВТНовыхДанных.Состояние,
	      |	ВТНовыхДанных.ДокументОснованиеПредставление
	      |ИЗ
	      |	ВтИзмененныеЗадачи КАК ВтИзмененныеЗадачи
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНовыхДанных КАК ВТНовыхДанных
	      |		ПО ВтИзмененныеЗадачи.ИдЗадачи = ВТНовыхДанных.ИдЗадачи
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	ВТАнализа.ДокументОснование КАК ДокументОснование,
	      |	ВТАнализа.ТипЗадачи КАК ТипЗадачи,
	      |	ВТАнализа.ИдЗадачи КАК ИдЗадачи,
	      |	ВТАнализа.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	      |	ВТАнализа.ПредставлениеЗадачи КАК ПредставлениеЗадачи,
	      |	ВТАнализа.Состояние КАК Состояние,
	      |	ВТАнализа.ДокументОснованиеПредставление КАК ДокументОснованиеПредставление
	      |ПОМЕСТИТЬ ВтЗадачиПодУдаление
	      |ИЗ
	      |	ВТАнализа КАК ВТАнализа
	      |ГДЕ
	      |	НЕ ВТАнализа.ИдЗадачи В
	      |				(ВЫБРАТЬ
	      |					ВТНовыхДанных.ИдЗадачи КАК ИдЗадачи
	      |				ИЗ
	      |					ВТНовыхДанных КАК ВТНовыхДанных
	      |				СГРУППИРОВАТЬ ПО
	      |					ВТНовыхДанных.ИдЗадачи)
	      |
	      |ОБЪЕДИНИТЬ ВСЕ
	      |
	      |ВЫБРАТЬ
	      |	ВТАнализа.ДокументОснование,
	      |	ВТАнализа.ТипЗадачи,
	      |	ВТАнализа.ИдЗадачи,
	      |	ВТАнализа.ИдентификаторУпаковки,
	      |	ВТАнализа.ПредставлениеЗадачи,
	      |	ВТАнализа.Состояние,
	      |	ВТАнализа.ДокументОснованиеПредставление
	      |ИЗ
	      |	ВтИзмененныеЗадачи КАК ВтИзмененныеЗадачи
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТАнализа КАК ВТАнализа
	      |		ПО ВтИзмененныеЗадачи.ИдЗадачи = ВТАнализа.ИдЗадачи
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	НовыеЗадачи.ДокументОснование КАК ДокументОснование,
	      |	НовыеЗадачи.ТипЗадачи КАК ТипЗадачи,
	      |	НовыеЗадачи.ИдЗадачи КАК ИдЗадачи,
	      |	НовыеЗадачи.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	      |	НовыеЗадачи.ПредставлениеЗадачи КАК ПредставлениеЗадачи,
	      |	НовыеЗадачи.Состояние КАК Состояние,
	      |	НовыеЗадачи.ДокументОснованиеПредставление КАК ДокументОснованиеПредставление
	      |ИЗ
	      |	НовыеЗадачи КАК НовыеЗадачи
	      |ИТОГИ
	      |	МАКСИМУМ(ДокументОснованиеПредставление)
	      |ПО
	      |	ТипЗадачи,
	      |	ДокументОснование
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	ВтЗадачиПодУдаление.ДокументОснование КАК ДокументОснование,
	      |	ВтЗадачиПодУдаление.ТипЗадачи КАК ТипЗадачи,
	      |	ВтЗадачиПодУдаление.ИдЗадачи КАК ИдЗадачи,
	      |	ВтЗадачиПодУдаление.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	      |	ВтЗадачиПодУдаление.ПредставлениеЗадачи КАК ПредставлениеЗадачи,
	      |	ВтЗадачиПодУдаление.Состояние КАК Состояние,
	      |	ВтЗадачиПодУдаление.ДокументОснованиеПредставление КАК ДокументОснованиеПредставление
	      |ИЗ
	      |	ВтЗадачиПодУдаление КАК ВтЗадачиПодУдаление
	      |ИТОГИ
	      |	МАКСИМУМ(ДокументОснованиеПредставление)
	      |ПО
	      |	ТипЗадачи,
	      |	ДокументОснование";
	
	Возврат Текст;
	
КонецФункции



#Область ПолучениеДанныхССервера
&НаКлиенте
Процедура ОпросСервераБазыДанных() Экспорт 
Если  ВводДоступен() и АвтоОбновление Тогда 
ОпросСервераБазыДанныхНаСервереАссинхронно();
КонецЕсли;
ПодключитьОбработчикОжидания("ОпросСервераБазыДанных",35,Истина);  
КонецПроцедуры
&НаСервере
Процедура ОпросСервераБазыДанныхНаСервереАссинхронно()
	ПараметрыМетода = новый Массив;
	СтруктураДанных=новый Структура;
	СлужебныеФункцииИПроцедурыКлиентСервер.СформироватьСтруктуруДанныхОПользователе(СтруктураДанных);
	ПараметрыМетода.Добавить(СтруктураДанных);
	ФоновыеЗадания.Выполнить("ОбработчикиЗапросаСервера.ОбновитьСписокЗадачКРаспределению",ПараметрыМетода,новый УникальныйИдентификатор,"Обновить список задач к распределению");
КонецПроцедуры


#КонецОбласти
&НаКлиенте
Процедура ОбновлениеДанныхКлиентаПоТаймеру() Экспорт 
	ОбновлениеДереваЗадач();
КонецПроцедуры



&НаКлиенте
Процедура  ПолучитьИнформациюОЗадачахПоШтрихКоду(ШтрихКод)
	КлючЗаписи=ПоискИСозданиеКлючаЗаписиПоШтрихКоду(ШтрихКод);
	Если КлючЗаписи=Неопределено Тогда 
		Сообщить("Задач со штрих кодом "+ШтрихКод+" не найдено");
		Возврат
	КонецЕсли;
	//Если Найти(НРег(Строка(ВренутьЗначениеПоля(КлючЗаписи,"ТипЗадачи"))),НРег("Размещение")) тогда
	Если СверитьДанныеОткрытияШтрихКодом(КлючЗаписи) тогда
		ИдЗадачиКлюча=ВренутьЗначениеПоля(КлючЗаписи,"ИдЗадачи");
		АдресДанныхОповещения=ПринятьКИсполнениюЗадачуНаСервере(КлючЗаписи);
		ОбработкаПолученныхДанныхКлиент(АдресДанныхОповещения,ИдЗадачиКлюча);
	иначе
		ОткрытьФорму("Обработка.ДиспетчерЗадач.Форма.ФормаВыбораДействий",новый Структура("КлючЗаписи",КлючЗаписи),ЭтаФорма);
	КонецЕсли;
	ТригерПриемаСканераШтрихКода=Ложь;
КонецПроцедуры

&НаСервереБезКонтекста	
Функция ПоискИСозданиеКлючаЗаписиПоШтрихКоду(ШтрихКод)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итЗадачиКРаспределению.ДокументОснование КАК ДокументОснование,
	|	итЗадачиКРаспределению.ТипЗадачи КАК ТипЗадачи,
	|	итЗадачиКРаспределению.ИдЗадачи КАК ИдЗадачи,
	|	итЗадачиКРаспределению.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	итЗадачиКРаспределению.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.итЗадачиКРаспределению КАК итЗадачиКРаспределению
	|ГДЕ
	|	итЗадачиКРаспределению.ИдентификаторУпаковки = &ИдентификаторУпаковки
	|	И итЗадачиКРаспределению.Состояние = ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.КВыполнению)";
	
	Запрос.УстановитьПараметр("ИдентификаторУпаковки", ШтрихКод);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда 
		КлючЗаписи=РегистрыСведений.итЗадачиКРаспределению.СоздатьКлючЗаписи(новый Структура("ДокументОснование,ТипЗадачи,ИдЗадачи",ВыборкаДетальныеЗаписи.ДокументОснование,ВыборкаДетальныеЗаписи.ТипЗадачи,ВыборкаДетальныеЗаписи.ИдЗадачи));
		Возврат КлючЗаписи;
	КонецЕсли;
	Возврат Неопределено;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции
&НаСервереБезКонтекста	
Функция ПоискИСозданиеКлючаЗаписиПоИдЗадачи(Знач ИдЗадачи)
	Если ТипЗнч(ИдЗадачи)=Тип("Строка") Тогда 
		ИдЗадачи=новый УникальныйИдентификатор(ИдЗадачи);
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итЗадачиКРаспределению.ДокументОснование КАК ДокументОснование,
	|	итЗадачиКРаспределению.ТипЗадачи КАК ТипЗадачи,
	|	итЗадачиКРаспределению.ИдЗадачи КАК ИдЗадачи,
	|	итЗадачиКРаспределению.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	итЗадачиКРаспределению.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.итЗадачиКРаспределению КАК итЗадачиКРаспределению
	|ГДЕ
	|	итЗадачиКРаспределению.Состояние = ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.КВыполнению)
	|	И итЗадачиКРаспределению.ИдЗадачи = &ИдЗадачи";
	
	Запрос.УстановитьПараметр("ИдЗадачи", ИдЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда 
		КлючЗаписи=РегистрыСведений.итЗадачиКРаспределению.СоздатьКлючЗаписи(новый Структура("ДокументОснование,ТипЗадачи,ИдЗадачи",ВыборкаДетальныеЗаписи.ДокументОснование,ВыборкаДетальныеЗаписи.ТипЗадачи,ВыборкаДетальныеЗаписи.ИдЗадачи));
		Возврат КлючЗаписи;
	КонецЕсли;
	Возврат Неопределено;
	
	
КонецФункции


&НаСервереБезКонтекста
Функция СверитьДанныеОткрытияШтрихКодом(КлючЗаписи)
	Если КлючЗаписи.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.Размещение или
		КлючЗаписи.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.Отгрузка Тогда 
		Возврат Истина ;
	иначе
		Возврат Ложь ;
	КонецЕсли;	 
КонецФункции

&НаСервереБезКонтекста
Функция ВренутьЗначениеПоля(Переменная,Поле)
	Возврат Переменная[Поле];
КонецФункции

&НаСервере
Функция  ПринятьКИсполнениюЗадачуНаСервере(КлючЗаписи)
	УникальныйИдентификаторФормы=ЭтаФорма.УникальныйИдентификатор;
	СтруктураДанных=новый Структура;
	СлужебныеФункцииИПроцедурыКлиентСервер.СформироватьСтруктуруДанныхОПользователе(СтруктураДанных);
	СтруктураДанных.Вставить("ТипПолученияДанных","Задача");
	СтруктураДанных.Вставить("КлючПолученияДанных",КлючЗаписи.ИдЗадачи);
	СтруктураДанных.Вставить("ТипЗадачи",КлючЗаписи.ТипЗадачи);
	Ответ=ОбработчикиЗапросаСервера.ЗапроситьДанные(СтруктураДанных,"DataRegistrationAndDonload");
	АдресДанныхОповещения=ПоместитьВоВременноеХранилище(Ответ,УникальныйИдентификаторФормы);
	Возврат АдресДанныхОповещения;   	
КонецФункции


&НаКлиенте
Процедура ОбработкаПолученныхДанныхКлиент(ВыбранноеЗначение,ИдЗадачиКлюча)
	МассивСозданныхОбъектовДанных=Неопределено;
	ОбработкаПолученныхДанныхСервер(ВыбранноеЗначение,МассивСозданныхОбъектовДанных);
	Если  ТипЗнч(МассивСозданныхОбъектовДанных)=тип("Массив") тогда
		Если МассивСозданныхОбъектовДанных.Количество()>0 тогда
			ДанныеСканированнойЗадачи= ПолучитьКлючиДляРаботыСДанными(ИдЗадачиКлюча);
			ОткрытьФорму("Обработка.ДиспетчерЗадач.Форма.МоиЗадачиОбщийСписок",новый Структура("ДанныеСканированнойЗадачи",ДанныеСканированнойЗадачи),ЭтаФорма);
			ТригерПриемаСканераШтрихКода=Ложь;
		иначе
			Сообщить("Не каких новых данных загруженно не было");
			ЭтаФорма.Закрыть();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
&НаСервере
Процедура ОбработкаПолученныхДанныхСервер(ВыбранноеЗначение,МассивСозданныхОбъектовДанных)
	СтруктураДанных=ПолучитьИзВременногоХранилища(ВыбранноеЗначение);
	Если СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(СтруктураДанных)тогда
		Возврат
	КонецЕсли;
	МодульРаспределенияДанных.ОбработчикВходящихДанных(СтруктураДанных,ВыбранноеЗначение);
	ОбработчикиЗапросаСервера.ОбновитьСписокЗадачКРаспределению();
	ОбработанныеДанные=ПолучитьИзВременногоХранилища(ВыбранноеЗначение);
	Если ТипЗнч(ОбработанныеДанные)=тип("Структура") тогда
		Если ОбработанныеДанные.Свойство("МассивСозданныхОбъектовДанных") тогда
			МассивСозданныхОбъектовДанных=ОбработанныеДанные.МассивСозданныхОбъектовДанных;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
&НаСервере
Функция ПолучитьКлючиДляРаботыСДанными(ИдЗадачиКлюча)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИтЗадачиНаТСД.ДокументОснование КАК ДокументОснование,
	|	ИтЗадачиНаТСД.ТипЗадачи КАК ТипЗадачи,
	|	ИтЗадачиНаТСД.ИдЗадачи КАК ИдЗадачи,
	|	ИтЗадачиНаТСД.ИдентификаторУпаковки КАК ИдентификаторУпаковки
	|ИЗ
	|	РегистрСведений.ИтЗадачиНаТСД КАК ИтЗадачиНаТСД
	|ГДЕ
	|	ИтЗадачиНаТСД.ИдЗадачи = &ИдЗадачи";
	
	Запрос.УстановитьПараметр("ИдЗадачи", ИдЗадачиКлюча);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		СтруктураДанных=новый Структура;
		для Каждого  Колонка из РезультатЗапроса.Колонки цикл
			СтруктураДанных.Вставить(Колонка.Имя,ВыборкаДетальныеЗаписи[Колонка.Имя]);
		КонецЦикла;
		Возврат СтруктураДанных;
	КонецЕсли;
	Возврат Неопределено;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеИдЗадачиПоДокументу(ДокументОснование)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	итЗадачиКРаспределению.ИдЗадачи КАК ИдЗадачи
		|ИЗ
		|	РегистрСведений.итЗадачиКРаспределению КАК итЗадачиКРаспределению
		|ГДЕ
		|	итЗадачиКРаспределению.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Возврат ВыборкаДетальныеЗаписи.ИдЗадачи;
	КонецЕсли;
	Возврат Неопределено;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	КонецФункции


#КонецОбласти


