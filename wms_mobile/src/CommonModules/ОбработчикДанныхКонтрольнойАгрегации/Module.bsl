// Процедура - О бработать документ контрольная агрегация
//
// Параметры:
//  Документ			 - Структура - структура содержащая в себе данные документа на сервере 
//  АдресХраненияДанных	 - Строка - адрес временного хранилища или адрес Временного хранилища формы, получаемого методом СлужебныеФункцииИПроцедурыКлиентСервер.ПоместитьВоВременноеХранилищеФормы
//
Процедура ОБработатьДокументКонтрольнаяАгрегация(Документ,АдресХраненияДанных="")Экспорт 
ТипОбрабатываемойЗадачи=Перечисления.итWMSТипыЗадачТСД.КонтрольнаяАгрегация;
ДокументТСД=НайтиСоздатьДокументАгрегации(Документ,ТипОбрабатываемойЗадачи,АдресХраненияДанных);
Если не Документ.Свойство("МассивЗадач") тогда
	ВызватьИсключение "Ошибка типа данных";
КонецЕсли;	
СтруктураТиповыхПараметровЗадач=ОбработчикДанныхОбщиеФункцииИПроцедуры.СформироватьТиповуюСтруктуруПараметровДанныхЗадач(,ДокументТСД,ТипОбрабатываемойЗадачи,АдресХраненияДанных);

для Каждого Задача из Документ.МассивЗадач цикл
	СтруктураТиповыхПараметровЗадач.Задача=Задача;
	ОбработчикДанныхОбщиеФункцииИПроцедуры.ОбработчикСозданиеИзменениеУдалениеЗадач(СтруктураТиповыхПараметровЗадач);
КонецЦикла;
Если ТипЗнч(Документ.ДополнительныеДанные)=тип("Структура") тогда

	Если  Документ.ДополнительныеДанные.Свойство("ДанныеДокументаКСканированию") тогда
		ДанныеДокументаКСканированию=Документ.ДополнительныеДанные.ДанныеДокументаКСканированию;
		ОбъектДокументаТСД=ДокументТСД.ПолучитьОбъект();
		ОбъектДокументаТСД.ДанныеДокументаКСканированию.Очистить();
		для Каждого стр из  ДанныеДокументаКСканированию цикл
			НоваяСтрокаДополнительныхДанных=ОбъектДокументаТСД.ДанныеДокументаКСканированию.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДополнительныхДанных,стр);
			НоваяСтрокаДополнительныхДанных.СерияНоменклатурыСтроковоеПредставление=Строка(стр.СерияНоменклатуры);
			НоваяСтрокаДополнительныхДанных.НоменклатураСтроковоеПредставление=Строка(стр.Номенклатура);
		КонецЦикла;
		
		ОбъектДокументаТСД.Записать();
	КонецЕсли
	
КонецЕсли;
ОбработчикДанныхОбщиеФункцииИПроцедуры.ПроверитьУдалитьДокумент(ДокументТСД,АдресХраненияДанных);

КонецПроцедуры


#Область СлужебныеФункцииИпроцедурыКОА
Функция НайтиСоздатьДокументАгрегации(Документ,ТипЗадачи,АдресХраненияДанных="")
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итКонтрольнаяАгрегация.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.итКонтрольнаяАгрегация КАК итКонтрольнаяАгрегация
		|ГДЕ
		|	итКонтрольнаяАгрегация.ГУИД = &ГУИД";
	
	Запрос.УстановитьПараметр("ГУИД", Документ.ГУИД);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	иначе
		НовыйДокументАгрегация = Документы.итКонтрольнаяАгрегация.СоздатьДокумент();
		НовыйДокументАгрегация.ГУИД=Документ.ГУИД;
		НовыйДокументАгрегация.Номер=Документ.Номер;
		НовыйДокументАгрегация.Дата=Документ.Дата;
		НовыйДокументАгрегация.ТипЗадачи=ТипЗадачи;
		НовыйДокументАгрегация.Записать();
		
		ЗапроситьДанныеБазыМарок(НовыйДокументАгрегация.Ссылка);
		
		Если ЗначениеЗаполнено(АдресХраненияДанных) тогда
		ОбработчикДанныхОбщиеФункцииИПроцедуры.РаботаСВременнымХранилищемМассивИзменений(АдресХраненияДанных,"Создан",НовыйДокументАгрегация.Ссылка);
		КонецЕсли;
		Возврат НовыйДокументАгрегация.Ссылка;
	КонецЕсли;	
			
		//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции
	
Процедура ЗапроситьДанныеБазыМарок(Документ)
	
	СтруктураДанных=новый Структура;
	СлужебныеФункцииИПроцедурыКлиентСервер.СформироватьСтруктуруДанныхОПользователе(СтруктураДанных);
	СтруктураДанных.Вставить("ТипЗадачи",Документ.ТипЗадачи);
	СтруктураДанных.Вставить("КлючИнициализацииДанных",Документ.ГУИД);
	Если Константы.ПолучатьПМУАссинхронно.Получить() Тогда 
		СтруктураДанных.Вставить("ТипОбработкиДанных","ПолучениеБазыМарокНаборкиАссинхронно");
		СтруктураДанных=ОбработчикиЗапросаСервера.ЗапроситьДанные(СтруктураДанных,"ControlAggregation");
		Если не СтруктураДанных.Свойство("БазаМарокНаборки") Тогда 
			ОпросСервераНаНаличеДанныхОМарках(СтруктураДанных);
		КонецЕсли;
	Иначе 
		СтруктураДанных.Вставить("ТипОбработкиДанных","ПолучениеБазыМарокНаборки");
		СтруктураДанных=ОбработчикиЗапросаСервера.ЗапроситьДанные(СтруктураДанных,"ControlAggregation");
	КонецЕсли;
	Если СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(СтруктураДанных,"БазаМарокНаборки") Тогда 
		ВызватьИсключение "Ошибка!!!";
	КонецЕсли;
	Если СтруктураДанных.БазаМарокНаборки.Количество()>0 Тогда 
		ОбъектИзменения=Документ.ПолучитьОбъект();
		ОбъектИзменения.АгрегированиеПоНаборке=Истина;
		ОбъектИзменения.Записать();
		ЗаписатьДанныеМарокКОА(СтруктураДанных.БазаМарокНаборки,Документ.УникальныйИдентификатор());
	КонецЕсли;
КонецПроцедуры

Процедура ОпросСервераНаНаличеДанныхОМарках(СтруктураДанных)
	//@skip-check use-non-recommended-method
	ДатаОкончанияОпроса=ТекущаяДата()+500;
	Шаг=30;
	//@skip-check use-non-recommended-method
	ДатаЗАпросаНаСервер=ТекущаяДата()+10;	 
	//@skip-check use-non-recommended-method
	Пока ТекущаяДата()<=ДатаОкончанияОпроса Цикл
		Если ТекущаяДата()>=ДатаЗАпросаНаСервер Тогда 
	    СтруктураДанных.ТипОбработкиДанных="ПолучениеАссинхронноЗаписанныхДанных";
		СтруктураДанных=ОбработчикиЗапросаСервера.ЗапроситьДанные(СтруктураДанных,"ControlAggregation");
		Если  СтруктураДанных.Завершён Тогда 
			Прервать;
		иначе
		ДатаЗАпросаНаСервер=ДатаЗАпросаНаСервер+Шаг;
		КонецЕсли;
        КонецЕсли;
	КонецЦикла;
	
	КонецПроцедуры
Процедура ЗаписатьДанныеМарокКОА(БазаМарокНаборки,КлючДанных)
	НаборЗаписей=РегистрыСведений.итДанныеПомарочногоУчета.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Ключ.Установить(КлючДанных);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
	Для Каждого стр из БазаМарокНаборки цикл
		МенеджерЗаписи=РегистрыСведений.итДанныеПомарочногоУчета.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи,стр);
		МенеджерЗаписи.Ключ=КлючДанных;
		МенеджерЗаписи.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры
#КонецОбласти