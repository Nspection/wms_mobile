// Процедура - О бработать документ приемка
// Создает\Перезаписывает документ Приемка , а так же создает перезаписывает данные задач в регистр
// Параметры:
//  Документ			 - Структура - структура содержащая в себе данные документа на сервере 
//  АдресХраненияДанных	 - Строка - адрес временного хранилища или адрес Временного хранилища формы, получаемого методом СлужебныеФункцииИПроцедурыКлиентСервер.ПоместитьВоВременноеХранилищеФормы
//
Процедура ОБработатьДокументПриемка(Документ,АдресХраненияДанных="")Экспорт 
	ТипОбрабатываемойЗадачи=Перечисления.итWMSТипыЗадачТСД.Приемка;
	Если Документ.Свойство("ПомарочныйУчет")  Тогда
		ЗапроситьДанныеМарок=Документ.ПомарочныйУчет
	иначе
		ЗапроситьДанныеМарок=Ложь;
	КонецЕсли;
	
	ДокументТСД=НайтиСоздатьДокументПриемки(Документ,ТипОбрабатываемойЗадачи,АдресХраненияДанных,ЗапроситьДанныеМарок);
	Если не Документ.Свойство("МассивЗадач") тогда
		ВызватьИсключение "Ошибка типа данных";
	КонецЕсли;
	СтруктураТиповыхПараметровЗадач=ОбработчикДанныхОбщиеФункцииИПроцедуры.СформироватьТиповуюСтруктуруПараметровДанныхЗадач(,ДокументТСД,ТипОбрабатываемойЗадачи,АдресХраненияДанных);

	для Каждого Задача из Документ.МассивЗадач цикл
		СтруктураТиповыхПараметровЗадач.Задача=Задача;
		ОбработчикДанныхОбщиеФункцииИПроцедуры.ОбработчикСозданиеИзменениеУдалениеЗадач(СтруктураТиповыхПараметровЗадач);
	КонецЦикла;
	ОбработчикДанныхОбщиеФункцииИПроцедуры.ПроверитьУдалитьДокумент(ДокументТСД,АдресХраненияДанных);
	
КонецПроцедуры
// Процедура - О бработать документ приемка как есть
// Создает\Перезаписывает документ Приемка , а так же создает перезаписывает данные задач в регистр
// Параметры:
//  Документ			 - Структура - структура содержащая в себе данные документа на сервере 
//  АдресХраненияДанных	 - Строка - адрес временного хранилища или адрес Временного хранилища формы, получаемого методом СлужебныеФункцииИПроцедурыКлиентСервер.ПоместитьВоВременноеХранилищеФормы
//
Процедура ОБработатьДокументПриемкаКакЕсть(Документ,АдресХраненияДанных="")Экспорт 
	ТипОбрабатываемойЗадачи=Перечисления.итWMSТипыЗадачТСД.ПриемкаКакЕсть;
	Если Документ.Свойство("ПомарочныйУчет")  Тогда
		ЗапроситьДанныеМарок=Документ.ПомарочныйУчет
	иначе
		ЗапроситьДанныеМарок=Ложь;
	КонецЕсли;
	ДокументТСД=НайтиСоздатьДокументПриемки(Документ,ТипОбрабатываемойЗадачи,АдресХраненияДанных,ЗапроситьДанныеМарок);
	Если не Документ.Свойство("МассивЗадач") тогда
		ВызватьИсключение "Ошибка типа данных";
	КонецЕсли;	
	СтруктураТиповыхПараметровЗадач=ОбработчикДанныхОбщиеФункцииИПроцедуры.СформироватьТиповуюСтруктуруПараметровДанныхЗадач(,ДокументТСД,ТипОбрабатываемойЗадачи,АдресХраненияДанных);
	для Каждого Задача из Документ.МассивЗадач цикл	
		СтруктураТиповыхПараметровЗадач.Задача=Задача;
		ОбработчикДанныхОбщиеФункцииИПроцедуры.ОбработчикСозданиеИзменениеУдалениеЗадач(СтруктураТиповыхПараметровЗадач);
	КонецЦикла;
	Если ТипЗнч(Документ.ДополнительныеДанные)=тип("Структура") тогда
		
		Если  Документ.ДополнительныеДанные.Свойство("ДанныеФизическихНосителей") тогда
			ОбъектДокументаТСД=ДокументТСД.ПолучитьОбъект();
			ДанныеФизическихНосителей=Документ.ДополнительныеДанные.ДанныеФизическихНосителей;
			ОбъектДокументаТСД.ДанныеФизическогоНосителя.Очистить();
			для Каждого стр из  ДанныеФизическихНосителей цикл
				НоваяСтрокаДополнительныхДанных=ОбъектДокументаТСД.ДанныеФизическогоНосителя.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаДополнительныхДанных,стр);
			КонецЦикла;
			ОбъектДокументаТСД.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	ОбработчикДанныхОбщиеФункцииИПроцедуры.ПроверитьУдалитьДокумент(ДокументТСД,АдресХраненияДанных);
	
КонецПроцедуры


#Область СлужебныеФункцииИпроцедурыПриемки
// Функция - Найти создать документ приемки
//
// Параметры:
//  Документ			 - Структура - структура содержащая в себе данные документа на сервере
//  ТипЗадачи			 - Перечисления.итWMSТипыЗадачТСД - тип задачи документа (в данном модуле Приемка или ПриемкаКакЕсть) 
//  АдресХраненияДанных	 - Строка - адрес временного хранилища или адрес Временного хранилища формы, получаемого методом СлужебныеФункцииИПроцедурыКлиентСервер.ПоместитьВоВременноеХранилищеФормы
//  ЗапроситьДанныеМарок - Булево - т.к  приемка это не делимая еденица, то запрос марок производиться для всего документа Истина-запросить, Ложь-не запрашивать.
// 
// Возвращаемое значение:
// ДокументСсылка.итПриемка  - ссылка на документ приемки
//
Функция НайтиСоздатьДокументПриемки(Документ,ТипЗадачи,АдресХраненияДанных="",ЗапроситьДанныеМарок)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итПриемка.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.итПриемка КАК итПриемка
	|ГДЕ
	|	итПриемка.ГУИД = &ГУИД";
	
	Запрос.УстановитьПараметр("ГУИД", Документ.ГУИД);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	иначе
		НовыйДокументПриемки = Документы.итПриемка.СоздатьДокумент();
		НовыйДокументПриемки.ГУИД=Документ.ГУИД;
		НовыйДокументПриемки.Номер=Документ.Номер;
		НовыйДокументПриемки.Дата=Документ.Дата;
		НовыйДокументПриемки.ТипЗадачи=ТипЗадачи;
		//Если ТипЗнч(Документ.ДополнительныеДанные)=Тип("Массив") тогда
		//	для Каждого стр из Документ.ДополнительныеДанные цикл
		//		НоваяСтрокаФизическихДанных=НовыйДокументПриемки.ДанныеФизическогоНосителя.Добавить();
		//		ЗаполнитьЗначенияСвойств(НоваяСтрокаФизическихДанных,стр);
		//		
		//	КонецЦикла;
		//КонецЕсли;
		//// Запросить данные марок при создании документа
		СтруктураДанныхЗапросаМарок=новый Структура;
		Если ЗапроситьДанныеМарок Тогда 
		СтруктураДанныхЗапросаМарок.Вставить("КлючОперации","ЗапросДанныхМарок");
		СтруктураДанныхЗапросаМарок.Вставить("ТипЗадачи",ТипЗадачи);
		СтруктураДанныхЗапросаМарок.Вставить("КлючПолученияДанных",Документ.ГУИД);
		СтруктураДанныхЗапросаМарок=ОбработчикиЗапросаСервера.ЗапроситьДанные(СтруктураДанныхЗапросаМарок,"ServiceFunction");
		Если СлужебныеФункцииИПроцедурыКлиентСервер.ТиповойОбработчикОшибок(СтруктураДанныхЗапросаМарок) тогда
			ВызватьИсключение "ошибка";
		КонецЕсли;	
		Если СтруктураДанныхЗапросаМарок.Свойство("ДанныеПомарочногоУчета") тогда
			Если СтруктураДанныхЗапросаМарок.ДанныеПомарочногоУчета.Количество()>0 тогда
				НовыйДокументПриемки.ПомарочныйУчет=Истина;	
			КонецЕсли;
		КонецЕсли;
		КонецЕсли;
		////////
		НовыйДокументПриемки.Записать();
		///Записать данные помарочного учета
		Если НовыйДокументПриемки.ПомарочныйУчет тогда
			ОбработчикДанныхОбщиеФункцииИПроцедуры.ДобавитьДанныеПомарочногоУчета(НовыйДокументПриемки.Ссылка.УникальныйИдентификатор(),СтруктураДанныхЗапросаМарок.ДанныеПомарочногоУчета);
		КонецЕсли;
		///////////////////////////////
		
		Если ЗначениеЗаполнено(АдресХраненияДанных) тогда
			ОбработчикДанныхОбщиеФункцииИПроцедуры.РаботаСВременнымХранилищемМассивИзменений(АдресХраненияДанных,"Создан",НовыйДокументПриемки.Ссылка);
		КонецЕсли;
		Возврат НовыйДокументПриемки.Ссылка;
	КонецЕсли;	
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции
#КонецОбласти